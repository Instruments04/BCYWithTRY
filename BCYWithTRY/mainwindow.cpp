/*
 * This file is part of Biochemistry.
 *
 * Biochemistry is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Biochemistry is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with <Your Project Name>. If not, see <https://www.gnu.org/licenses/>.
 */

#include <QtCore/QCoreApplication>
#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <iostream>
#include "printer.h"
#include <QtNetwork/QNetworkConfigurationManager>
#include <QUrl>
#include <QtNetwork/QNetworkAccessManager>
#include <QtNetwork/QNetworkRequest>
#include <QtNetwork/QNetworkReply>
#include <QNetworkSession>
#include <QDateTimeEdit>
#include <QDebug>
#include <QFile>
#include <QTextDocument>
#include <QSlider>
#include <QHBoxLayout>
#include <QLabel>
#include <fstream>
#include <QItemDelegate>
#define BACKLIGHT_DIR "/sys/class/backlight/rpi_backlight"      //rpi_backlight"      //10-0045"
#include <QByteArray>
#include <QDateTime>
#include <QList>
#include <QTimeZone>
#include <QElapsedTimer>
#include <QLCDNumber>
#include <QHostInfo>
#include <qcustomplot.h>
#include <QScrollerProperties>
#include <QGestureRecognizer>
#include <QScrollArea>
#include <QGestureEvent>
#include <QVBoxLayout>
#include <QPanGesture>
#include <QWidget>
#include <QDir>
#include <QSqlQueryModel>
#include <unordered_map>
#include "stdafx.h"
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "interpolation.h"
//#include "config.h"
using namespace alglib;
using namespace std;

#define MAXIT 100
#define EPS 3.0e-7
#define FPMIN 1.0e-30
#define STOP 1.0e-8
#define TINY 1.0e-30
#define LED 26
#define ADC_BASE 100
#define SPI_CHAN 0
#define LED_BASE 200
#define dataPin 21
#define clockPin 22
#define latchPin 23
#define Motor_PIN 24

int Input_Min=750,Input_Max=1023,Output_Min=0,Output_Max=1023,R1_Samp_Incu=0,After_R2_Incu=0,Direct_read_Incu=0;
QVector<double>polyx,polyy;
double Slope=0,Intercept=0,a=0,b=0,c=0,d=0,e=0,g=0,n1=0,before_data=0;
int data1=0,data2=0,data3=0,data4=0,data5=0,data6=0,Cal_His_Val=0,settings_mode=0,calibration_check=0,Obj_data=0,Loop_data=0,New_row=0,After_Clear_Data=0,New_Stabil_val=0,Calibrate_Done=0,read_wavenm=0;
int LIS_Sending_Data=0,check_saveBtn=0,LIS_connect_data=0,Autocal_click=0,Run_Data=0;
int Auto_cal_sno=0,Autocal_Gainval=0,Autocal_Intern_First=0,Autocal_Intern_Second=0,Autocal_NM_Change=0;
QString Autocal_String,DBTestName,TestName_Show,Current_Connection,Restore_DC,nanometer;
QString Test_Type,clickval0,clickval1,clickval2,clickval3,clickval4,clickval5,clickval6,clickval7,clickval8,clickval9,clickval10,clickval11,clickval12;
int BlankBackfunc=0,exptopn=0,Multi_calibration=0,read135=0,read180=0,Afterread135=0,Afterread180=0,Turbidity_Back=0,Read_d=0;
int CountBackfunc=0,save_data_back=0,update_data_back=0,Turdata=0,Turbidity_read_Intensity=0;
int BackBlankfunc=0,With_G= 0,Page_change=0;
int endsavebtn=0,backdata=0,chk=0,cal_retest=0,multi_cal1=0,result=0;
int dateformat=0,Turbi_Cal1=0,Turbi_Cal2=0,Turbi_Cal3=0,Turbi_Cal4=0,Turbi_Cal5=0,Turbi_Cal6=0,Turbi_Cal7=0,Turbi_Cal8=0,Turbi_Sample=0,Turbi_cal_final=0,Turbi_cal_finaled=0,Turbi_Current_Read_Point=0;
// Set the size and position of the keyboard
int keyboardWidth = 800,read_wave135=0 ,read_wave180=0,Afterread_wave135=0 ,Afterread_wave180=0;
int keyboardHeight = 275,filtwave135[600],filtwave180[600],Afterfiltwave135[600],Afterfiltwave180[600];
int screenWidth = 800;    // Width of main window
int screenHeight = 480; // Height of main window
int virtual_x = 0; // Center horizontally
int virtual_y = 205;    // Align to the bottom
int FKCprintopt=0,Increament_data340=0,Increament_data405=0,Increament_data505=0,Increament_data545=0,Increament_data570=0,Increament_data630=0,Increament_data700=0;
int FKSprintopt=0,read_wave_LED=0,Init_Read=0;
int FKQC1printopt=0;
int FKQC2printopt=0;
int KCprintopt=0;
int KSprintopt=0;
int KQC1printopt=0;
int KQC2printopt=0;
int comboIndex=0;
int endpointsavebtn=0;
int twopointsavebtn=0;
int kineticsavebtn=0;
int kineticruncal=0;
int kineticrunsamp=0;
int endruncal=0;
int endrunsamp=0;
int tworuncal=0;
int tworunsamp=0;
int tabtest=0;
int tabrecent=0;
int tabedit=0;
int tabdelete=0;
int tabnumber=0;
int tabnumber2=0;
int tabqc=0;
int LIS_data=0;
int Fixed_Kinetic_Print=0;
int Kinetic_Print=0;
int tabfilter=0;
double cur_abs=0,cur_temp=0,conct=0;
double next_abs=0;
double cur1_abs=0;
double cur2_abs=0;
double cur3_abs=0;
double next2_abs=0;
double next3_abs=0;
double next4_abs=0;
int testback=0;
int editback=0;
int deleteback=0;
int qcback=0;
int filterback=0;
QList<QString> dat;
QList<QString> LotNumber;
QList<QString> LotNumber1;
QList<QString> LottNumber;
int sec_read_point=0;
int third_read_point=0;
int last_read_point=0;
int load_minval=0;
int load_maxval=100;
int filtwave[600];
static QString arraylst[100]={""};
static QString array1[100]={""};
int read_status=0;
int read_wave=0;
int read_intensity=0;
int total_read_point=0;
int current_read_point=0;
int current_end_read_point=0;
int Calreteststop=0;
int QCreteststop=0;
int Samplereteststop=0;
double blank_val=0;
int dataval=0;
int dly=0;
int lagg=0;
double stableval=0;
int val=0;
int vaalu=0;
int vaalu2=0;
double fct=0;
//double multiFact=0;
int option=0;
double concen=0;
QString Fromdt,Calibration_Histry_TestName,Calibration_Histry_Testcode,QC1_Testname;
QString Todt,QC2_Testname,Barcode_checkname,msgboxtext,msgicondata,deleteindex;
int w340=0,w405=0,w505=0,w545=0,w570=0,w630=0,w700=0;
double bc_y_val=0;
double absorbance=0;
int line=0;
double ymin=0;
double ymax =0;
double start=0;
double end =0;
double oldvl=0;
double currentvl=0;
double incv=0;
int Enter=1;
int tem=0;
int tem1=37.0;
int cnnt=0;
int retestval=0;
int readingtime=0;
int endqcfinish=0,msgboxdata=0;
int endsampfinish=0;
int twoqcfinish=0;
int twosampfinish=0;
int kineticqcfinish=0;
int kineticsampfinish=0,Run_DW340=0,Run_DW405=0,Run_DW505=0,Run_DW545=0,Run_DW570=0,Run_DW630=0,Run_DW700=0;
std::string IPAddress ;
std::string PortNumber;
QList<QString> unit_data;
QString Prod_Code;
QString LNo;
QString LNo1;
QString startval="2500";
QString endval="3900";
QString text;
QString Glu_Temp;
QString TestName;
QList<QString> LottNo;
QList<QString> LottNo1;
QString QC1Conc;
QString QC1OD;
QString QC2Conc;
QString P_Name;
QString QC2OD;
QString Unit;
QString QCMin;
QString QCMax;
QString Dateee;
QString Timeee;
QString mainval1;
QString mainval2;
QString mainval3;
QString LotNo;
int Objdel=0;
int startvl=2000;
int endvl=4000;
int sno=1;
double QC1=0;
double QC2=0;
int Internal=1;
int External=0;
int xval=0;
int FrstInternval = 3400; //340nm start
int SecInternval = 3600 ; //340nm end
int ThreeInternval = 3100 ; //405nm start
int FourInternval = 3300 ; //405nm end
int FiveInternval = 2700 ; //505nm start
int SixInternval = 2900 ; //505nm end
int SevenInternval = 2700 ; //545nm start
int EightInternval = 2900 ; //545nm end
int NineInternval = 2700 ; //570nm start
int TenInternval = 2900 ; //570nm end
int EleInternval = 2400 ; //630nm start
int TweInternval = 2600 ; //630nm end
int ThirInternval = 2900 ; //700nm start
int ForInternval = 3100 ; //700nm end
int decimalpoint=0;
int Printopt1=0;
int Printopt2=0;
int nextnumber=0;
int nextnumber2=0;
int nextnumber3=0;
int nextnumber4=0;
int qc1retestbtn=0;
int qc2retestbtn=0;
int PID_num=0;
int PName_num=0;
int PAge_num=0;
int PGender_num=0,dummyk=0,polycal=0,rec=0;
int Pdefault=0;
int Cdefault=0;
int End_qc1_opt=0;
int End_qc2_opt=0;
int Two_qc1_opt=0;
int Two_qc2_opt=0;
int Kin_qc1_opt=0;
int Kin_qc2_opt=0;
QString Tname , batchno,concent,Calib_Abs,factor,dte,bno,conc,procode,CalibrateAbs,Fact;
int calibrate=0;
double fact=0;
QElapsedTimer etimer;
QTimer* Incubationtimer = new QTimer();
QTimer* Incubationtimer1 = new QTimer();
QTime countdown(0, 0);

MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent),
    ui(new Ui::MainWindow),sock(nullptr), // Initialize the pointer to nullptr
    isConnected(false),function_check(false) // Initialize dialog pointer
  // Initialize function_check to false
{
    ui->setupUi(this);
    qDebug()<<"Enter ";
    ui->customPlot_3->setInteraction(QCP::iRangeDrag , true);
    ui->customPlot_3->setInteraction(QCP::iRangeZoom , true);
    ui->customPlot->setToolTip("");
    ui->frame_5->setVisible(false);
    ui->pushButton_17->setEnabled(false);
    ui->stackedWidget->setCurrentIndex(18);
    ui->label_74->setVisible(false);
    ui->label_10->setVisible(false);
    ui->label_245->setVisible(false);
    ui->stackedWidget_11->setVisible(false);
    ui->checkBox->setChecked(true);
    ui->pushButton_202->setVisible(false);
    ui->pushButton_203->setVisible(false);
    ui->label_31->setVisible(false);
    ui->Print_Btn->setVisible(false);
    ui->Print_Btn->setVisible(false);
    ui->pushButton_261->setDisabled(true);
    ui->tabWidget_2->setCurrentIndex(0);
    ui->tabWidget_4->setCurrentIndex(0);
    ui->lineEdit_17->setVisible(false);
    ui->label_270->setDisabled(false);
    ui->label_271->setDisabled(false);
    ui->lineEdit_15->setDisabled(false);
    ui->Stop_Btn->setDisabled(true);
    ui->Stop_Btn_2->setDisabled(true);
    ui->pushButton_276->setDisabled(true);
    ui->pushButton_12->setDisabled(false);
    ui->frame_12->setVisible(false);
    wiringPiSetup () ;
    mcp3004Setup (ADC_BASE, SPI_CHAN) ;
    sr595Setup (LED_BASE, 16, dataPin, clockPin, latchPin) ;
    pinMode (LED, PWM_OUTPUT);
    pwmWrite (LED, 0);
    QSqlDatabase mydb = QSqlDatabase::addDatabase("QSQLITE");
    mydb.setDatabaseName("/home/pi/git/Bar_Data.db");
    if(!mydb.open())
        qDebug() << "Can't Connect to DB !";
    else
        qDebug() << "Connected Successfully to DB !";

    setWindowFlags(Qt::FramelessWindowHint);

    pinMode (Motor_PIN, PWM_OUTPUT);
    //pwmSetMode(PWM_MODE_MS); // Set Mark-Space Mode (better for motors)
    pwmWrite (Motor_PIN, 0);

    //Setting & Power Btn Hidden**************

    QDateTime dateTime(QDateTime::fromString(date, "yyyy-MM-dd hh:mm:ss"));
    ui->frame->hide();
    ui->pushButton_23->hide();
    ui->pushButton_25->hide();
    ui->label_254->setVisible(false);
    ui->label_256->setVisible(false);

    //Date & Time edit********************

    hourPattern = QString("%1:%2");
    this->date = "";
    this->time = "";

    QImage image("/home/pi/customplot.png");
    if (image.isNull())
    {
        qDebug() << "Error loading image: " ;
        QPixmap pixmap = ui->customPlot->grab();
        pixmap.save("/home/pi/customplot.png");
    }
    else
        qDebug()<<"Image Already Exist";

    // Grab the gestures for the scroll areas
    QWidget *w = ui->scrollArea_7;
    QScroller::grabGesture(w, QScroller::LeftMouseButtonGesture);
    /* w = ui->tableView;
    QScroller::grabGesture(w, QScroller::LeftMouseButtonGesture);*/

    timer = new QTimer(this);
    connect(timer ,SIGNAL(timeout()) , this ,SLOT(ShowTime())); // System Current Time Display
    timer->setTimerType(Qt::PreciseTimer);
    timer->start(1000);

    Turbi_plot_timer = new QTimer(this);
    connect(Turbi_plot_timer, SIGNAL(timeout()), this, SLOT(Turbi_Update_Func()));

    readtimer = new QTimer(this);
    connect(readtimer ,SIGNAL(timeout()) , this ,SLOT(reading1())); // Main Reading Function
    readtimer->setTimerType(Qt::PreciseTimer);
    //readtimer->start(1000);

    connect(Incubationtimer, SIGNAL(timeout()), this, SLOT(Displaycountdowntimer()));
    Incubationtimer->setTimerType(Qt::PreciseTimer); // Ensure precise timing

    connect(Incubationtimer1, SIGNAL(timeout()), this, SLOT(Displaycountdowntimer1()));
    Incubationtimer1->setTimerType(Qt::PreciseTimer); // Ensure precise timing


    timer1 = new QTimer(this);
    connect(timer1, SIGNAL(timeout()), this,SLOT(temp()));  //Read & Incubator Block Temp Display
    timer1->start(1000);

    CalibrateTimer = new QTimer(this);
    connect(CalibrateTimer ,SIGNAL(timeout()) , this ,SLOT(btn())); //AutoCalibrate Page Entering

    /* Progressrun = new QTimer(this);
    connect(Progressrun , SIGNAL(timeout()) , this , SLOT(Progress()));*/

    FunctionrunTimer = new QTimer(this);
    connect(FunctionrunTimer ,SIGNAL(timeout()) , this ,SLOT(shows())); // AutoCalibrate Function Running

    Stabilizingg = new QTimer(this);
    connect(Stabilizingg ,SIGNAL(timeout()) , this ,SLOT(Stabilizing())); // Stabilize Function Running

    Starting = new QTimer(this);
    connect(Starting ,SIGNAL(timeout()) , this ,SLOT(WindowShow())); //MainWindow Show
    Starting->start(1000);

    timerr = new QTimer(this);
    connect(timerr, SIGNAL(timeout()), this, SLOT(Movie()));

    Start_Loop_Calibrate = new QTimer(this);
    connect(Start_Loop_Calibrate ,SIGNAL(timeout()) , this ,SLOT(Start_loop_Auto_Calibrate())); // Gain700nm Reading Function


    connect(ui->comboBox_7, &QComboBox::currentTextChanged, this, &MainWindow::nostd);
    //End-Point Plot********************S

    ui->customPlot->addGraph();
    ui->customPlot->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
    ui->customPlot->graph(0)->setLineStyle(QCPGraph::lsLine);
    QProcess *process = new QProcess(this);
    process->start("sh",QStringList()<<"-c"<<"sudo rfkill unblock wifi");
    if (!process->waitForStarted())
    {
        qDebug() << "Error : " << process->errorString();
    }
    process->waitForFinished(-1);
    delete process; // Release memory


    ui->pushButton_229->setVisible(false);
    ui->label_247->setVisible(false);
    ui->label_248->setVisible(false);
    ui->label_249->setVisible(false);
    ui->lineEdit_19->setVisible(false);
    ui->lineEdit_20->setVisible(false);
    ui->lineEdit_149->setVisible(false);
    ui->pushButton_241->setVisible(false);
    ui->pushButton_242->setVisible(false);
    ui->label_247->setVisible(false);
    ui->pushButton_234->setDisabled(true);
    ui->pushButton_238->setDisabled(true) ;
    ui->pushButton_232->setDisabled(true) ;
    ui->pushButton_237->setDisabled(true) ;
    ui->pushButton_233->setDisabled(true) ;
    ui->pushButton_235->setDisabled(true) ;
    ui->pushButton_215->setDisabled(true) ;
    ui->pushButton_236->setDisabled(true) ;
    ui->label_222->setVisible(false);
    ui->lineEdit_18->setVisible(false);
    ui->pushButton_207->setDisabled(true);
    ui->pushButton_213->setDisabled(true) ;
    ui->pushButton_210->setDisabled(true) ;
    ui->pushButton_212->setDisabled(true) ;
    ui->pushButton_208->setDisabled(true) ;
    ui->pushButton_214->setDisabled(true) ;
    ui->pushButton_209->setDisabled(true) ;
    ui->pushButton_211->setDisabled(true) ;
    ui->label_256->setVisible(false);
    ui->label_210->setVisible(false);
    //ui->label_206->setVisible(false);
    // ui->lineEdit_148->setVisible(false);
    QFile file("/home/pi/git/BCYWithTRY/README.md");
    if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QTextStream in(&file);
        while (!in.atEnd()) {
            QString data = in.readLine();
            bool ok = false;
            double Version = data.toDouble(&ok);
            ui->label_340->setText("<font color='gray'>"+QString::number(Version)+"</font>");
            ui->label_31->setText(QString::number(Version));
            qDebug()<<Version;
        }
    }
    //  ui->pushButton_230->setVisible(false);
    //  ui->pushButton_231->setVisible(false);
    ui->label_219->setVisible(false);
    ui->pushButton_10->setVisible(false);
    ui->pushButton_134->setVisible(false);
    ui->pushButton_4->setVisible(false);
    ui->pushButton_5->setVisible(false);
    ui->pushButton_5->setVisible(false);
    ui->pushButton_7->setVisible(false);
    ui->pushButton_231->setVisible(false);
    ui->pushButton_228->setVisible(true);
    ui->pushButton_11->setVisible(false);
    ui->pushButton_131->setVisible(false);
    ui->toolButton->setVisible(false);
    ui->Load_Btn_2->setVisible(true);
    ui->label_428->setVisible(false);
    ui->label_431->setVisible(false);
    ui->pushButton_294->setVisible(false);
    ui->label_432->setVisible(false);
    ui->label_433->setVisible(false);
    ui->pushButton_293->setVisible(false);
    ui->Settings_Back_Btn->setVisible(false);
    ui->Settings_Back_Btn_2->setVisible(false);
    ui->lineEdit_16->setVisible(false);

    QString Baudrate , Databit , Parity, Flowcontrol;
    QSqlQuery qyy;
    qyy.prepare("select BaudRate,DataBits,Parity,FlowControl from Printer where sno=1");
    qyy.exec();
    while(qyy.next())
    {
        Baudrate = qyy.value(0).toString();
        Databit = qyy.value(1).toString();
        Parity = qyy.value(2).toString();
        Flowcontrol = qyy.value(3).toString();
    }
    ui->comboBox_11->setCurrentText(Baudrate);
    ui->comboBox_17->setCurrentText(Databit);
    ui->comboBox_14->setCurrentText(Parity);
    ui->comboBox_18->setCurrentText(Flowcontrol);
    int Motor=0;
    QSqlQuery query;
    query.prepare("select Motor from Turbidity_Setting where sno=1");
    query.exec();
    while(query.next())
    {
        Motor=query.value(0).toInt();
    }
    int Dtaa = Motor/1000;
    ui->lineEdit_162->setText(QString::number(Dtaa));
    //Brightness
    QString DC_Motor_Intensity;
    QSqlQuery qryy;
    qryy.prepare("select DCMotor_Instensity from Turbidity_test where sno=1");
    qryy.exec();
    while(qryy.next())
        DC_Motor_Intensity=qryy.value(0).toString();

    ui->lineEdit_110->setText(DC_Motor_Intensity);

    ui->horizontalSlider->setRange(0,255);

    int Brightness_val=0;
    QSqlQuery qy;
    qy.prepare("select Brightness from Brightness where sno=1");
    qy.exec();
    while(qy.next())
    {
        Brightness_val=qy.value(0).toInt();
    }

    // Set the initial value of the slider

    ui->horizontalSlider->setValue(Brightness_val);
    ui->label_54->setText(QString::number(Brightness_val));
    QFile brightnessFile(BACKLIGHT_DIR "/brightness");
    if (!brightnessFile.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        qDebug() << "Failed to open backlight brightness file";
        return;
    }
    QString brightnessValue = QString::number(Brightness_val);
    brightnessFile.write(brightnessValue.toUtf8());
    brightnessFile.close();

    Wave_LED_OFF();
    digitalWrite (LED_BASE + 6,LOW) ;
    //on_pushButton_8_clicked();
    /* for(int i=0;i<200;i++)
    {
      //on_pushButton_8_clicked();             //340
            //  on_pushButton_9_clicked();      //405
              // on_pushButton_24_clicked();    //505
              // on_pushButton_26_clicked();    //545
              // on_pushButton_128_clicked();   //570
              //  on_pushButton_129_clicked();  //630
              on_pushButton_130_clicked();    //700
        QThread::msleep(500);
        //        qDebug() <<i<<"  "<<w340<<"  "<<w405<<"  "<<w505<<"  "<<w545<<"  "<<w570<<"  "<<w630<<"  "<<w700;
        qDebug()<<w700;
    }*/

    //setStyleSheet("QMessageBox{background-color:#c5d9ed; border: none;font-family: Arial; font-style: normal;  font-size: 15pt; color: #000000 ; }");

    //QMovie *movie = new QMovie("/home/pi/git/BCYWithTRY/BCYWithTRY/img/833.gif");
    //ui->label_68->setMovie(movie);
    ui->label_68->setVisible(false);
    // movie->start();
    ui->pushButton_14->setEnabled(false);

    ui->pushButton_203->setVisible(false);
    on_pushButton_354_clicked();
    //moviess = new QMovie("/home/pi/git/BCYWithTRY/BCYWithTRY/img/833.gif");
    //ui->label_245->setMovie(moviess);
    //reading1();

}

void MainWindow::startCalibrationTimer()
{
    if (!Start_Loop_Calibrate->isActive())
    {
        Start_Loop_Calibrate->start(1000); // Start with a 1-second interval
        qDebug() << "Calibration timer started!";
    }
}

void MainWindow::WindowShow()
{
    this->show();
    QThread::msleep(100);
    Starting->stop();
    QThread::msleep(1000);
    // ui->stackedWidget->setCurrentIndex(31);
    // ui->frame_5->setVisible(true);
    // CalibrateTimer->start(1000);
    CreateTable_WithDifferent_AgeGrp("test");
    // createTable_withQCHis();
    //Add_2nd_Phase_Parameters();
    // on_pushButton_229_clicked();

}

void MainWindow::CreateTable_WithDifferent_AgeGrp(const QString &tableName)
{
    qApp->processEvents();
    // List of fields to check/add
    QStringList fieldsToAdd = {"Infant_Nmin", "Infant_Nmax", "Child_Nmin", "Child_Nmax","Female_Nmin", "Female_Nmax"};

    QStringList existingFields;
    QSqlQuery query;
    // Fetch existing fields
    if (query.exec("PRAGMA table_info(" + tableName + ");")) {
        while (query.next())
        {
            existingFields << query.value(1).toString(); // Column name is in the second field
        }
    } else {
        qDebug() << "Failed to get table info:" << query.lastError().text();
        return;
    }

    // Add missing fields
    for (const QString &field : fieldsToAdd)
    {
        if (!existingFields.contains(field))
        {
            QString alterQuery = QString("ALTER TABLE %1 ADD COLUMN %2 TEXT;").arg(tableName, field);
            if (!query.exec(alterQuery)) {
                qDebug() << "Failed to add field" << field << ":" << query.lastError().text();
            } else {
                qDebug() << "Field added:" << field;
            }
        }
        else
        {
            qDebug() << "Field already exists:" << field;
        }
        CreateTable_Turbi_WithDifferent_AgeGrp("Turbidity_test");
    }
}

void MainWindow::CreateTable_Turbi_WithDifferent_AgeGrp(const QString &tableName)
{
    qApp->processEvents();
    // List of fields to check/add
    QStringList fieldsToAdd = {"Infant_Nmin", "Infant_Nmax", "Child_Nmin", "Child_Nmax","Female_Nmin", "Female_Nmax"};

    QStringList existingFields;
    QSqlQuery query;
    // Fetch existing fields
    if (query.exec("PRAGMA table_info(" + tableName + ");")) {
        while (query.next())
        {
            existingFields << query.value(1).toString(); // Column name is in the second field
        }
    } else {
        qDebug() << "Failed to get table info:" << query.lastError().text();
        return;
    }

    // Add missing fields
    for (const QString &field : fieldsToAdd)
    {
        if (!existingFields.contains(field))
        {
            QString alterQuery = QString("ALTER TABLE %1 ADD COLUMN %2 TEXT;").arg(tableName, field);
            if (!query.exec(alterQuery)) {
                qDebug() << "Failed to add field" << field << ":" << query.lastError().text();
            } else {
                qDebug() << "Field added:" << field;
            }
        }
        else
        {
            qDebug() << "Field already exists:" << field;
        }
        createTable_withQCHis();
    }
}

void MainWindow::on_pushButton_229_clicked()
{
    timerr->stop();

    // ui->stackedWidget->setCurrentIndex(0);
    // ui->frame_5->setVisible(true);
    Stabilizingg->start(1000);
}

void MainWindow::on_pushButton_270_clicked()
{
    Progressrun->stop();
    qDebug()<<"Stabilize skipped ";
    CalibrateTimer->start(1000);
}

// Function to interpolate colors
QColor MainWindow::interpolateColor(const QColor &startColor, const QColor &endColor, float ratio)
{
    int r = startColor.red() + ratio * (endColor.red() - startColor.red());
    int g = startColor.green() + ratio * (endColor.green() - startColor.green());
    int b = startColor.blue() + ratio * (endColor.blue() - startColor.blue());
    return QColor(r, g, b);
}

void MainWindow::Movie()
{
    ui->pushButton_229->setVisible(false);
    Wave_LED_OFF();
    // double read_temp = ui->label_10->text().toDouble();
    double read_temp = ui->label_74->text().toDouble();
    double incu_temp = ui->label_74->text().toDouble();
    if(read_temp < incu_temp)
    {
        ui->label_10->setVisible(false);
        ui->label_74->setVisible(false);
        cur_temp = read_temp;
    }
    else
    {
        ui->label_10->setVisible(false);
        ui->label_74->setVisible(false);
        cur_temp = incu_temp;
    }

    QPixmap pixmap(ui->label_11->size());
    pixmap.fill(Qt::transparent); // Transparent background

    // Prepare QPainter to draw on the pixmap
    QPainter painter(&pixmap);
    painter.setRenderHint(QPainter::Antialiasing);

    // Calculate dimensions for the arc
    int width = ui->label_11->width();
    int height = ui->label_11->height();
    int diameter = qMin(width, height) - 10; // Leave some padding

    // Add top padding (adjust the value as needed, e.g., 20 pixels)
    int topPadding = 35;
    QRectF rect((width - diameter) / 2, (height - diameter) / 2 + topPadding, diameter, diameter); // Move the arc down


    // Draw light gray background arc (full semi-circle)
    QPen backgroundPen(QColor(200, 200, 200), 25,Qt::SolidLine,Qt::RoundCap); // Light gray
    painter.setPen(backgroundPen);
    painter.drawArc(rect, 180 * 16, -180 * 16); // Full semi-circle (left-to-right)


    // Define the range-based colors
    QColor color1(49, 119, 227);  // Blue
    QColor color2(224, 227, 64);  // Yellow
    QColor color3(222, 118, 53);  // Orange
    QColor color4(245, 48, 34);   // Red

    QColor interpolatedColor;

    // Determine the range and interpolate color
    if (cur_temp < 18) {
        float ratio = (float)cur_temp / 18.0;  // Ratio in range 0-18
        interpolatedColor = interpolateColor(color1, color2, ratio);
    } else if (cur_temp >= 18 && cur_temp < 25) {
        float ratio = (float)(cur_temp - 18) / (25 - 18);  // Ratio in range 18-25
        interpolatedColor = interpolateColor(color2, color3, ratio);
    } else if (cur_temp >= 25 && cur_temp < 32) {
        float ratio = (float)(cur_temp - 25) / (32 - 25);  // Ratio in range 25-32
        interpolatedColor = interpolateColor(color3, color4, ratio);
    } else if (cur_temp >= 32) {
        interpolatedColor = color4;  // Solid red for values above 32
    }

    // Set the pen with the interpolated color
    QPen progressPen(interpolatedColor, 10,Qt::SolidLine,Qt::RoundCap);
    painter.setPen(progressPen);

    double spanAngle = (cur_temp * 180.0) / 37.0; // Map value to 0-37°
    painter.drawArc(rect, 180.0 * 16.0, -spanAngle * 16.0); // Progress arc clockwise

    // Draw progress text
    painter.setPen(Qt::black);
    painter.setFont(QFont("Arial", 20, QFont::Bold));
    QString text = QString::number(cur_temp) + "°C";
    painter.drawText(rect, Qt::AlignCenter, text);

    // Draw range labels (0°, 15°, 37°)
    painter.setFont(QFont("Arial", 10)); // Smaller font for range labels
    int offset = 20; // Distance from the arc to the labels
    int radius = diameter / 2 + offset;

    // Position for 0° (left)
    QPointF pos0(rect.center().x() - radius-10, rect.center().y()+10);
    painter.drawText(pos0, "0°");

    // Position for 15° (top center)
    QPointF pos15(rect.center().x() - 5, rect.top() - offset);
    painter.drawText(pos15, "18°");

    // Position for 37° (right)
    QPointF pos37(rect.center().x() + radius - 2, rect.center().y()+10);
    painter.drawText(pos37, "37°");


    ui->label_11->setPixmap(pixmap);
    ui->label_11->setAlignment(Qt::AlignBottom | Qt::AlignHCenter); // Align bottom center
    if (cur_temp >= 37.0)
    {
        timerr->stop();
        Stabilizingg->start(1000);
    }
}

void MainWindow::Stabilizing()
{
    ui->progressBar->setValue(0);
    ui->label_356->setVisible(true);
    Wave_LED_OFF();
    ui->pushButton_270->setVisible(false);
    Stabilizingg->stop();
    // Progressrun->start(1000);
    ui->label_356->clear();
    ui->stackedWidget->setCurrentIndex(25);
    Progress();
}

void MainWindow::Progress()
{
    if(New_Stabil_val==0)
    {
        ui->progressBar->setStyleSheet("QProgressBar {border: 1px solid black;"
                                       "border-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0.163265 rgba(27, 81, 106, 255), stop:1 rgba(114, 157, 225, 255));"
                                       "background-color: rgb(221, 221, 221);"
                                       "text-align: center;"
                                       "}"
                                       "QProgressBar::chunk"
                                       "{"
                                       "background-color: rgb(12, 68, 145);"
                                       "}"
                                       );

        ui->label_269->setText("Stabilizing");
        Wave_LED_OFF();
    }
    else if(New_Stabil_val==1)
    {
        ui->progressBar->setStyleSheet("QProgressBar {border: 1px solid black;"
                                       "border-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0.163265 rgba(27, 81, 106, 255), stop:1 rgba(114, 157, 225, 255));"
                                       "background-color: rgb(221, 221, 221);"
                                       "text-align: center;"
                                       "}"
                                       "QProgressBar::chunk"
                                       "{"
                                       "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                       "}"
                                       );

        ui->label_269->setText("Laser Stabilizing");
        int Inten=0;
        QSqlQuery qy;
        qy.prepare("select * from Turbidity_test where sno=1");
        // qy.prepare("select Intensity from Turbidity_test where TestName='"+TestName+"'");
        qy.exec();
        while(qy.next())
            Inten = qy.value(73).toInt();
        pwmWrite (LED, Inten);
        qDebug()<<"Turbi intern : "<<Inten;
        digitalWrite (LED_BASE + 6,HIGH) ;
    }

    //
    ui->label_244->setVisible(true);
    ui->label_245->setVisible(false);
    ui->label_269->setVisible(true);
    ui->progressBar->setVisible(true);
    ui->progressBar_2->setVisible(false);
    ui->progressBar->setMinimum(0);
    ui->progressBar->setMaximum(100);
    double div = (100.0 / 180.0); // Use floating-point division
    // Start a timer to update the progress bar
    Progressrun = new QTimer(this);
    connect(Progressrun, &QTimer::timeout, [=]() {
        if (stableval >= 100)
        {
            Progressrun->stop();
            qDebug()<<"Done ...";
            if(New_Stabil_val==0)
            {
                ui->stackedWidget->setCurrentIndex(31);
                ui->frame_5->setVisible(false);
            }
            else if(New_Stabil_val==1)
            {
                qDebug()<<"New_val 1 ";
                /* ui->stackedWidget->setCurrentIndex(0);
                ui->frame_5->setVisible(true);*/
                CalibrateTimer->start(1000);
            }
        }
        else
        {
            if(New_Stabil_val==0)
                stableval += 1;// Increment by 1.00 per second
            else if(New_Stabil_val==1)
                stableval += 1; // Increment by 0.56 per second
            qDebug()<<"Stableval : "<<stableval;
            ui->label_356->setText(QString::number(stableval,'f',0)+"%");
            ui->progressBar->setValue(static_cast<int>(stableval));
            ui->progressBar->repaint(); // Force progress bar update
        }
    });
    Progressrun->start(1000); // Update every second
}

void MainWindow::btn()
{
    ui->label_5->setVisible(false);
    ui->label_6->setVisible(false);
    ui->label_10->setVisible(false);
    ui->label_11->setVisible(false);
    ui->label_245->setVisible(false);
    ui->label_269->setVisible(false);
    ui->stackedWidget->setCurrentIndex(23);
    QThread::msleep(10);
    CalibrateTimer->stop();
    FunctionrunTimer->start(1000);
}

void MainWindow::shows()
{
    stopMotor();
    ui->progressBar->setVisible(false);
    for(int i=1;i<=1;i++)
    {
        Gain700nm();
        if(ui->label_114->text()==" ")
        {
        }
    }
    FunctionrunTimer->stop();
}

void MainWindow::func()
{
    b_Stop=true;
}

void MainWindow::ShowTime()
{
    QDate date=QDate::currentDate();
    QString datetext= date.toString("yyyy / MM / dd");
    ui->SysDate_Lbl->setText(datetext);

    QTime time = QTime::currentTime();
    QString time_text = time.toString("hh : mm : ss");
    ui->SysTime_Lbl->setText(time_text);
}

MainWindow::~MainWindow()
{
    delete sock; // Clean up the dynamically allocated object
    delete ui;
}

void MainWindow::on_pushButton_202_clicked()
{
    CalibrateTimer->start(1000);
}

void MainWindow::Gain340nm()
{
    ui->stackedWidget_11->setVisible(true);
    on_pushButton_8_clicked();
    Auto_cal_sno=1;
    Autocal_Gainval=w340;
    Autocal_Intern_First=FrstInternval;
    Autocal_Intern_Second=SecInternval;
    Autocal_String="340nm";
    // Start_Loop_Calibrate->start(1000);
}

void MainWindow::Gain405nm()
{
    digitalWrite (LED_BASE + 14,LOW) ;
    Auto_cal_sno=2;
    Autocal_Gainval=w405;
    Autocal_Intern_First=ThreeInternval;
    Autocal_Intern_Second=FourInternval;
    Autocal_String="405nm";
}

void MainWindow::Gain505nm()
{
    digitalWrite (LED_BASE + 13,LOW) ;
    Auto_cal_sno=3;
    Autocal_Gainval=w505;
    Autocal_Intern_First=FiveInternval;
    Autocal_Intern_Second=SixInternval;
    Autocal_String="505nm";
}

void MainWindow::Gain545nm()
{
    digitalWrite (LED_BASE + 12,LOW) ;
    Auto_cal_sno=4;
    Autocal_Gainval=w545;
    Autocal_Intern_First=SevenInternval;
    Autocal_Intern_Second=EightInternval;
    Autocal_String="545nm";
}

void MainWindow::Gain570nm()
{
    digitalWrite (LED_BASE + 11,LOW) ;
    Auto_cal_sno=5;
    Autocal_Gainval=w570;
    Autocal_Intern_First=NineInternval;
    Autocal_Intern_Second=TenInternval;
    Autocal_String="570nm";
}

void MainWindow::Gain630nm()
{
    digitalWrite (LED_BASE + 10,LOW) ;
    Auto_cal_sno=6;
    Autocal_Gainval=w630;
    Autocal_Intern_First=EleInternval;
    Autocal_Intern_Second=TweInternval;
    Autocal_String="630nm";
}

void MainWindow::Gain700nm()
{
    digitalWrite (LED_BASE + 9,LOW) ;
    Auto_cal_sno=7;
    Autocal_Gainval=w700;
    Autocal_Intern_First=ThirInternval;
    Autocal_Intern_Second=ForInternval;
    Autocal_String="700nm";
    Start_Loop_Calibrate->start(1000);

}

void MainWindow::Circle_Progress_Update()
{
    qDebug()<<"Loop_data : "<<Loop_data;
    if(Loop_data>100)
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setText("Need to check hardware, contact service team or please Re-Calibrate.");
        QPushButton* saveButton = msg.addButton("Re-Calibrate", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        QPushButton* dontSaveButton = msg.addButton("Cancel", QMessageBox::DestructiveRole);
        dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #ff5957, stop: 0.5 #ff5957, stop: 1 #ff5957);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(184, 0, 0), stop: 0.5 rgb(184, 0, 0), stop: 1 rgb(184, 0, 0)); color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->progressBar_2->setValue(0);
            Loop_data=0;
            QString intern="500";
            QSqlQuery query;
            query.prepare("update tests set intensity ='"+intern+"' where sno="+QString::number(Auto_cal_sno)+"");
            if(query.exec())
            {
                msg.close();
                if(Auto_cal_sno==1)
                    QTimer::singleShot(200, this, &MainWindow::on_pushButton_8_clicked);
                else if(Auto_cal_sno==2)
                    QTimer::singleShot(200, this, &MainWindow::on_pushButton_9_clicked);
                else if(Auto_cal_sno==3)
                    QTimer::singleShot(200, this, &MainWindow::on_pushButton_24_clicked);
                else if(Auto_cal_sno==4)
                    QTimer::singleShot(200, this, &MainWindow::on_pushButton_26_clicked);
                else if(Auto_cal_sno==5)
                    QTimer::singleShot(200, this, &MainWindow::on_pushButton_128_clicked);
                else if(Auto_cal_sno==6)
                    QTimer::singleShot(200, this, &MainWindow::on_pushButton_129_clicked);
                else if(Auto_cal_sno==7)
                    QTimer::singleShot(200, this, &MainWindow::on_pushButton_130_clicked);
            }
            Circle_Progress_Update();
        }
        else if(msg.clickedButton() == dontSaveButton)
        {
            if(Test_Type=="Biochemistry")
                on_pushButton_6_clicked();
            else if(Test_Type=="Turbidity")
                Listout_Turbidity_Parameter();

            Start_Loop_Calibrate->stop();
            ui->stackedWidget_11->setVisible(false);
            ui->frame_9->setDisabled(false);
            ui->pushButton_6->setDisabled(false);
            ui->pushButton_139->setDisabled(false);
            ui->Home_Btn_2->setDisabled(false);
            if(Auto_cal_sno==1)
                Increament_data340=0;
            else if(Auto_cal_sno==2)
                Increament_data405=0;
            else if(Auto_cal_sno==3)
                Increament_data505=0;
            else if(Auto_cal_sno==4)
                Increament_data545=0;
            else if(Auto_cal_sno==5)
                Increament_data570=0;
            else if(Auto_cal_sno==6)
                Increament_data630=0;
            else if(Auto_cal_sno==7)
                Increament_data700=0;
            ui->stackedWidget->setCurrentIndex(1);
        }
        else
        {
            Start_Loop_Calibrate->stop();
            ui->stackedWidget->setCurrentIndex(1);
        }
    }
    else
    {
        if(Test_Type=="Biochemistry")
        {
            // Create a pixmap and draw custom content
            QPixmap pixmap(QSize(ui->label_59->size()));
            pixmap.fill(Qt::transparent); // Transparent background
            QPainter painter(&pixmap);
            painter.setRenderHint(QPainter::Antialiasing);

            // Determine dimensions
            int size = qMin(pixmap.width(), pixmap.height());
            QRectF rect((pixmap.width() - size) / 2, (pixmap.height() - size) / 2, size, size);


            qDebug()<<"Rect : "<<rect;
            // Draw outer circle
            QRectF OuterRect = rect.adjusted(10, 10, -10, -10); // Inner padding
            painter.setBrush(Qt::black);
            painter.setPen(Qt::NoPen);
            painter.drawEllipse(OuterRect);

            // Draw inner circle
            QRectF innerRect = OuterRect.adjusted(5, 5, -5, -5);
            painter.setBrush(QColor(255, 255, 255)); // White color for the inner circle
            painter.drawEllipse(innerRect);

            // Draw progress arc
            QRectF progressRect = OuterRect.adjusted(2, 2, -2, -2); // Adjusted to account for pen width
            painter.setBrush(Qt::NoBrush);

            QColor color;
            if(Autocal_String=="340nm")
                color = QColor(75, 188, 241);
            else if(Autocal_String=="405nm")
                color = QColor(190,37,221);
            else if(Autocal_String=="505nm")
                color = QColor(62,193,123);
            else if(Autocal_String=="545nm")
                color = QColor(65,255,12);
            else if(Autocal_String=="570nm")
                color = QColor(251,255,21);
            else if(Autocal_String=="630nm")
                color = QColor(255,52,52);
            else if(Autocal_String=="700nm")
                color = QColor(255,0,4);

            // Adjust pen for arc
            int penWidth = 8; // Thickness of the arc
            painter.setPen(QPen(color, penWidth, Qt::SolidLine, Qt::RoundCap));
            int spanAngle = static_cast<int>(360.0 * Loop_data / 100.0 * 16);
            painter.drawArc(progressRect, 90 * 16, -spanAngle);

            // Draw percentage text
            painter.setPen(Qt::black);
            painter.setFont(QFont("Arial", size / 6, QFont::Bold));
            painter.drawText(innerRect, Qt::AlignCenter, QString::number(Loop_data) + "%");
            // Set the pixmap on the label
            ui->label_59->setPixmap(pixmap);
        }
        else if(Test_Type=="Turbidity")
        {
            // Create a pixmap and draw custom content
            QPixmap pixmap(QSize(ui->label_133->size()));
            pixmap.fill(Qt::transparent); // Transparent background
            QPainter painter(&pixmap);
            painter.setRenderHint(QPainter::Antialiasing);

            // Determine dimensions
            int size = qMin(pixmap.width(), pixmap.height());
            QRectF rect((pixmap.width() - size) / 2, (pixmap.height() - size) / 2, size, size);


            qDebug()<<"Rect : "<<rect;
            // Draw outer circle
            QRectF OuterRect = rect.adjusted(10, 10, -10, -10); // Inner padding
            painter.setBrush(Qt::black);
            painter.setPen(Qt::NoPen);
            painter.drawEllipse(OuterRect);

            // Draw inner circle
            QRectF innerRect = OuterRect.adjusted(5, 5, -5, -5);
            painter.setBrush(QColor(255, 255, 255)); // White color for the inner circle
            painter.drawEllipse(innerRect);

            // Draw progress arc
            QRectF progressRect = OuterRect.adjusted(2, 2, -2, -2); // Adjusted to account for pen width
            painter.setBrush(Qt::NoBrush);

            QColor color;

            if(Autocal_String=="700nm")
                color = QColor(255,0,4);

            // Adjust pen for arc
            int penWidth = 8; // Thickness of the arc
            painter.setPen(QPen(color, penWidth, Qt::SolidLine, Qt::RoundCap));
            int spanAngle = static_cast<int>(360.0 * Loop_data / 100.0 * 16);
            painter.drawArc(progressRect, 90 * 16, -spanAngle);

            // Draw percentage text
            painter.setPen(Qt::black);
            painter.setFont(QFont("Arial", size / 6, QFont::Bold));
            painter.drawText(innerRect, Qt::AlignCenter, QString::number(Loop_data) + "%");
            // Set the pixmap on the label
            ui->label_133->setPixmap(pixmap);
        }
    }
}

void MainWindow::Start_loop_Auto_Calibrate()
{
    int intensity=0;
    load_minval=0;
    QString Data1="950";
    QString Data2="100";
    Loop_data++;
    qDebug()<<"Loop_data : "<<Loop_data;
    ui->progressBar_2->setValue(Loop_data); // Set progress bar value

    QSqlQuery query;
    query.prepare("select intensity from tests where sno="+QString::number(Auto_cal_sno)+"");
    query.exec();
    while(query.next())
        intensity=query.value(0).toInt();

    QString intern = QString::number(intensity);
    if(Auto_cal_sno==1)
        Autocal_Gainval=w340;
    else if(Auto_cal_sno==2)
        Autocal_Gainval=w405;
    else if(Auto_cal_sno==3)
        Autocal_Gainval=w505;
    else if(Auto_cal_sno==4)
        Autocal_Gainval=w545;
    else if(Auto_cal_sno==5)
        Autocal_Gainval=w570;
    else if(Auto_cal_sno==6)
        Autocal_Gainval=w630;
    else if(Auto_cal_sno==7)
        Autocal_Gainval=w700;
    qDebug()<<"Data "+Autocal_String+" : "<<Autocal_Gainval<<"Sno : "<<Auto_cal_sno<<"Intensity : "<<intern;
    if(intern<=Data2 && intern>=Data1)
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setText("Please check if there is any blocking at "+Autocal_String+".");
        QPushButton* saveButton = msg.addButton("Re-Calibrate", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        QPushButton* dontSaveButton = msg.addButton("Cancel", QMessageBox::DestructiveRole);
        dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #ff5957, stop: 0.5 #ff5957, stop: 1 #ff5957);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(184, 0, 0), stop: 0.5 rgb(184, 0, 0), stop: 1 rgb(184, 0, 0)); color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->progressBar_2->setValue(0);
            Loop_data=0;
            intern="500";
            query.prepare("update tests set intensity ='"+intern+"' where sno="+QString::number(Auto_cal_sno)+"");
            if(query.exec())
            {
                msg.close();
                if(Auto_cal_sno==1)
                    QTimer::singleShot(200, this, &MainWindow::on_pushButton_8_clicked);
                else if(Auto_cal_sno==2)
                    QTimer::singleShot(200, this, &MainWindow::on_pushButton_9_clicked);
                else if(Auto_cal_sno==3)
                    QTimer::singleShot(200, this, &MainWindow::on_pushButton_24_clicked);
                else if(Auto_cal_sno==4)
                    QTimer::singleShot(200, this, &MainWindow::on_pushButton_26_clicked);
                else if(Auto_cal_sno==5)
                    QTimer::singleShot(200, this, &MainWindow::on_pushButton_128_clicked);
                else if(Auto_cal_sno==6)
                    QTimer::singleShot(200, this, &MainWindow::on_pushButton_129_clicked);
                else if(Auto_cal_sno==7)
                    QTimer::singleShot(200, this, &MainWindow::on_pushButton_130_clicked);
            }
        }
        else if(msg.clickedButton() == dontSaveButton)
        {
            Start_Loop_Calibrate->stop();
            ui->stackedWidget->setCurrentIndex(1);
            if(Auto_cal_sno==1)
                Increament_data340=0;
            else if(Auto_cal_sno==2)
                Increament_data405=0;
            else if(Auto_cal_sno==3)
                Increament_data505=0;
            else if(Auto_cal_sno==4)
                Increament_data545=0;
            else if(Auto_cal_sno==5)
                Increament_data570=0;
            else if(Auto_cal_sno==6)
                Increament_data630=0;
            else if(Auto_cal_sno==7)
                Increament_data700=0;
        }
        else
        {
            Start_Loop_Calibrate->stop();
            ui->stackedWidget->setCurrentIndex(1);
        }
    }
    else if(Autocal_Gainval<=Autocal_Intern_Second && Autocal_Gainval>=Autocal_Intern_First )
    {
        Loop_data=100;
        if(Auto_cal_sno==1)
            Increament_data340=1;
        else if(Auto_cal_sno==2)
            Increament_data405=1;
        else if(Auto_cal_sno==3)
            Increament_data505=1;
        else if(Auto_cal_sno==4)
            Increament_data545=1;
        else if(Auto_cal_sno==5)
            Increament_data570=1;
        else if(Auto_cal_sno==6)
            Increament_data630=1;
        else if(Auto_cal_sno==7)
            Increament_data700=1;
        ui->progressBar_2->setValue(100); // Set progress bar value
        Circle_Progress_Update();
        FinalResetGainval();
        Start_Loop_Calibrate->stop();
        handleWave(nanometer);
    }
    else if(Autocal_Gainval>=Autocal_Intern_Second) // SecInterval=3500
    {
        QSqlQuery query;
        query.prepare("select intensity from tests where sno="+QString::number(Auto_cal_sno)+"");
        query.exec();
        while(query.next())
            intensity=query.value(0).toInt();

        if(intensity>=1000)
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);

            msg.setText("The Intensity value is high.\nPlease check if there is any blocking at "+Autocal_String+".");
            QPushButton* saveButton = msg.addButton("Re-Calibrate", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            QPushButton* dontSaveButton = msg.addButton("Cancel", QMessageBox::DestructiveRole);
            dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #ff5957, stop: 0.5 #ff5957, stop: 1 #ff5957);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(184, 0, 0), stop: 0.5 rgb(184, 0, 0), stop: 1 rgb(184, 0, 0)); color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {
                ui->progressBar_2->setValue(0);
                Loop_data=0;
                intern="500";
                query.prepare("update tests set intensity ='"+intern+"' where sno="+QString::number(Auto_cal_sno)+"");
                if(query.exec())
                {
                    msg.close();
                    if(Auto_cal_sno==1)
                        QTimer::singleShot(200, this, &MainWindow::on_pushButton_8_clicked);
                    else if(Auto_cal_sno==2)
                        QTimer::singleShot(200, this, &MainWindow::on_pushButton_9_clicked);
                    else if(Auto_cal_sno==3)
                        QTimer::singleShot(200, this, &MainWindow::on_pushButton_24_clicked);
                    else if(Auto_cal_sno==4)
                        QTimer::singleShot(200, this, &MainWindow::on_pushButton_26_clicked);
                    else if(Auto_cal_sno==5)
                        QTimer::singleShot(200, this, &MainWindow::on_pushButton_128_clicked);
                    else if(Auto_cal_sno==6)
                        QTimer::singleShot(200, this, &MainWindow::on_pushButton_129_clicked);
                    else if(Auto_cal_sno==7)
                        QTimer::singleShot(200, this, &MainWindow::on_pushButton_130_clicked);
                }
            }
            else if(msg.clickedButton() == dontSaveButton)
            {
                Start_Loop_Calibrate->stop();
                ui->stackedWidget_11->setVisible(false);
                ui->frame_9->setDisabled(false);
                ui->pushButton_6->setDisabled(false);
                ui->pushButton_139->setDisabled(false);
                ui->Home_Btn_2->setDisabled(false);
                ui->stackedWidget->setCurrentIndex(1);
                if(Auto_cal_sno==1)
                    Increament_data340=0;
                else if(Auto_cal_sno==2)
                    Increament_data405=0;
                else if(Auto_cal_sno==3)
                    Increament_data505=0;
                else if(Auto_cal_sno==4)
                    Increament_data545=0;
                else if(Auto_cal_sno==5)
                    Increament_data570=0;
                else if(Auto_cal_sno==6)
                    Increament_data630=0;
                else if(Auto_cal_sno==7)
                    Increament_data700=0;
            }
            else
            {
                Start_Loop_Calibrate->stop();
                ui->stackedWidget->setCurrentIndex(1);
            }
        }
        else
        {
            QString intern = QString::number(intensity+10);
            query.prepare("update tests set intensity ='"+intern+"' where sno="+QString::number(Auto_cal_sno)+"");
            query.exec();
            if(Auto_cal_sno==1)
                on_pushButton_8_clicked();
            else if(Auto_cal_sno==2)
                on_pushButton_9_clicked();
            else if(Auto_cal_sno==3)
                on_pushButton_24_clicked();
            else if(Auto_cal_sno==4)
                on_pushButton_26_clicked();
            else if(Auto_cal_sno==5)
                on_pushButton_128_clicked();
            else if(Auto_cal_sno==6)
                on_pushButton_129_clicked();
            else if(Auto_cal_sno==7)
                on_pushButton_130_clicked();
        }
    }
    else if (Autocal_Gainval<=Autocal_Intern_First) //FrstInterval=3400
    {
        QSqlQuery query;
        query.prepare("select intensity from tests where sno="+QString::number(Auto_cal_sno)+"");
        query.exec();
        while(query.next())
            intensity=query.value(0).toInt();

        if(intensity<=100)
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);

            msg.setText("The Intensity value is low.\nPlease check if there is any blocking at "+Autocal_String+".");
            QPushButton* saveButton = msg.addButton("Re-Calibrate", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            QPushButton* dontSaveButton = msg.addButton("Cancel", QMessageBox::DestructiveRole);
            dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #ff5957, stop: 0.5 #ff5957, stop: 1 #ff5957);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(184, 0, 0), stop: 0.5 rgb(184, 0, 0), stop: 1 rgb(184, 0, 0)); color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {
                ui->progressBar_2->setValue(0);
                Loop_data=0;
                intern="500";
                query.prepare("update tests set intensity ='"+intern+"' where sno="+QString::number(Auto_cal_sno)+"");
                if(query.exec())
                {
                    msg.close();
                    if(Auto_cal_sno==1)
                        QTimer::singleShot(200, this, &MainWindow::on_pushButton_8_clicked);
                    else if(Auto_cal_sno==2)
                        QTimer::singleShot(200, this, &MainWindow::on_pushButton_9_clicked);
                    else if(Auto_cal_sno==3)
                        QTimer::singleShot(200, this, &MainWindow::on_pushButton_24_clicked);
                    else if(Auto_cal_sno==4)
                        QTimer::singleShot(200, this, &MainWindow::on_pushButton_26_clicked);
                    else if(Auto_cal_sno==5)
                        QTimer::singleShot(200, this, &MainWindow::on_pushButton_128_clicked);
                    else if(Auto_cal_sno==6)
                        QTimer::singleShot(200, this, &MainWindow::on_pushButton_129_clicked);
                    else if(Auto_cal_sno==7)
                        QTimer::singleShot(200, this, &MainWindow::on_pushButton_130_clicked);
                }
            }
            else if(msg.clickedButton() == dontSaveButton)
            {
                Start_Loop_Calibrate->stop();
                ui->stackedWidget_11->setVisible(false);

                ui->stackedWidget->setCurrentIndex(1);
                ui->frame_9->setDisabled(false);
                ui->pushButton_6->setDisabled(false);
                ui->pushButton_139->setDisabled(false);
                ui->Home_Btn_2->setDisabled(false);
                if(Auto_cal_sno==1)
                    Increament_data340=0;
                else if(Auto_cal_sno==2)
                    Increament_data405=0;
                else if(Auto_cal_sno==3)
                    Increament_data505=0;
                else if(Auto_cal_sno==4)
                    Increament_data545=0;
                else if(Auto_cal_sno==5)
                    Increament_data570=0;
                else if(Auto_cal_sno==6)
                    Increament_data630=0;
                else if(Auto_cal_sno==7)
                    Increament_data700=0;
            }
            else
            {
                Start_Loop_Calibrate->stop();
                ui->stackedWidget->setCurrentIndex(1);
            }
        }
        else
        {
            QString intern = QString::number(intensity-10);
            query.prepare("update tests set intensity ='"+intern+"' where sno="+QString::number(Auto_cal_sno)+"");
            query.exec();
            if(Auto_cal_sno==1)
                on_pushButton_8_clicked();
            else if(Auto_cal_sno==2)
                on_pushButton_9_clicked();
            else if(Auto_cal_sno==3)
                on_pushButton_24_clicked();
            else if(Auto_cal_sno==4)
                on_pushButton_26_clicked();
            else if(Auto_cal_sno==5)
                on_pushButton_128_clicked();
            else if(Auto_cal_sno==6)
                on_pushButton_129_clicked();
            else if(Auto_cal_sno==7)
                on_pushButton_130_clicked();
        }

    }
    else
    {
    }
    Circle_Progress_Update();
}

void MainWindow::ResetGainval()
{
    QSqlQuery query;
    QString ONE , TWO , THREE, FOUR, FIVE , SIX , SEVEN ;
    ONE =char (one);
    TWO =char(two);
    THREE=char(three);
    FOUR=char(four);
    FIVE =char(five);
    SIX =char(six);
    SEVEN =char(seven);
    ui->label_114->setText("");
    ui->label_115->setText("");
    ui->label_117->setText("");
    ui->label_118->setText("");
    ui->label_124->setText("");
    ui->label_126->setText("");
    ui->label_183->setText("");
    ONE = ui->label_114->text();
    TWO = ui->label_115->text();
    THREE = ui->label_117->text();
    FOUR = ui->label_118->text();
    FIVE = ui->label_124->text();
    SIX = ui->label_126->text();
    SEVEN = ui->label_183->text();

    query.prepare("update tests set blankval='"+ONE+"' where sno=1");
    if(query.exec())
        query.prepare("update tests set blankval='"+TWO+"' where sno=2");
    if(query.exec())
        query.prepare("update tests set blankval='"+THREE+"' where sno=3");
    if(query.exec())
        query.prepare("update tests set blankval='"+FOUR+"' where sno=4");
    if(query.exec())
        query.prepare("update tests set blankval='"+FIVE+"' where sno=5");
    if(query.exec())
        query.prepare("update tests set blankval='"+SIX+"' where sno=6");
    if(query.exec())
        query.prepare("update tests set blankval='"+SEVEN+"' where sno=7");
    if(query.exec())
    {
        qDebug()<<"Reset Done : ";
    }
    else
    {

    }
}

int MainWindow::FinalResetGainval()
{

    QSqlQuery query;
    QString blank="";// , TWO , THREE, FOUR, FIVE , SIX , SEVEN ;

    if(Auto_cal_sno==1)
    {
        query.prepare("update tests set blankval='"+blank+"' where sno=1");
        ui->label_114->clear();
    }
    else if(Auto_cal_sno==2)
    {
        query.prepare("update tests set blankval='"+blank+"' where sno=2");
        ui->label_115->clear();
    }
    else if(Auto_cal_sno==3)
    {
        query.prepare("update tests set blankval='"+blank+"' where sno=3");
        ui->label_117->clear();
    }
    else if(Auto_cal_sno==4)
    {
        query.prepare("update tests set blankval='"+blank+"' where sno=4");
        ui->label_118->clear();
    }
    else if(Auto_cal_sno==5)
    {
        query.prepare("update tests set blankval='"+blank+"' where sno=5");
        ui->label_124->clear();
    }
    else if(Auto_cal_sno==6)
    {
        query.prepare("update tests set blankval='"+blank+"' where sno=6");
        ui->label_126->clear();
    }
    /* else if(Auto_cal_sno==7)
    {
       // query.prepare("update tests set blankval='"+blank+"' where sno=7");
       // ui->label_183->clear();
    }*/
    query.exec();

    qDebug()<<"Final Reset val "<<blank<<" Sno : "<<Auto_cal_sno;
    Calibrate_Done=1;
    if(Test_Type=="Biochemistry")
    {
        qDebug()<<"BRY";

        Wave_LED_OFF();
    }
    else if(Test_Type=="Turbidity")
    {
        qDebug()<<"Final 700nm value : "<<w700;
        int val=0;
        QSqlQuery qy;
        qy.prepare("select intensity,blankval from tests where sno=7");
        qy.exec();
        while(qy.next())
        {
            val=qy.value(0).toInt();
            Init_Read=qy.value(1).toInt();

        }
        pwmWrite (LED, val);
        digitalWrite (LED_BASE + 6,HIGH) ;
        Turbidity_CSS();
        qDebug()<<"TRY";
        ui->stackedWidget->setCurrentIndex(0) ;
        ui->frame_5->setVisible(true);
    }
    return 0;
}

void MainWindow::on_Home_Btn_2_clicked()
{
    Wave_LED_OFF();
    if(testback==1)
    {
        ui->stackedWidget->setCurrentIndex(0);
        testback=0;
    }
    else if(editback==1)
    {
        ui->stackedWidget->setCurrentIndex(3);
        editback=0;
    }
    else if(deleteback==1)
    {
        ui->stackedWidget->setCurrentIndex(3);
        deleteback=0;
    }
    else if(qcback==1)
    {
        ui->stackedWidget->setCurrentIndex(0);
        qcback=0;
    }
    else if(filterback==1)
    {
        ui->stackedWidget->setCurrentIndex(9);
        filterback=0;
    }
    else if(exptopn==1)
    {
        ui->stackedWidget->setCurrentIndex(29);
        ui->stackedWidget_8->setCurrentIndex(5);
        exptopn=0;
    }
    else
        ui->stackedWidget->setCurrentIndex(0);

    ui->stackedWidget_11->setVisible(false);
}

void MainWindow::on_Menu_Btn_2_clicked()
{
    if (ui->frame->isVisible())
    {
        ui->frame->setVisible(false);
        ui->Main_Menu->setVisible(false);
        ui->Main_Menu_2->setVisible(false);
    }
    else
    {
        if(Test_Type=="Biochemistry")
        {
            ui->Main_Menu->setVisible(false);
            ui->label_581->setVisible(false);
            ui->Main_Menu_2->setVisible(true);
            ui->label_582->setVisible(true);
            ui->label_583->setText("Mode : \nBiochemistry");
        }
        else if(Test_Type=="Turbidity")
        {
            ui->Main_Menu->setVisible(true);
            ui->label_581->setVisible(true);
            ui->Main_Menu_2->setVisible(false);
            ui->label_582->setVisible(false);
            ui->label_583->setText("Mode : \nTurbidity");
        }
        ui->frame->setVisible(true);
    }
}

void MainWindow::on_Home_Btn_3_clicked()
{
    Wave_LED_OFF();
    ui->stackedWidget->setCurrentIndex(1);
    ui->stackedWidget_11->setVisible(false);
}

void MainWindow::on_Home_Btn_5_clicked()
{
    ui->stackedWidget->setCurrentIndex(3);
}
void MainWindow::on_Home_Btn_4_clicked()
{
    ui->stackedWidget->setCurrentIndex(0);
}

void MainWindow::temp()
{
    Pi2c arduino(7); //Create a new object "arduino" using address "0x07"
    char receive[30]; //Create a buffer of char (single bytes) for the data
    //Receive from the Arduino and put the contents into the "receive" char array
    QThread::msleep(100);
    arduino.i2cRead(receive,30);
    QThread::msleep(100);
    QString str=receive;
    /*ui->ReadBlock_Lbl_2->setText(str.mid(0,4));
    ui->label_10->setText(str.mid(0,4));*/
    ui->ReadBlock_Lbl_2->setText(str.mid(5,9));
    ui->label_10->setText(str.mid(5,9));
    ui->IncuBlock_Lbl_2->setText(str.mid(5,9));
    ui->label_74->setText(str.mid(5,9));

}

void MainWindow::on_toolButton_12_clicked()
{
    ui->stackedWidget->setCurrentIndex(2);
    ui->Home_Btn_3->setVisible(true);
    ui->Home_Btn_3->setDisabled(false);
}

void MainWindow::on_toolButton_14_clicked()
{
    ui->stackedWidget->setCurrentIndex(0);
}

void MainWindow::on_Setting_Btn_clicked()
{
    ui->stackedWidget_11->setVisible(false);
    ui->stackedWidget_9->setVisible(true);
    ui->stackedWidget_9->setCurrentIndex(0);
    ui->pushButton_148->setVisible(true);
    ui->label_219->setText("USER");
    ui->label_219->setVisible(false);
    ui->label_73->setVisible(true);
    ui->pushButton_10->setVisible(false);
    ui->pushButton_258->setVisible(false);
    ui->pushButton_134->setVisible(false);
    on_pushButton_13_clicked();
    ui->pushButton_4->setVisible(false);
    ui->pushButton_5->setVisible(false);
    ui->toolButton->setVisible(false);
    ui->pushButton_7->setVisible(false);
    ui->pushButton_231->setVisible(false);
    ui->pushButton_228->setVisible(true);
    ui->pushButton_11->setVisible(false);
    ui->pushButton_131->setVisible(false);
    ui->label_210->setVisible(false);
    ui->pushButton_227->setVisible(false);
    ui->stackedWidget->setCurrentIndex(10);
    if(ui->label_211->text()=="Version : ")
    {

    }
    else if(ui->label_211->text()=="Status : ")
    {
        ui->label_211->setText("Version : ");
        QFile file("/home/pi/git/BCYWithTRY/README.md");
        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
            QTextStream in(&file);
            while (!in.atEnd()) {
                QString data = in.readLine();
                bool ok = false;
                double Version = data.toDouble(&ok);
                ui->label_340->setText("<font color='gray'>"+QString::number(Version)+"</font>");
                qDebug()<<Version;
            }

        }
    }
}

void MainWindow::on_Home_Btn_7_clicked()
{
    ui->stackedWidget->setCurrentIndex(1);
}

int MainWindow::readadc( int pin)
{
    unsigned char buff[] = {static_cast<char>(0x6 | ((pin & 0x7) >> 2)),
                            static_cast<char>((pin & 0x7) << 6),
                            static_cast<char>(0)};

    wiringPiSPIDataRW(SPI_CHAN, buff, 3);
    return ((buff[1] & 0xf) << 8) | buff[2];
}

void MainWindow::on_toolButton_15_clicked()
{
    ui->stackedWidget->setCurrentIndex(10);
}

void MainWindow::on_toolButton_clicked()
{
    ui->stackedWidget->setCurrentIndex(14);
    ui->stackedWidget_2->setCurrentIndex(0);
    ui->label_30->setText(" ");
    ui->label_30->setVisible(true);
    ui->radioButton_3->setVisible(true);
    ui->radioButton_4->setVisible(true);
    ui->radioButton_3->setChecked(false);
    ui->radioButton_4->setChecked(false);
    ui->radioButton_3->update(); // Force update
    ui->radioButton_4->update(); // Force update
    ui->toolButton_2->setVisible(false);
    ui->toolButton_11->setVisible(false);
    ui->toolButton_27->setVisible(false);
    ui->Lab_name->setVisible(false);
    ui->Lab_address->setVisible(false);
    ui->pushButton_121->setVisible(false);
    ui->pushButton_136->setVisible(false);
    ui->Patient_Info_Lbl_5->setVisible(false);
    ui->Patient_Info_Lbl_6->setVisible(false);
}

void MainWindow::on_toolButton_17_clicked()
{
    ui->pushButton_148->setVisible(false);
    ui->comboBox_10->clear();
    ui->stackedWidget->setCurrentIndex(10);
}

void MainWindow::on_pushButton_10_clicked()
{
    ui->stackedWidget->setCurrentIndex(20);
    ui->stackedWidget_4->setCurrentIndex(0);
    ui->Home_Btn_17->setVisible(false);
    ui->Home_Btn_12->setVisible(true);
}

void MainWindow::on_pushButton_7_clicked()
{
    ui->pushButton_129->setVisible(true);
    int intensity=0,ABS = 0 , ABSO = 0;
    QSqlQuery query;
    query.prepare("select intensity,ABS,ABSO from tests where sno = 1");
    query.exec();
    while(query.next())
    {
        intensity=query.value(0).toInt();
        ABS=query.value(1).toInt();
        ABSO=query.value(2).toInt();
    }
    QString ity1=QString::number(intensity);
    QString ABS1=QString::number(ABS);
    QString ABSO1=QString::number(ABSO);
    ui->lineEdit_72->setText(ity1);
    ui->lineEdit_83->setText(ABS1);
    ui->lineEdit_139->setText(ABSO1);
    query.prepare("select intensity,ABS,ABSO from tests where sno = 2");
    query.exec();
    while(query.next())
    {
        intensity=query.value(0).toInt();
        ABS=query.value(1).toInt();
        ABSO=query.value(2).toInt();
    }
    QString ity2=QString::number(intensity);
    QString ABS2=QString::number(ABS);
    QString ABSO2=QString::number(ABSO);
    ui->lineEdit_73->setText(ity2);
    ui->lineEdit_84->setText(ABS2);
    ui->lineEdit_137->setText(ABSO2);
    query.prepare("select intensity,ABS,ABSO from tests where sno = 3");
    query.exec();
    while(query.next())
    {
        intensity=query.value(0).toInt();
        ABS=query.value(1).toInt();
        ABSO=query.value(2).toInt();
    }
    QString ity3=QString::number(intensity);
    QString ABS3=QString::number(ABS);
    QString ABSO3=QString::number(ABSO);
    ui->lineEdit_74->setText(ity3);
    ui->lineEdit_80->setText(ABS3);
    ui->lineEdit_86->setText(ABSO3);
    query.prepare("select intensity,ABS,ABSO from tests where sno = 4");
    query.exec();
    while(query.next())
    {
        intensity=query.value(0).toInt();
        ABS=query.value(1).toInt();
        ABSO=query.value(2).toInt();
    }
    QString ity4=QString::number(intensity);
    QString ABS4=QString::number(ABS);
    QString ABSO4=QString::number(ABSO);
    ui->lineEdit_75->setText(ity4);
    ui->lineEdit_82->setText(ABS4);
    ui->lineEdit_87->setText(ABSO4);
    query.prepare("select intensity,ABS,ABSO from tests where sno = 5");
    query.exec();
    while(query.next())
    {
        intensity=query.value(0).toInt();
        ABS=query.value(1).toInt();
        ABSO=query.value(2).toInt();
    }
    QString ity5=QString::number(intensity);
    QString ABS5=QString::number(ABS);
    QString ABSO5=QString::number(ABSO);
    ui->lineEdit_76->setText(ity5);
    ui->lineEdit_79->setText(ABS5);
    ui->lineEdit_140->setText(ABSO5);
    query.prepare("select intensity,ABS,ABSO from tests where sno = 6");
    query.exec();
    while(query.next())
    {
        intensity=query.value(0).toInt();
        ABS=query.value(1).toInt();
        ABSO=query.value(2).toInt();
    }
    QString ity6=QString::number(intensity);
    QString ABS6=QString::number(ABS);
    QString ABSO6=QString::number(ABSO);
    ui->lineEdit_77->setText(ity6);
    ui->lineEdit_81->setText(ABS6);
    ui->lineEdit_136->setText(ABSO6);

    query.prepare("select intensity,ABS,ABSO from tests where sno = 7");
    query.exec();
    while(query.next())
    {
        intensity=query.value(0).toInt();
        ABS=query.value(1).toInt();
        ABSO=query.value(2).toInt();
    }
    QString ity7=QString::number(intensity);
    QString ABS7=QString::number(ABS);
    QString ABSO7=QString::number(ABSO);
    ui->lineEdit_78->setText(ity7);
    ui->lineEdit_85->setText(ABS7);
    ui->lineEdit_138->setText(ABSO7);
    ui->stackedWidget->setCurrentIndex(13);
}

void MainWindow::on_toolButton_18_clicked()
{
    ui->stackedWidget->setCurrentIndex(10);
}

void MainWindow::displayResult(QNetworkReply *reply)
{
    QByteArray buffer = reply->readAll();
    reply->deleteLater();
}

void MainWindow::on_Power_Btn_2_clicked()
{
    qApp->exit();
}

void MainWindow::on_toolButton_3_clicked()
{
    QSqlQuery query;
    QString mulfact;
    double fact = 0.0;
    mulfact = char (fact);
    mulfact = ui->lineEdit_147->text();
    query.prepare("update tests set mulfact='"+mulfact+"' where sno=1");
    if(query.exec())
    {
    }
    else
    {
    }
}
void MainWindow::on_pushButton_131_clicked()
{
    ui->stackedWidget->setCurrentIndex(15);
    QString mulfact;
    QSqlQuery query;
    query.prepare("select mulfact from tests where sno =1");
    query.exec();
    while(query.next())
        mulfact=query.value(0).toString();

    ui->lineEdit_147->setText(mulfact);
}

int MainWindow::reading1()
{
    int blank[300];
    filtwave[0]=0;
    pwmWrite (LED, read_intensity);
    digitalWrite (LED_BASE + read_wavenm,HIGH) ;
    QThread::msleep(100);
    for(int i=0;i<300;i++)
    {
        blank[i]=readadc(7-read_wave);
        QThread::msleep(1);
        if(i>=250)
            filtwave[0]+=blank[i];
    }
    QThread::msleep(100);
    filtwave[0]=filtwave[0]/50;
    if(filtwave[0]==0)
    {
        filtwave[0]=1;
    }
    digitalWrite (LED_BASE + read_wavenm,LOW) ;
    pwmWrite (LED, 0);
    read_status=1;
    current_read_point=current_read_point+10;
    current_end_read_point=current_end_read_point+1;
    if(Run_Data==1)
        qDebug()<<"Gain click";
    else
        update_func();
    return filtwave[0];
}


void MainWindow::Wave_LED()
{
    QString Wave;
    QSqlQuery query;
    query.prepare("select wave from test where name ='"+TestName+"'");
    query.exec();
    while(query.next())
        Wave = query.value(0).toString();

    if(Wave=="340 nm")
    {
        digitalWrite (LED_BASE + 9,HIGH) ;  //8 , 14
    }
    else if (Wave=="405 nm")
    {
        digitalWrite (LED_BASE + 10,HIGH) ;  //9 , 13
    }
    else if (Wave=="505 nm")
    {
        digitalWrite (LED_BASE + 11,HIGH) ;  //10 , 12
    }
    else if (Wave=="545 nm")
    {
        digitalWrite (LED_BASE + 12,HIGH) ; //11 , 11
    }
    else if (Wave=="570 nm")
    {
        digitalWrite (LED_BASE + 13,HIGH) ;  //12  ,10
    }
    else if (Wave=="630 nm")
    {
        digitalWrite (LED_BASE + 14,HIGH) ;  //13  ,9
    }
    else if (Wave=="700 nm")
    {
        digitalWrite (LED_BASE + 8,HIGH) ;  //14  ,8
    }


}

// //////////////////////////UPDATE FUNCTION()/////////////////////////////////////////////////

void MainWindow::update_func()
{
    QString Rctn;
    QSqlQuery query;
    query.prepare("select * from test where name='"+TestName+"'");
    query.exec();
    while(query.next())
        Rctn=query.value(3).toString();
    if(Multi_calibration==1)
    {
        if(Rctn=="End point")
        {
            ui->label_44->setText(QDateTime::fromTime_t(current_end_read_point).toUTC().toString("hh:mm:ss"));
            ui->label_12->setText(QDateTime::fromTime_t(current_end_read_point).toUTC().toString("hh:mm:ss"));
            qDebug()<<"End point"<<current_end_read_point;
        }
        else if(Rctn=="Fixed Kinetic")
        {
            ui->label_44->setText(QDateTime::fromTime_t(current_read_point).toUTC().toString("hh:mm:ss"));
            ui->label_12->setText(QDateTime::fromTime_t(current_read_point).toUTC().toString("hh:mm:ss"));
            qDebug()<<"Fixed Kinetic"<<current_read_point;
        }
        else if(Rctn=="Kinetic")
        {
            ui->label_44->setText(QDateTime::fromTime_t(current_read_point).toUTC().toString("hh:mm:ss"));
            ui->label_12->setText(QDateTime::fromTime_t(current_read_point).toUTC().toString("hh:mm:ss"));
            qDebug()<<"Kinetic"<<current_read_point;
        }
    }
    else if(Multi_calibration==2)
    {
        if(Rctn=="End point")
            ui->label_12->setText(QDateTime::fromTime_t(current_end_read_point).toUTC().toString("hh:mm:ss"));
        else if(Rctn=="Fixed Kinetic")
            ui->label_12->setText(QDateTime::fromTime_t(current_read_point).toUTC().toString("hh:mm:ss"));
        else if(Rctn=="Kinetic")
            ui->label_12->setText(QDateTime::fromTime_t(current_read_point).toUTC().toString("hh:mm:ss"));
    }
    // ui->label_12->setText(QDateTime::fromTime_t(current_read_point).toUTC().toString("hh:mm:ss"));
    qDebug()<<"Update_func";
    if(option==1)
    {
        qDebug()<<"Endpoint _Blank";

        double transmission=0;
        absorbance=0;
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        addPoint(current_end_read_point,absorbance);
        if(total_read_point==current_end_read_point)
        {
            ui->label_240->setText(QString::number(absorbance, 'f', 4));
            ui->label_175->setText(QString::number(absorbance, 'f', 4));
            readtimer->stop();
            endblankcalc();
        }
    }

    else if (option==2)
    {
        //Endpoint _Calibrate
        double transmission=0;
        absorbance=0;
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        addPoint(current_end_read_point,absorbance);
        if(total_read_point==current_end_read_point)
        {
            double od=absorbance;
            if(Multi_calibration==1)
            {
                ui->label_177->setText(QString::number(od, 'f', 4));
            }
            else if (Multi_calibration==2)
                ui->label_75->setText(QString::number(od, 'f', 4));


            readtimer->stop();
            endqcfinish=1;
            endsampfinish=1;
            endcalcalc();
        }
    }

    else if (option==3)
    {
        //Endpoint _Sample
        double transmission=0;
        absorbance=0;
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        addPoint(current_end_read_point,absorbance);
        if(total_read_point==current_end_read_point)
        {
            double od ,od1,od2,od5;
            od = absorbance;
            ui->label_208->setText(QString::number(od, 'f', 4));
            od5=ui->label_208->text().toDouble();
            od1=ui->label_240->text().toDouble();    //Blank OD
            od2 = od5-od1;                      // Samp OD - Blank OD
            ui->label_6->setText(QString::number(od2, 'f', 4));
            readtimer->stop();
            ProductCodeChoose();
            endsampcalc();
            ui->RunSample_Btn->setEnabled(true);

        }
    }

    else if (option==4)
    {
        //Twopoint _Blank

        double transmission=0;
        absorbance=0;
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        addPoint(current_end_read_point,absorbance);
        if(total_read_point==current_end_read_point)
        {
            ui->label_240->setText(QString::number(absorbance, 'f', 4));
            readtimer->stop();
            twoblankcalc();

        }
    }

    else if(option==5)
    {
        //Twopoint _Calibarate

        double transmission=0;
        absorbance=0;
        ui->label_32->setNum(current_read_point);
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        qDebug()<<"Cur_Read_Point : "<<current_read_point<<" "<<"Blank : "<<blank_val<<" "<<
                  "Filt val : "<<filtwave[0]<<" "<<"Transmission : "<<transmission<<" "<<"abs : "<<absorbance;

        addPoint(current_read_point,absorbance);
        if(current_read_point==dly)
        {
            if(Multi_calibration==1)
            {
                ui->label_170->setText(QString::number(absorbance, 'f', 4));
                ui->label_170->setVisible(true);
            }
            else if(Multi_calibration==2)
            {
                ui->label_120->setText(QString::number(absorbance, 'f', 4));
                ui->label_120->setVisible(true);
            }
        }
        else if(current_read_point==total_read_point)
        {
            if(Multi_calibration==1)
            {
                ui->label_169->setText(QString::number(absorbance, 'f', 4));
                ui->label_169->setVisible(true);
            }
            else if(Multi_calibration==2)
            {
                ui->label_122->setText(QString::number(absorbance, 'f', 4));
                ui->label_122->setVisible(true);
            }

            readtimer->stop();
            QPixmap pixmap;
            if(Multi_calibration==1)
                pixmap = ui->customPlot_4->grab();
            else if(Multi_calibration==2)
                pixmap = ui->customPlot->grab();
            pixmap.save("/home/pi/FKCPlot.png");
            twoqcfinish=1;
            FKCprintopt=1;
            data1=0;
            twosampfinish=1;
            twocalcalc();
            ui->RunCal_Btn_2->setEnabled(true);
        }
    }

    else if(option==6)
    {
        //Twopoint_Sample

        double transmission=0 ;
        absorbance=0;
        ui->label_32->setNum(current_read_point);
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        addPoint(current_read_point,absorbance);
        if(current_read_point==dly)
        {
            ui->label_120->setText(QString::number(absorbance, 'f', 4));
            ui->label_120->setVisible(true);
        }
        else if(current_read_point==total_read_point)
        {
            ui->label_122->setText(QString::number(absorbance, 'f', 4));
            ui->label_122->setVisible(true);
            readtimer->stop();
            QPixmap pixmap = ui->customPlot->grab();
            pixmap.save("/home/pi/FKSPlot.png");
            FKSprintopt=1;
            twosampcalc();
            ui->RunSample_Btn_2->setEnabled(true);
            ui->RunCal_Btn_2->setEnabled(true);
            ui->TP_QC_Check->setDisabled(false);

        }
    }

    else if(option==7)
    {
        //Kinetic _Blank

        QString TestName = ui->TestName_Lbl->text();
        QSqlQuery query;
        double transmission=0 ;
        absorbance=0;
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        addPoint(current_end_read_point,absorbance);
        if(total_read_point==current_end_read_point)
        {

            ui->label_240->setText(QString::number(absorbance, 'f', 4));
            readtimer->stop();
            kineticblankcalc();

        }
    }

    else if(option==8)
    {
        //Kinetic _Calibrate
        qDebug()<<"Kinetic _Calibrate opt-8";
        double transmission=0;
        absorbance=0;
        ui->label_32->setNum(current_read_point);
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        addPoint(current_read_point,absorbance);
        if(val==2)
        {
            ui->label_97->setVisible(true);
            ui->label_98->setVisible(true);
            ui->label_127->setVisible(true);
            ui->label_128->setVisible(true);
        }
        else if (val==3) {
            ui->label_97->setVisible(true);
            ui->label_98->setVisible(true);
            ui->label_127->setVisible(true);
            ui->label_128->setVisible(true);
            ui->label_99->setVisible(true);
            ui->label_132->setVisible(true);

        }
        qDebug()<<"Cal Total read point : "<<total_read_point<<"Current Read Point : "<<current_read_point<<"dely : "<<dly<<"Sec Read Point : "<<sec_read_point<<"Third point : "<<third_read_point<<"last point : "<<last_read_point;
        if(current_read_point==dly) //60
        {
            if(val==2)
            {
                if(Multi_calibration==1)
                {
                    ui->label_346->setText(QString::number((absorbance), 'f', 4));
                    ui->label_346->setVisible(true);
                    ui->label_166->setVisible(false);
                }
                else if(Multi_calibration==2)
                {
                    ui->label_194->setText(QString::number((absorbance), 'f', 4));
                    ui->label_194->setVisible(true);
                    ui->label_106->setVisible(false);
                }
            }
            else if (val==3)
            {
                if(Multi_calibration==1)
                {
                    ui->label_166->setText(QString::number((absorbance), 'f', 4));
                    ui->label_166->setVisible(true);
                    ui->label_346->setVisible(false);
                }
                else if(Multi_calibration==2)
                {
                    ui->label_106->setText(QString::number((absorbance), 'f', 4));
                    ui->label_106->setVisible(true);
                    ui->label_194->setVisible(false);
                }
            }

        }
        else if(current_read_point==sec_read_point) //120  //dly=60 , lagg 3,4
        {
            if(val==2)
            {
                if(Multi_calibration==1)
                {
                    ui->label_347->setText(QString::number((absorbance), 'f', 4));
                    ui->label_347->setVisible(true);
                    ui->label_167->setVisible(false);
                }
                else if(Multi_calibration==2)
                {
                    ui->label_195->setText(QString::number((absorbance), 'f', 4));
                    ui->label_195->setVisible(true);
                    ui->label_121->setVisible(false);
                }
                Kineticcalfirstpoint1();

            }
            else if (val==3)
            {
                if(Multi_calibration==1)
                {
                    ui->label_167->setText(QString::number((absorbance), 'f', 4));
                    ui->label_167->setVisible(true);
                    ui->label_347->setVisible(false);
                }
                else if(Multi_calibration==2)
                {
                    ui->label_121->setText(QString::number((absorbance), 'f', 4));
                    ui->label_121->setVisible(true);
                    ui->label_195->setVisible(false);
                }
                Kineticcalfirstpoint2();
            }
        }
        else if(current_read_point==third_read_point)
        {
            if(val==2)
            {
                if(Multi_calibration==1)
                {
                    ui->label_348->setText(QString::number((absorbance), 'f', 4));
                    ui->label_348->setVisible(true);
                    ui->label_168->setVisible(false);
                }
                else if(Multi_calibration==2)
                {
                    ui->label_198->setText(QString::number((absorbance), 'f', 4));
                    ui->label_198->setVisible(true);
                    ui->label_123->setVisible(false);
                }
                Kineticcalsecondpoint1();
                readtimer->stop();

                ui->RunSample_Btn_2->setEnabled(true);
                ui->RunCal_Btn_2->setEnabled(true);
                ui->TP_QC_Check->setEnabled(true);
                ui->Save_Btn_6->setEnabled(true);
                ui->Save_Btn_6->setVisible(true);
                ui->Stop_Btn_2->setDisabled(true);
            }
            else if (val==3)
            {
                if(Multi_calibration==1)
                {
                    ui->label_168->setText(QString::number((absorbance), 'f', 4));
                    ui->label_168->setVisible(true);
                    ui->label_348->setVisible(false);
                }
                else if(Multi_calibration==2)
                {
                    ui->label_123->setText(QString::number((absorbance), 'f', 4));
                    ui->label_123->setVisible(true);
                    ui->label_198->setVisible(false);
                }
                Kineticcalsecondpoint2();
            }
        }
        else if(current_read_point==last_read_point)
        {
            if(val==2)
            {
                if(Multi_calibration==1)
                {
                    ui->label_171->setText(QString::number((absorbance), 'f', 4));
                    ui->label_171->setVisible(true);
                }
                else if(Multi_calibration==2)
                {
                    ui->label_125->setText(QString::number((absorbance), 'f', 4));
                    ui->label_125->setVisible(true);
                }
                Kineticcalsecondpoint1();
                readtimer->stop();
                kineticqcfinish=1;
                kineticsampfinish=1;

            }
            else if(val==3)
            {
                if(Multi_calibration==1)
                {
                    ui->label_171->setText(QString::number((absorbance), 'f', 4));
                    ui->label_171->setVisible(true);
                }
                else if(Multi_calibration==2)
                {
                    ui->label_125->setText(QString::number((absorbance), 'f', 4));
                    ui->label_125->setVisible(true);
                }
                Kineticcalthirdpoint1();
                readtimer->stop();
                kineticqcfinish=1;
                kineticsampfinish=1;

            }
            ui->RunSample_Btn_2->setEnabled(true);
            ui->RunCal_Btn_2->setEnabled(true);
            ui->TP_QC_Check->setEnabled(true);
            ui->Stop_Btn_2->setDisabled(true);
            ui->Save_Btn_6->setEnabled(true);
            ui->Save_Btn_6->setVisible(false);
            KCprintopt=1;
        }
    }

    else if(option==9)
    {
        //Kinetic _sample

        ui->label_203->setVisible(true);
        ui->label_204->setVisible(true);
        ui->label_203->setText("ΔA/min");
        double transmission=0;
        absorbance=0;
        ui->label_32->setNum(current_read_point);
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        addPoint(current_read_point,absorbance);
        if(val==2)
        {
            ui->label_97->setVisible(true);
            ui->label_98->setVisible(true);
            ui->label_127->setVisible(true);
            ui->label_128->setVisible(true);
        }
        else if (val==3)
        {
            ui->label_97->setVisible(true);
            ui->label_98->setVisible(true);
            ui->label_127->setVisible(true);
            ui->label_128->setVisible(true);
            ui->label_99->setVisible(true);
            ui->label_132->setVisible(true);

        }
        qDebug()<<"Total read point : "<<total_read_point<<"Current Read Point : "<<current_read_point<<"dely : "<<dly<<"Sec Read Point : "<<sec_read_point<<"Third point : "<<third_read_point<<"last point : "<<last_read_point;

        if(current_read_point==dly)
        {
            if(val==2)
            {
                ui->label_194->setText(QString::number((absorbance), 'f', 4));
                ui->label_194->setVisible(true);
                ui->label_106->setVisible(false);
            }
            else if (val==3)
            {
                ui->label_106->setText(QString::number((absorbance), 'f', 4));
                ui->label_106->setVisible(true);
                ui->label_194->setVisible(false);
            }
        }

        else if(current_read_point==sec_read_point)
        {
            if(val==2)
            {
                ui->label_195->setText(QString::number((absorbance), 'f', 4));
                ui->label_195->setVisible(true);
                ui->label_121->setVisible(false);
                Kineticsampfirstpoint1();
            }
            else if (val==3)
            {
                ui->label_121->setText(QString::number((absorbance), 'f', 4));
                ui->label_121->setVisible(true);
                ui->label_195->setVisible(false);
                Kineticsampfirstpoint2();
            }
        }

        else if(current_read_point==third_read_point)
        {
            if(val==2)
            {
                ui->label_198->setText(QString::number((absorbance), 'f', 4));
                ui->label_198->setVisible(true);
                ui->label_123->setVisible(false);
                readtimer->stop();
                // kineticsampfinish=1;

                Kineticsampsecondpoint1();
                ui->RunSample_Btn_2->setEnabled(true);
                ui->RunCal_Btn_2->setEnabled(true);
                ui->TP_QC_Check->setEnabled(true);
                ui->Save_Btn_6->setEnabled(true);
                ui->Stop_Btn_2->setDisabled(true);
            }
            else if (val==3)
            {
                ui->label_123->setText(QString::number((absorbance), 'f', 4));
                ui->label_123->setVisible(true);
                ui->label_198->setVisible(false);
                Kineticsampsecondpoint2();
            }
        }

        else if(current_read_point==last_read_point)
        {
            if(val==2)
            {
                ui->label_125->setText(QString::number((absorbance), 'f', 4));
                ui->label_125->setVisible(true);
                readtimer->stop();
                QPixmap pixmap = ui->customPlot->grab();
                pixmap.save("/home/pi/KSPlot.png");
                Kineticsampthirdpoint1();
            }
            else if(val==3)
            {
                ui->label_125->setText(QString::number((absorbance), 'f', 4));
                ui->label_125->setVisible(true);
                readtimer->stop();
                QPixmap pixmap = ui->customPlot->grab();
                pixmap.save("/home/pi/KSPlot.png");
                Kineticsampthirdpoint1();
            }
            ui->RunSample_Btn_2->setEnabled(true);
            ui->RunCal_Btn_2->setEnabled(true);
            ui->TP_QC_Check->setEnabled(true);
            ui->Stop_Btn_2->setDisabled(true);
            KSprintopt=1;

        }
    }

    else if(option==10)
    {
        //Endpoint _ReCalibrate

        double transmission=0;
        absorbance=0;
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        addPoint(current_end_read_point,absorbance);
        qDebug()<<current_end_read_point;
        if(total_read_point==current_end_read_point)
        {
            double od=abs(absorbance);
            ui->label_75->setText(QString::number(od, 'f', 4));
            readtimer->stop();
            endRecalcalc();
        }
    }

    else if(option==11)
    {
        //Endpoint _ReSample

        double transmission=0;
        absorbance=0;
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        addPoint(current_end_read_point,absorbance);
        if(total_read_point==current_end_read_point)
        {
            double od ,od1,od2,od5;
            od = abs(absorbance);
            ui->label_208->setText(QString::number(od, 'f', 4));
            od5=ui->label_208->text().toDouble();
            od1=ui->label_240->text().toDouble();    //Blank OD
            od2 = od5-od1;                      // Samp OD - Blank OD
            ui->label_6->setText(QString::number(od2, 'f', 4));
            readtimer->stop();
            endResampcalc();
        }
    }


    else if(option==12)
    {
        //Endpoint _QC Sample

        double transmission=0;
        absorbance=0;
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        addPoint(current_end_read_point,absorbance);
        qDebug()<<"points"<<total_read_point<<current_end_read_point;
        if(total_read_point==current_end_read_point)
        {
            double od ,od1,od2,od5;
            od = abs(absorbance);
            ui->label_208->setText(QString::number(od, 'f', 4));
            od5=ui->label_208->text().toDouble();
            od1=ui->label_240->text().toDouble();    //Blank OD
            od2 = od5-od1;                      // Samp OD - Blank OD
            double od6=abs(od2);
            ui->label_228->setText(QString::number(od6, 'f', 4));
            readtimer->stop();
            endqc();
        }

    }

    else if(option==13)
    {
        //Twopoint QC
        qDebug()<<"Twopoint qc enter ";
        double transmission=0 ;
        absorbance=0;
        ui->label_32->setNum(current_read_point);
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        addPoint(current_read_point,absorbance);
        if(current_read_point==dly)
            ui->label_120->setText(QString::number(absorbance, 'f', 4));
        else if(current_read_point==total_read_point)
        {
            ui->label_122->setText(QString::number(absorbance, 'f', 4));
            readtimer->stop();
            QString cmbox= ui->comboBox_2->currentText();
            twoQCsampcalc();
            ui->RunSample_Btn_2->setEnabled(true);

        }
    }

    else if(option==14)
    {
        //Kinetic _QC sample
        double transmission=0;
        absorbance=0;
        ui->label_32->setNum(current_read_point);
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        addPoint(current_read_point,absorbance);
        if(val==2)
        {
            ui->label_97->setVisible(true);
            ui->label_98->setVisible(true);
            ui->label_127->setVisible(true);
            ui->label_128->setVisible(true);
        }
        else if (val==3) {
            ui->label_97->setVisible(true);
            ui->label_98->setVisible(true);
            ui->label_127->setVisible(true);
            ui->label_128->setVisible(true);
            ui->label_99->setVisible(true);
            ui->label_132->setVisible(true);

        }
        qDebug()<<"Total read point : "<<total_read_point<<"Current Read Point : "<<current_read_point<<"dely : "<<dly<<"Sec Read Point : "<<sec_read_point<<"Third point : "<<third_read_point<<"last point : "<<last_read_point;

        if(current_read_point==dly)
        {
            if(val==2)
            {
                ui->label_194->setText(QString::number((absorbance), 'f', 4));
                ui->label_194->setVisible(true);
                ui->label_106->setVisible(false);
            }
            else if (val==3)
            {
                ui->label_106->setText(QString::number((absorbance), 'f', 4));
                ui->label_106->setVisible(true);
                ui->label_194->setVisible(false);
            }
        }

        else if(current_read_point==sec_read_point)
        {
            if(val==2)
            {
                ui->label_195->setText(QString::number((absorbance), 'f', 4));
                ui->label_195->setVisible(true);
                ui->label_121->setVisible(false);
                KineticQCsampfirstpoint1();
            }
            else if (val==3)
            {
                ui->label_121->setText(QString::number((absorbance), 'f', 4));
                ui->label_121->setVisible(true);
                ui->label_195->setVisible(false);
                KineticQCsampfirstpoint2();
            }
        }

        else if(current_read_point==third_read_point)
        {
            if(val==2)
            {
                ui->label_198->setText(QString::number((absorbance), 'f', 4));
                ui->label_198->setVisible(true);
                ui->label_123->setVisible(false);
                readtimer->stop();
                KineticQCsampsecondpoint1();
                ui->RunSample_Btn_2->setEnabled(true);
                ui->RunCal_Btn_2->setEnabled(true);
                ui->TP_QC_Check->setEnabled(true);
                ui->Save_Btn_6->setEnabled(false);
                ui->Stop_Btn_2->setDisabled(true);
                ui->comboBox_2->setEnabled(true);
            }
            else if (val==3)
            {
                ui->label_123->setText(QString::number((absorbance), 'f', 4));
                ui->label_123->setVisible(true);
                ui->label_198->setVisible(false);
                KineticQCsampsecondpoint2();
            }
        }

        else if(current_read_point==last_read_point)
        {
            if(val==2)
            {
                ui->label_125->setText(QString::number((absorbance), 'f', 4));
                ui->label_125->setVisible(true);
                readtimer->stop();
                KineticQCsampthirdpoint1();
            }
            else if(val==3)
            {
                ui->label_125->setText(QString::number((absorbance), 'f', 4));
                ui->label_125->setVisible(true);
                readtimer->stop();
                KineticQCsampthirdpoint1();
            }
            ui->RunSample_Btn_2->setEnabled(true);
            ui->RunCal_Btn_2->setEnabled(true);
            ui->TP_QC_Check->setEnabled(true);
            ui->Stop_Btn_2->setDisabled(true);
            ui->comboBox_2->setEnabled(true);


        }
    }

    else if(option==15)
    {
        //Endpoint _reQC

        double transmission=0;
        absorbance=0;
        transmission=blank_val/filtwave[0];
        absorbance=log10(transmission);
        addPoint(current_end_read_point,absorbance);
        if(total_read_point==current_end_read_point)
        {
            double od ,od1,od2,od5;
            od = abs(absorbance);
            ui->label_208->setText(QString::number(od, 'f', 4));
            od5=ui->label_208->text().toDouble();
            od1=ui->label_240->text().toDouble();    //Blank OD
            od2 = od5-od1;                      // Samp OD - Blank OD
            double od6=abs(od2);
            ui->label_228->setText(QString::number(od6, 'f', 4));
            readtimer->stop();
            endreqc();
        }

    }
}
// //////////////////////////CALCULATION FUNCTION()/////////////////////////////////////////////////
void MainWindow::endreqc()
{
    //QC1 only Enabled...

    if(option==15)
    {
        double dod1,dod3,dod4,dod5 = 0.0,dod6,dod7;

        if(fct == 0.0)
        {
            dod1=ui->label_228->text().toDouble();// Sample OD
            QString s = QString::number(dod1);
            QByteArray ary;
            ary.append(s);
            QString Neg ="-";
            QByteArray ary1;
            ary1.append(Neg);
            if(ary[0]==ary1[0])
                ui->label_273->setText("0");
            else
            {
                dod3=dod1*fct;
                dod4 = abs(dod3);
                if(dod4<100)
                {
                    ui->label_273->setText(QString::number(dod4, 'f' , 2));
                }
                else if(dod4>100)
                {
                    ui->label_273->setText(QString::number(dod4, 'f' , 0));
                }
            }
        }
        else
        {
            dod5=ui->label_228->text().toDouble();
            QString s = QString::number(dod5);
            QByteArray ary;
            ary.append(s);
            QString Neg ="-";
            QByteArray ary1;
            ary1.append(Neg);
            if(ary[0]==ary1[0])
                ui->label_273->setText("0");
            else
            {
                dod6=(fct * dod5);
                dod7 = abs(dod6);
                if(dod7<100)
                {
                    ui->label_273->setText(QString::number(dod7, 'f' , 2));
                }
                else if(dod7>100)
                {
                    ui->label_273->setText(QString::number(dod7, 'f' , 0));
                }
            }
        }

        ui->E_QC_Check->setDisabled(false);


        float val = ui->label_273->text().toFloat();
        float min = ui->label_274->text().toFloat();
        float max = ui->label_275->text().toFloat();
        ui->label_256->setVisible(false);
        ui->label_254->setVisible(true);
        if(val<=max && val>=min)
        {
            ui->label_254->setText("QC - Within Range");
            ui->label_254->setStyleSheet("QLabel {color : green;}");
        }
        else
        {
            ui->label_254->setText("QC - Without Range");
            ui->label_254->setStyleSheet("QLabel {color : red;}");
        }
        QThread::msleep(1000);

        if(endpointsavebtn==1)
            ui->Save_Btn_5->setDisabled(true);
        else
        {    if(endruncal==1)
            {
                if(endqcfinish==1)
                    ui->Save_Btn_5->setDisabled(false);
                else
                    ui->Save_Btn_5->setDisabled(true);
            }
            else
                ui->Save_Btn_5->setDisabled(false);
        }

        ui->RunCal_Btn->setDisabled(false);
        ui->RunSample_Btn->setDisabled(false);
        ui->E_QC_Check->setDisabled(false);
        ui->RunBlank_Btn->setDisabled(false);
        ui->Save_Btn_5->setDisabled(true);
        ui->Retest->setDisabled(true);
        ui->Retest_3->setDisabled(true);
        ui->Retest_4->setDisabled(true);
        ui->Retest_5->setDisabled(false);
        ui->Stop_Btn->setDisabled(true);
        ui->comboBox->setDisabled(false);
        endreqc_Graph();
    }
}
void MainWindow::endqc()
{
    //QC1 only Enabled...
    qDebug()<<"Endqc entered";
    if(option==12)
    {
        double dod1,dod3,dod4,dod5 = 0.0,dod6,dod7;
        if(fct == 0.0)
        {
            dod1=ui->label_228->text().toDouble();// Sample OD
            QString s = QString::number(dod1);
            QByteArray ary;
            ary.append(s);
            QString Neg ="-";
            QByteArray ary1;
            ary1.append(Neg);
            if(ary[0]==ary1[0])
                ui->label_273->setText("0");
            else
            {
                dod3=dod1*fct;
                dod4 = abs(dod3);
                if(dod4<100)
                {
                    ui->label_273->setText(QString::number(dod4, 'f' , 2));
                }
                else if(dod4>100)
                {
                    ui->label_273->setText(QString::number(dod4, 'f' , 0));
                }
            }
        }
        else
        {
            dod5=ui->label_228->text().toDouble();
            QString s = QString::number(dod5);
            QByteArray ary;
            ary.append(s);
            QString Neg ="-";
            QByteArray ary1;
            ary1.append(Neg);
            if(ary[0]==ary1[0])
                ui->label_273->setText("0");
            else
            {
                dod6=(fct * dod5);
                dod7 = abs(dod6);
                if(dod7<100)
                {
                    ui->label_273->setText(QString::number(dod7, 'f' , 2));
                }
                else if(dod7>100)
                {
                    ui->label_273->setText(QString::number(dod7, 'f' , 0));
                }
            }
        }

        ui->E_QC_Check->setDisabled(false);
        ui->RunBlank_Btn->setDisabled(false);
        if(endpointsavebtn==1)
            ui->Save_Btn_5->setDisabled(true);
        else
        {    if(endruncal==1)
            {
                if(endqcfinish==1)
                    ui->Save_Btn_5->setDisabled(false);
                else
                    ui->Save_Btn_5->setDisabled(true);
            }
            else
                ui->Save_Btn_5->setDisabled(false);
        }
        ui->RunCal_Btn->setDisabled(false);
        ui->comboBox->setDisabled(false);
        ui->Retest_5->setDisabled(false);
        ui->RunSample_Btn->setDisabled(false);
        ui->Retest_3->setDisabled(false);
        float val = ui->label_273->text().toFloat();
        float min = ui->label_274->text().toFloat();
        float max = ui->label_275->text().toFloat();
        ui->label_256->setVisible(false);
        ui->label_254->setVisible(true);
        if(val<=max && val>=min)
        {
            ui->label_254->setText("QC - Within Range");
            ui->label_254->setStyleSheet("QLabel {color : green;}");
            ui->pushButton_189->setVisible(true);
            ui->pushButton_190->setVisible(false);
        }
        else
        {
            ui->label_254->setText("QC - Without Range");
            ui->label_254->setStyleSheet("QLabel {color : red;}");
            ui->pushButton_189->setVisible(false);
            ui->pushButton_190->setVisible(true);
        }
        endqc_Graph();
    }
}

void MainWindow::endqc_Graph()
{
    qDebug()<<"Endqc graph";

    QString cmbox= ui->comboBox->currentText();
    if(cmbox=="QC - 1")
    {
        End_qc1_opt=1;
        QC1Conc=ui->label_273->text();
        QC1OD=ui->label_228->text();
        QC2Conc="";
        QC2OD="";
        Unit=ui->label_272->text();
        Timeee=ui->SysTime_Lbl->text();
        QC1= ui->label_273->text().toDouble();
        QCMin = ui->label_274->text();
        QCMax = ui->label_275->text();
        QSqlQuery q;
        q.prepare("select ctrl1bno from test where name='"+TestName+"'");
        q.exec();
        while(q.next())
            LotNo=q.value(0).toString();

        qc1retestbtn=1;
        EndQC1_Func();
    }
    else if(cmbox=="QC - 2")
    {
        End_qc2_opt=1;
        QC2Conc=ui->label_273->text();
        QC2OD=ui->label_228->text();
        QC1Conc="";
        QC1OD="";
        Unit=ui->label_272->text();
        Dateee=ui->SysDate_Lbl->text();
        Timeee=ui->SysTime_Lbl->text();
        QC2= ui->label_273->text().toDouble();
        QCMin = ui->label_274->text();
        QCMax = ui->label_275->text();
        QSqlQuery q;
        q.prepare("select ctrl2bno from test where name='"+TestName+"'");
        q.exec();
        while(q.next())
            LotNo=q.value(0).toString();

        qc2retestbtn=1;
        EndQC2_Func();
    }
    QString data;
    ui->Stop_Btn->setDisabled(true);
    ui->Stop_Btn_2->setDisabled(true);
}

void MainWindow::endreqc_Graph()
{
    float val = ui->label_273->text().toFloat();
    float min = ui->label_274->text().toFloat();
    float max = ui->label_275->text().toFloat();
    ui->label_256->setVisible(false);
    ui->label_254->setVisible(true);
    if(val<=max && val>=min)
    {
        ui->label_254->setText("QC - Within Range");
        ui->label_254->setStyleSheet("QLabel {color : green;}");
        ui->pushButton_189->setVisible(true);
        ui->pushButton_190->setVisible(false);
    }
    else
    {
        ui->label_254->setText("QC - Without Range");
        ui->label_254->setStyleSheet("QLabel {color : red;}");
        ui->pushButton_189->setVisible(false);
        ui->pushButton_190->setVisible(true);
    }
    QString cmbox= ui->comboBox->currentText();

    if(endpointsavebtn==1)
        ui->Save_Btn_5->setDisabled(true);
    else
    {    if(endruncal==1)
        {
            if(endqcfinish==1)
                ui->Save_Btn_5->setDisabled(false);
            else
                ui->Save_Btn_5->setDisabled(true);
        }
        else
            ui->Save_Btn_5->setDisabled(false);
    }

    if(cmbox=="QC - 1")
    {
        End_qc1_opt=1;
        QC1Conc=ui->label_273->text();
        QC1OD=ui->label_228->text();
        QC2Conc="";
        QC2OD="";
        Unit=ui->label_272->text();
        Timeee=ui->SysTime_Lbl->text();
        QC1= ui->label_273->text().toDouble();
        QCMin = ui->label_274->text();
        QCMax = ui->label_275->text();
        QSqlQuery q;
        q.prepare("select ctrl1bno from test where name='"+TestName+"'");
        q.exec();
        while(q.next())
            LotNo=q.value(0).toString();

        EndQC1_Func();
    }
    else if(cmbox=="QC - 2")
    {
        End_qc2_opt=1;
        QC2Conc=ui->label_273->text();
        QC2OD=ui->label_228->text();
        QC1Conc="";
        QC1OD="";
        Unit=ui->label_272->text();
        Dateee=ui->SysDate_Lbl->text();
        Timeee=ui->SysTime_Lbl->text();
        QC2= ui->label_273->text().toDouble();
        QCMin = ui->label_274->text();
        QCMax = ui->label_275->text();
        QSqlQuery q;
        q.prepare("select ctrl2bno from test where name='"+TestName+"'");
        q.exec();
        while(q.next())
            LotNo=q.value(0).toString();

        EndQC2_Func();
    }
    ui->Stop_Btn->setDisabled(true);
}
void MainWindow::endblankcalc()
{
    if(option==1)
    {
        QString TestName = ui->TestName_Lbl->text();
        QSqlQuery query;
        QString Blankval;
        int blnkval = 0;
        Blankval = char (blnkval);
        Blankval = ui->label_240->text();
        query.prepare("update test set blnkval='"+Blankval+"' where name='"+TestName+"'");
        if(query.exec())
        {
        }
        else
        {
        }
        ui->RunBlank_Btn->setDisabled(false);
        ui->Stop_Btn->setDisabled(true);
        ui->RunCal_Btn->setDisabled(false);
        ui->E_QC_Check->setDisabled(false);
        ui->RunSample_Btn->setDisabled(false);
        ui->Retest->setDisabled(true);
        ui->Retest_3->setDisabled(true);
        ui->Retest_4->setDisabled(true);
        ui->Home_Btn_3->setVisible(true);
        ui->Home_Btn_3->setDisabled(false);
        ui->comboBox->setDisabled(false);
        ui->Retest_5->setDisabled(false);
    }
}

void MainWindow::endcalcalc()
{
    if(option==2)
    {
        double od1, od2, od4 , od6;
        od1=ui->label_240->text().toDouble(); //Blank OD
        if(Multi_calibration==1)
        {
            od4=ui->label_177->text().toDouble(); // Cal OD
            od2=od4-od1; // Cal Od - Blank OD
            QString s = QString::number(od2);
            QByteArray ary;
            ary.append(s);
            QString Neg ="-";
            double fact=0.0;
            QByteArray ary1;
            ary1.append(Neg);
            if(ary[0]==ary1[0])
            {
                ui->Abs_lbl->setText("0");
                od6=ui->Abs_lbl->text().toDouble();
                ui->label_179->setText("0");
                fact = conct / od6; // Fact value
                QString Value = QString::number(fact);
                if(Value=="inf")
                {
                    ui->Fact_lbl->setText("0"); // Calibrate Factor Value
                }

            }
            else
            {
                ui->Abs_lbl->setText(QString::number(od2, 'f', 4));
                ui->label_179->setText(QString::number(od2, 'f', 4));
                od6=ui->Abs_lbl->text().toDouble();
                fact = conct / od6; // Fact value
                QString Value = QString::number(fact);
                if(Value=="inf")
                {
                    ui->Fact_lbl->setText("0"); // Calibrate Factor Value
                }
                else
                {
                    if(fact<100)
                    {
                        ui->Fact_lbl->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
                    }
                    else if(fact>100)
                    {
                        ui->Fact_lbl->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value
                    }
                }
            }
            qDebug()<<"Conct : "<<conct;
            ui->Conc_lbl->setText(QString::number(conct));
            QString Abs,Factu;
            Abs=ui->Abs_lbl->text();
            Factu=ui->Fact_lbl->text();
            QSqlQuery qy;
            Tname="" ; batchno="";concent="";Calib_Abs="";factor=""; dte="";
            CalibrateAbs = ui->Abs_lbl->text();
            Fact = ui->Fact_lbl->text();
            if(cal_retest==1)
            {
                qy.prepare("update test set Abs1='"+Abs+"',Fact1='"+Fact+"' where name='"+TestName+"'");
                ui->toolButton_57->setDisabled(false);
                ui->toolButton_61->setDisabled(false);
                ui->toolButton_63->setDisabled(true);
                ui->toolButton_58->setDisabled(true);
                ui->toolButton_60->setDisabled(true);
                ui->toolButton_64->setDisabled(true);
                ui->toolButton_59->setDisabled(true);
                ui->toolButton_62->setDisabled(true);
            }
            else if(cal_retest==2)
            {
                qy.prepare("update test set Abs2='"+Abs+"',Fact2='"+Fact+"' where name='"+TestName+"'");
                ui->toolButton_57->setDisabled(false);
                ui->toolButton_61->setDisabled(false);
                ui->toolButton_63->setDisabled(false);
                ui->toolButton_58->setDisabled(true);
                ui->toolButton_60->setDisabled(true);
                ui->toolButton_64->setDisabled(true);
                ui->toolButton_59->setDisabled(true);
                ui->toolButton_62->setDisabled(true);
            }
            else if(cal_retest==3)
            {
                qy.prepare("update test set Abs3='"+Abs+"',Fact3='"+Fact+"' where name='"+TestName+"'");
                ui->toolButton_57->setDisabled(false);
                ui->toolButton_61->setDisabled(false);
                ui->toolButton_63->setDisabled(false);
                ui->toolButton_58->setDisabled(false);
                ui->toolButton_60->setDisabled(true);
                ui->toolButton_64->setDisabled(true);
                ui->toolButton_59->setDisabled(true);
                ui->toolButton_62->setDisabled(true);
            }
            else if(cal_retest==4)
            {
                qy.prepare("update test set Abs4='"+Abs+"',Fact4='"+Fact+"' where name='"+TestName+"'");
                ui->toolButton_57->setDisabled(false);
                ui->toolButton_61->setDisabled(false);
                ui->toolButton_63->setDisabled(false);
                ui->toolButton_58->setDisabled(false);
                ui->toolButton_60->setDisabled(false);
                ui->toolButton_64->setDisabled(true);
                ui->toolButton_59->setDisabled(true);
                ui->toolButton_62->setDisabled(true);
            }
            else if(cal_retest==5)
            {
                qy.prepare("update test set Abs5='"+Abs+"',Fact5='"+Fact+"' where name='"+TestName+"'");
                ui->toolButton_57->setDisabled(false);
                ui->toolButton_61->setDisabled(false);
                ui->toolButton_63->setDisabled(false);
                ui->toolButton_58->setDisabled(false);
                ui->toolButton_60->setDisabled(false);
                ui->toolButton_64->setDisabled(false);
                ui->toolButton_59->setDisabled(true);
                ui->toolButton_62->setDisabled(true);
            }
            else if(cal_retest==6)
            {
                qy.prepare("update test set Abs6='"+Abs+"',Fact6='"+Fact+"' where name='"+TestName+"'");
                ui->toolButton_57->setDisabled(false);
                ui->toolButton_61->setDisabled(false);
                ui->toolButton_63->setDisabled(false);
                ui->toolButton_58->setDisabled(false);
                ui->toolButton_60->setDisabled(false);
                ui->toolButton_64->setDisabled(false);
                ui->toolButton_59->setDisabled(false);
                ui->toolButton_62->setDisabled(true);
            }
            else if(cal_retest==7)
            {
                qy.prepare("update test set Abs7='"+Abs+"',Fact7='"+Fact+"' where name='"+TestName+"'");
                ui->toolButton_57->setDisabled(false);
                ui->toolButton_61->setDisabled(false);
                ui->toolButton_63->setDisabled(false);
                ui->toolButton_58->setDisabled(false);
                ui->toolButton_60->setDisabled(false);
                ui->toolButton_64->setDisabled(false);
                ui->toolButton_59->setDisabled(false);
                ui->toolButton_62->setDisabled(false);
            }
            else if(cal_retest==8)
            {
                qy.prepare("update test set Abs8='"+Abs+"',Fact8='"+Fact+"' where name='"+TestName+"'");
                ui->toolButton_57->setDisabled(false);
                ui->toolButton_61->setDisabled(false);
                ui->toolButton_63->setDisabled(false);
                ui->toolButton_58->setDisabled(false);
                ui->toolButton_60->setDisabled(false);
                ui->toolButton_64->setDisabled(false);
                ui->toolButton_59->setDisabled(false);
                ui->toolButton_62->setDisabled(false);
            }
            qy.exec();

            ui->Stop_Btn_3->setDisabled(true);
            ui->toolButton_39->setDisabled(false);
            ui->toolButton_40->setDisabled(false);
            ui->Retest_6->setDisabled(false);
            ui->Home_Btn_25->setDisabled(false);
            int cal=0;
            QSqlQuery query;
            query.prepare("select * from test where name = '"+TestName+"'");
            query.exec();
            while(query.next())
            {
                cal=query.value(16).toInt();
            }
            if(cal==multi_cal1)
                ui->toolButton_39->setDisabled(false);
            else
                ui->toolButton_39->setDisabled(true);
            Calibration_Histry_All();
        }
        else if(Multi_calibration==2)
        {

            od4=ui->label_75->text().toDouble(); // Cal OD
            od2=od4-od1; // Cal Od - Blank OD
            QString s = QString::number(od2);
            QByteArray ary;
            ary.append(s);
            QString Neg ="-";
            double fact=0.0;
            QByteArray ary1;
            ary1.append(Neg);
            if(ary[0]==ary1[0])
            {
                ui->label_224->setText("0");
                od6=ui->label_224->text().toDouble();
                fact = concen / od6; // Fact value
                QString Value = QString::number(fact);
                if(Value=="inf")
                {
                    ui->label_242->setText("0"); // Calibrate Factor Value
                    ui->label_225->setText("0"); // Calibrate Factor Value
                }

            }
            else
            {
                ui->label_224->setText(QString::number(od2, 'f', 4));
                od6=ui->label_224->text().toDouble();
                fact = concen / od6; // Fact value
                QString Value = QString::number(fact);
                if(Value=="inf")
                {
                    ui->label_242->setText("0"); // Calibrate Factor Value
                    ui->label_225->setText("0"); // Calibrate Factor Value
                }
                else
                {
                    if(fact<100)
                    {
                        ui->label_242->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
                        ui->label_225->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
                    }
                    else if(fact>100)
                    {
                        ui->label_242->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value
                        ui->label_225->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value
                    }
                }
            }
        }
        ui->RunCal_Btn->setDisabled(false);
        ui->Stop_Btn->setDisabled(true);
        ui->Stop_Btn_2->setDisabled(true);
        ui->RunBlank_Btn->setDisabled(false);
        ui->E_QC_Check->setDisabled(false);
        ui->RunSample_Btn->setDisabled(false);
        ui->Retest->setDisabled(false);
        ui->Retest_3->setDisabled(true);
        ui->Retest_4->setDisabled(true);
        ui->Save_Btn_5->setDisabled(false);
        ui->Home_Btn_3->setVisible(true);
        ui->Home_Btn_3->setDisabled(false);
        ui->comboBox->setDisabled(false);
        ui->Retest_5->setDisabled(false);
    }
}

void MainWindow::endRecalcalc()
{
    if(option==10)
    {
        double od1, od2, od4 , od6;
        if(Multi_calibration==1)
        {
            od4=ui->label_177->text().toDouble(); // Cal OD
            od1=ui->label_240->text().toDouble(); //Blank OD
            od2=od4-od1; // Cal Od - Blank OD
            QString s = QString::number(od2);
            QByteArray ary;
            ary.append(s);
            qDebug()<<"Ary[0] : "<<ary[0];
            QString Neg ="-";
            double fact =0.0;
            QByteArray ary1;
            ary1.append(Neg);
            if(ary[0]==ary1[0])
            {
                ui->Abs_lbl->setText("0");
                od6=ui->Abs_lbl->text().toDouble();
                ui->label_179->setText("0");
                fact = conct / od6; // Fact value
                QString Value = QString::number(fact);
                if(Value=="inf")
                {
                    ui->Fact_lbl->setText("0"); // Calibrate Factor Value
                    ui->Fact_lbl->setText("0"); // Calibrate Factor Value
                }
            }
            else
            {
                ui->Abs_lbl->setText(QString::number(od2, 'f', 4));
                ui->label_179->setText(QString::number(od2, 'f', 4));
                od6=ui->Abs_lbl->text().toDouble();
                fact = conct / od6; // Fact value
                QString Value = QString::number(fact);
                if(Value=="inf")
                    ui->Fact_lbl->setText("0"); // Calibrate Factor Value
                else
                {
                    qDebug()<<"exit";
                    if(fact<100)
                        ui->Fact_lbl->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
                    else if(fact>100)
                        ui->Fact_lbl->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value
                }
            }
            ui->Conc_lbl->setText(QString::number(conct));
            QString Abs,factu;
            Abs=ui->Abs_lbl->text();
            factu=ui->Fact_lbl->text();
            CalibrateAbs = ui->Abs_lbl->text();
            Fact = ui->Fact_lbl->text();
            QSqlQuery qy;
            if(cal_retest==1)
                qy.prepare("update test set Abs1='"+Abs+"',Fact1='"+Fact+"' where name='"+TestName+"'");
            else if(cal_retest==2)
                qy.prepare("update test set Abs2='"+Abs+"',Fact2='"+Fact+"' where name='"+TestName+"'");
            else if(cal_retest==3)
                qy.prepare("update test set Abs3='"+Abs+"',Fact3='"+Fact+"' where name='"+TestName+"'");
            else if(cal_retest==4)
                qy.prepare("update test set Abs4='"+Abs+"',Fact4='"+Fact+"' where name='"+TestName+"'");
            else if(cal_retest==5)
                qy.prepare("update test set Abs5='"+Abs+"',Fact5='"+Fact+"' where name='"+TestName+"'");
            else if(cal_retest==6)
                qy.prepare("update test set Abs6='"+Abs+"',Fact6='"+Fact+"' where name='"+TestName+"'");
            else if(cal_retest==7)
                qy.prepare("update test set Abs7='"+Abs+"',Fact7='"+Fact+"' where name='"+TestName+"'");
            else if(cal_retest==8)
                qy.prepare("update test set Abs8='"+Abs+"',Fact8='"+Fact+"' where name='"+TestName+"'");
            qy.exec();

            ui->Stop_Btn_3->setDisabled(true);
            Calibration_Histry_All();

        }
        else if(Multi_calibration==2)
        {
            od4=ui->label_75->text().toDouble(); // Cal OD
            od1=ui->label_240->text().toDouble(); //Blank OD
            od2=od4-od1; // Cal Od - Blank OD
            QString s = QString::number(od2);
            QByteArray ary;
            ary.append(s);
            qDebug()<<"Ary[0] : "<<ary[0];
            QString Neg ="-";
            double fact =0.0;
            QByteArray ary1;
            ary1.append(Neg);
            if(ary[0]==ary1[0])
            {
                ui->label_224->setText("0");
                od6=ui->label_224->text().toDouble();
                fact = concen / od6; // Fact value
                QString Value = QString::number(fact);
                if(Value=="inf")
                {
                    ui->label_242->setText("0"); // Calibrate Factor Value
                    ui->label_225->setText("0"); // Calibrate Factor Value
                }
            }
            else
            {
                ui->label_224->setText(QString::number(od2, 'f', 4));
                od6=ui->label_224->text().toDouble();
                fact = concen / od6; // Fact value
                QString Value = QString::number(fact);
                if(Value=="inf")
                {
                    ui->label_242->setText("0"); // Calibrate Factor Value
                    ui->label_225->setText("0"); // Calibrate Factor Value
                }
                else
                {
                    qDebug()<<"exit";
                    if(fact<100)
                    {
                        ui->label_242->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
                        ui->label_225->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
                    }
                    else if(fact>100)
                    {
                        ui->label_242->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value
                        ui->label_225->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value
                    }
                }
            }
        }
        ui->Stop_Btn->setDisabled(true);
        ui->RunBlank_Btn->setDisabled(false);
        ui->RunCal_Btn->setDisabled(false);
        ui->E_QC_Check->setDisabled(false);
        ui->RunSample_Btn->setDisabled(false);
        ui->Save_Btn_5->setEnabled(true);
        ui->Retest->setDisabled(true);
        ui->Retest_3->setDisabled(true);
        ui->Retest_4->setDisabled(true);
        ui->Home_Btn_3->setVisible(true);
        ui->Home_Btn_3->setDisabled(false);
        ui->comboBox->setDisabled(false);
        ui->Retest_5->setDisabled(false);
    }
}

void MainWindow::endsampcalc()
{
    if(option==3)
    {
        if(Multi_calibration==1)
            linearity();
        else if(Multi_calibration==2)
        {
            double dod1, dod3,dod5 = 0.0,dod6;

            if(fct == 0.0)
            {
                dod1=ui->label_6->text().toDouble();// Sample OD
                QString s = QString::number(dod1);
                QByteArray ary;
                ary.append(s);
                QString Neg ="-";
                QByteArray ary1;
                ary1.append(Neg);
                if(ary[0]==ary1[0])
                {
                    ui->label_33->setText("0");
                    ui->label_50->setText("0");
                }
                else
                {

                    dod3=dod1*fct;
                    QString Value = QString::number(dod3);
                    if(Value=="inf")
                    {
                        ui->label_33->setText("0"); // Calibrate Factor Value
                        ui->label_50->setText("0"); // Calibrate Factor Value
                    }
                    else if(dod3<100)
                    {
                        ui->label_33->setText(QString::number(dod3, 'f' , 2));
                        ui->label_50->setText(QString::number(dod3, 'f' , 2));
                    }
                    else if(dod3>100)
                    {
                        ui->label_33->setText(QString::number(dod3, 'f' , 0));
                        ui->label_50->setText(QString::number(dod3, 'f' , 0));
                    }
                    QThread::msleep(10);
                }
            }
            else
            {
                dod5=ui->label_6->text().toDouble();
                QString s = QString::number(dod5);
                QByteArray ary;
                ary.append(s);
                QString Neg ="-";
                QByteArray ary1;
                ary1.append(Neg);
                if(ary[0]==ary1[0])
                {
                    ui->label_33->setText("0");
                    ui->label_50->setText("0");
                }
                else
                {

                    dod6=(fct * dod5);
                    QString Value = QString::number(dod6);
                    if(Value=="inf")
                    {
                        ui->label_33->setText("0"); // Calibrate Factor Value
                        ui->label_50->setText("0"); // Calibrate Factor Value
                    }
                    else if(dod6<100)
                    {
                        ui->label_33->setText(QString::number(dod6, 'f' , 2));
                        ui->label_50->setText(QString::number(dod6, 'f' , 2));
                    }
                    else if(dod6>100)
                    {
                        ui->label_33->setText(QString::number(dod6, 'f' , 0));
                        ui->label_50->setText(QString::number(dod6, 'f' , 0));
                    }
                    QThread::msleep(50);
                }
            }
            ui->RunBlank_Btn->setDisabled(false);
            qDebug()<<"EpSaveBTn : "<<endpointsavebtn<<" EPRunSamp : "<<endrunsamp<<" EPSampFinish : "<<endsampfinish;
            if(endpointsavebtn==1)
                ui->Save_Btn_5->setDisabled(true);
            else
            {    if(endrunsamp==1)
                {
                    if(endsampfinish==1)
                        ui->Save_Btn_5->setDisabled(false);
                    else
                        ui->Save_Btn_5->setDisabled(true);
                }
                else
                    ui->Save_Btn_5->setDisabled(false);
            }
            ui->RunCal_Btn->setDisabled(false);
            ui->RunSample_Btn->setDisabled(false);
            ui->Retest->setDisabled(false);
            ui->Retest_3->setDisabled(false);
            ui->Retest_4->setDisabled(false);
            ui->E_QC_Check->setDisabled(false);
            ui->stackedWidget->setCurrentIndex(17);
            text="";
            if (ui->radioButton_5->isChecked())
            {
                ui->radioButton_5->setAutoExclusive(false);
                ui->radioButton_5->setEnabled(true);
                qDebug()<<"end Male btn ";
                ui->radioButton_5->setChecked(false);
                ui->radioButton_5->setAutoExclusive(true);
            }
            else if (ui->radioButton_6->isChecked())
            {
                ui->radioButton_6->setAutoExclusive(false);
                ui->radioButton_6->setEnabled(true);
                ui->radioButton_6->setChecked(false);
                qDebug()<<"end feMale btn ";
                ui->radioButton_6->setAutoExclusive(true);
            }
            else if (ui->radioButton_7->isChecked())
            {
                ui->radioButton_7->setAutoExclusive(false);
                ui->radioButton_7->setEnabled(true);
                ui->radioButton_7->setChecked(false);
                qDebug()<<"end trans btn ";
                ui->radioButton_7->setAutoExclusive(true);
            }
            ui->EndPoint_Save_Btn->setDisabled(true);
            ui->EndPoint_Save_Btn->setVisible(true);
            ui->EndPoint_Print_Btn->setVisible(true);
            ui->EndPoint_Print_Btn->setDisabled(true);
            ui->Home_Btn_11->setVisible(true);
            ui->Home_Btn_18->setVisible(false);
            ui->Home_Btn_19->setVisible(false);
            ui->Print_Btn->setDisabled(false);
            ui->label_267->setText(TestName);
            ui->PatientInfo_LineEdit->clear();
            ui->Patient_Name->clear();
            ui->Patient_Age->clear();
            ui->PatientInfo_LineEdit->setFocus();
            ui->pushButton_117->setDisabled(false);
            ui->Patient_Name_Btn->setDisabled(false);
            ui->Patient_Age_Btn->setDisabled(false);
            ui->Stop_Btn->setDisabled(true);
            ui->Stop_Btn_2->setDisabled(true);
            ui->Print_Btn->setDisabled(false);
            ui->Home_Btn_3->setVisible(true);
            ui->Home_Btn_3->setDisabled(false);
            ui->comboBox->setDisabled(false);
            ui->Retest_5->setDisabled(false);
        }
    }
}

void MainWindow::endResampcalc()
{
    if(option==11)
    {
        if(Multi_calibration==1)
            linearity();
        else if(Multi_calibration==2)
        {
            double dod1, dod3,dod5 = 0.0,dod6;
            if(fct == 0.0)
            {
                dod1=ui->label_6->text().toDouble();// Sample OD
                // dod2=ui->label_225->text().toDouble();// Factor OD
                QString s = QString::number(dod1);
                QByteArray ary;
                ary.append(s);
                QString Neg ="-";
                QByteArray ary1;
                ary1.append(Neg);
                if(ary[0]==ary1[0])
                {
                    ui->label_33->setText("0");
                    ui->label_50->setText("0");
                }
                else
                {

                    dod3=dod1*fct;
                    //dod4 = abs(dod3);
                    QString Value = QString::number(dod3);
                    if(Value=="inf")
                    {
                        ui->label_33->setText("0"); // Calibrate Factor Value
                        ui->label_50->setText("0"); // Calibrate Factor Value
                    }
                    else if(dod3<100)
                    {
                        ui->label_33->setText(QString::number(dod3, 'f' , 2));
                        ui->label_50->setText(QString::number(dod3, 'f' , 2));
                    }
                    else if(dod3>100)
                    {
                        ui->label_33->setText(QString::number(dod3, 'f' , 0));
                        ui->label_50->setText(QString::number(dod3, 'f' , 0));
                    }
                }
            }
            else
            {
                dod5=ui->label_6->text().toDouble();
                //double dod2=ui->label_225->text().toDouble();
                QString s = QString::number(dod5);
                QByteArray ary;
                ary.append(s);
                QString Neg ="-";
                QByteArray ary1;
                ary1.append(Neg);
                qDebug()<<"Ary[0] : "<<ary[0];
                if(ary[0]==ary1[0])
                {
                    ui->label_33->setText("0");
                    ui->label_50->setText("0");
                }
                else
                {

                    dod6=(fct * dod5);
                    QString Value = QString::number(dod6);
                    if(Value=="inf")
                    {
                        ui->label_33->setText("0"); // Calibrate Factor Value
                        ui->label_50->setText("0"); // Calibrate Factor Value
                    }
                    else if(dod6<100)
                    {
                        ui->label_33->setText(QString::number(dod6, 'f' , 2));
                        ui->label_50->setText(QString::number(dod6, 'f' , 2));
                    }
                    else if(dod6>100)
                    {
                        ui->label_33->setText(QString::number(dod6, 'f' , 0));
                        ui->label_50->setText(QString::number(dod6, 'f' , 0));
                    }
                }
                QThread::msleep(50);
            }
        }
    }

    ui->RunBlank_Btn->setDisabled(false);
    qDebug()<<"EpSaveBTn : "<<endpointsavebtn<<" EPRunSamp : "<<endrunsamp<<" EPSampFinish : "<<endsampfinish;

    if(endpointsavebtn==1)
        ui->Save_Btn_5->setDisabled(true);
    else
    {    if(endrunsamp==1)
        {
            if(endsampfinish==1)
                ui->Save_Btn_5->setDisabled(false);
            else
                ui->Save_Btn_5->setDisabled(true);
        }
        else
            ui->Save_Btn_5->setDisabled(false);
    }

    ui->RunCal_Btn->setDisabled(false);
    ui->RunSample_Btn->setDisabled(false);
    ui->Retest->setDisabled(false);
    ui->Retest_3->setDisabled(false);
    ui->Retest_4->setDisabled(false);
    ui->E_QC_Check->setDisabled(false);
    ui->Print_Btn->setDisabled(false);
    ui->stackedWidget->setCurrentIndex(17);
    //text="";
    if(endsavebtn==1)
    {
        ui->pushButton_117->setDisabled(true);
        ui->Patient_Name_Btn->setDisabled(true);
        ui->Patient_Age_Btn->setDisabled(true);
        ui->radioButton_5->setDisabled(true);
        ui->radioButton_6->setDisabled(true);
        ui->radioButton_7->setDisabled(true);
        ui->EndPoint_Save_Btn->setVisible(true);
        ui->EndPoint_Save_Btn->setDisabled(true);
        ui->EndPoint_Print_Btn->setDisabled(true);
        ui->EndPoint_Print_Btn->setVisible(true);
    }
    else
    {
        ui->pushButton_117->setDisabled(false);
        ui->Patient_Name_Btn->setDisabled(false);
        ui->Patient_Age_Btn->setDisabled(false);
        ui->radioButton_5->setDisabled(false);
        ui->radioButton_6->setDisabled(false);
        ui->radioButton_7->setDisabled(false);
        ui->EndPoint_Save_Btn->setVisible(true);
        ui->EndPoint_Save_Btn->setDisabled(false);
        ui->EndPoint_Print_Btn->setDisabled(true);
        ui->EndPoint_Print_Btn->setVisible(true);
    }

    ui->label_267->setText(TestName);
    ui->comboBox->setDisabled(false);
    ui->Retest_5->setDisabled(false);
    ui->Stop_Btn->setDisabled(true);
    ui->Stop_Btn_2->setDisabled(true);
    ui->Home_Btn_3->setVisible(true);
    ui->Home_Btn_3->setDisabled(false);
}

void MainWindow::twoblankcalc()
{
    if(option==4)
    {
        QString TestName = ui->TestName_Lbl->text();
        QSqlQuery query;

        QString Blankval;
        int blnkval = 0;
        Blankval = char (blnkval);
        Blankval = ui->label->text();
        qDebug()<<Blankval;
        query.prepare("update test set blnkval='"+Blankval+"' where name='"+TestName+"'");

        if(query.exec())
        {
            qDebug()<<Blankval;
        }
        else
        {
        }
        ui->Home_Btn_3->setVisible(true);
        ui->Home_Btn_3->setDisabled(false);
    }
}


void MainWindow::twocalcalc()
{
    if(option==5)              //Two-Point Calibrate calc
    {
        double od1 , od2, dod , dod1 ,dod5,fact;
        if(Multi_calibration==1)
        {
            od1=ui->label_170->text().toDouble(); //1st Read
            od2=ui->label_169->text().toDouble(); //2nd Read
            dod=od2-od1;
            dod1=abs(dod); //Cal value 1
            ui->Abs_lbl->setText(QString::number(dod1, 'f', 4));   //calibrate OD
            dod5=ui->Abs_lbl->text().toDouble();
            fact = conct / dod5; // Factor OD
            QString Value = QString::number(fact);
            if(Value=="inf")
                ui->Fact_lbl->setText("0"); // Calibrate Factor Value
            else if(fact<100)
                ui->Fact_lbl->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
            else if(fact>100)
                ui->Fact_lbl->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value

            ui->Conc_lbl->setText(QString::number(conct));
            QString Abs,Fact;
            Abs=ui->Abs_lbl->text();
            Fact=ui->Fact_lbl->text();
            QSqlQuery qy;
            if(cal_retest==1)
                qy.prepare("update test set Abs1='"+Abs+"',Fact1='"+Fact+"' where name='"+TestName+"'");
            else if(cal_retest==2)
                qy.prepare("update test set Abs2='"+Abs+"',Fact2='"+Fact+"' where name='"+TestName+"'");
            else if(cal_retest==3)
                qy.prepare("update test set Abs3='"+Abs+"',Fact3='"+Fact+"' where name='"+TestName+"'");
            else if(cal_retest==4)
                qy.prepare("update test set Abs4='"+Abs+"',Fact4='"+Fact+"' where name='"+TestName+"'");
            else if(cal_retest==5)
                qy.prepare("update test set Abs5='"+Abs+"',Fact5='"+Fact+"' where name='"+TestName+"'");
            else if(cal_retest==6)
                qy.prepare("update test set Abs6='"+Abs+"',Fact6='"+Fact+"' where name='"+TestName+"'");
            else if(cal_retest==7)
                qy.prepare("update test set Abs7='"+Abs+"',Fact7='"+Fact+"' where name='"+TestName+"'");
            else if(cal_retest==8)
                qy.prepare("update test set Abs8='"+Abs+"',Fact8='"+Fact+"' where name='"+TestName+"'");
            qy.exec();

            ui->Stop_Btn_3->setDisabled(true);
            ui->toolButton_30->setDisabled(false);
            ui->toolButton_31->setDisabled(false);
            ui->toolButton_32->setDisabled(false);
            ui->toolButton_33->setDisabled(false);
            ui->toolButton_34->setDisabled(false);
            ui->toolButton_35->setDisabled(false);
            ui->toolButton_36->setDisabled(false);
            ui->toolButton_37->setDisabled(false);
            ui->toolButton_39->setDisabled(false);
            // ui->toolButton_40->setDisabled(false);
            ui->Retest_6->setDisabled(false);
            ui->Home_Btn_25->setDisabled(false);

        }
        else
        {
            od1=ui->label_120->text().toDouble(); //1st Read
            od2=ui->label_122->text().toDouble(); //2nd Read
            dod=od2-od1;
            dod1=abs(dod); //Cal value 1
            ui->label_119->setText(QString::number(dod1, 'f', 4));
            ui->label_76->setText(QString::number(dod1, 'f', 4));   //calibrate OD
            dod5=ui->label_76->text().toDouble();
            fact = concen / dod5; // Factor OD
            QString Value = QString::number(fact);
            if(Value=="inf")
            {
                ui->label_34->setText("0"); // Calibrate Factor Value
                ui->label_240->setText("0"); // Calibrate Factor Value
            }
            else if(fact<100)
            {
                ui->label_240->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
                ui->label_34->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
            }
            else if(fact>100)
            {
                ui->label_240->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value
                ui->label_34->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value
            }
        }
        ui->Stop_Btn_2->setDisabled(true);
        ui->RunCal_Btn_2->setDisabled(false);
        ui->RunSample_Btn_2->setDisabled(false);
        ui->TP_QC_Check->setDisabled(false);
        ui->Save_Btn_6->setDisabled(false);
        ui->Home_Btn_3->setVisible(true);
        ui->Home_Btn_3->setDisabled(false);
        ui->comboBox_2->setDisabled(false);
        ui->Retest_5->setDisabled(false);
        //twocalsavefunc();
    }
    ui->Save_Btn_6->setVisible(true);
    //Two_cal_print_image();
}

void MainWindow::twosampcalc()
{
    if(option==6)          //Two-Point Sample Calc
    {
        if(Multi_calibration==1)
        {
            double od1=0,od2=0,dod=0,dod1=0;
            od1=ui->label_120->text().toDouble();
            od2=ui->label_122->text().toDouble();
            dod=od2-od1; // Samp OD1
            dod1=abs(dod);
            ui->label_119->setText(QString::number(dod1, 'f', 4));
            //dod6=ui->label_119->text().toDouble();
            linearity();
        }
        else if(Multi_calibration==2)
        {
            if(fct == 0.0)
            {
                double od1,od2,dod,dod1, dod4 ,dod5,dod6;
                od1=ui->label_120->text().toDouble();
                od2=ui->label_122->text().toDouble();
                dod=od2-od1; // Samp OD1
                dod1=abs(dod);
                ui->label_119->setText(QString::number(dod1, 'f', 4));
                dod6=ui->label_119->text().toDouble();
                //  od4=ui->label_34->text().toDouble(); // Factor Value
                dod4= dod6 * fct ; //Sample OD * Factor Value
                dod5 = abs(dod4); // Result
                QString Value = QString::number(dod5);
                if(Value=="inf")
                {
                    ui->label_33->setText("0"); // Calibrate Factor Value
                    ui->label_50->setText("0"); // Calibrate Factor Value
                }
                else if(dod5<100)
                {
                    ui->label_33->setText(QString::number(dod5, 'f' , 2));
                    ui->label_50->setText(QString::number(dod5, 'f' , 2));
                }
                else if(dod5>100)
                {
                    ui->label_33->setText(QString::number(dod5, 'f' , 0));
                    ui->label_50->setText(QString::number(dod5, 'f' , 0));
                }
            }
            else
            {
                double od1,od2,dod,dod1, dod4 ,dod5,dod6;
                od1=ui->label_120->text().toDouble();
                od2=ui->label_122->text().toDouble();
                dod=od2-od1; // Samp OD 1
                dod1=abs(dod);
                ui->label_119->setText(QString::number(dod1, 'f', 4));
                dod6=ui->label_119->text().toDouble();
                //  double od4=ui->label_240->text().toDouble(); // Factor Value
                dod4=  dod6 * fct; //Sample OD * Fact Value
                dod5 = abs(dod4);//Result
                QString Value = QString::number(dod5);
                if(Value=="inf")
                {
                    ui->label_33->setText("0"); // Calibrate Factor Value
                    ui->label_50->setText("0"); // Calibrate Factor Value
                }
                else if(dod5<100)
                {
                    ui->label_33->setText(QString::number(dod5, 'f' , 2));
                    ui->label_50->setText(QString::number(dod5, 'f' , 2));
                }
                else if(dod5>100)
                {
                    ui->label_33->setText(QString::number(dod5, 'f' , 0));
                    ui->label_50->setText(QString::number(dod5, 'f' , 0));
                }
            }
        }
    }

    ui->RunCal_Btn_2->setDisabled(false);
    ui->RunSample_Btn_2->setDisabled(false);
    ui->TP_QC_Check->setDisabled(false);
    ui->Save_Btn_5->setVisible(false);
    ui->Save_Btn_5->setDisabled(true);
    ui->Save_Btn_6->setVisible(true);
    qDebug()<<"TpSaveBTn : "<<twopointsavebtn<<" TPRunSamp : "<<tworunsamp<<" TPSampFinish : "<<twosampfinish;

    if(twopointsavebtn==1)
        ui->Save_Btn_6->setDisabled(true);
    else
    {   if(tworunsamp==1)
        {
            if(twosampfinish==1)
                ui->Save_Btn_6->setDisabled(false);
            else
                ui->Save_Btn_6->setDisabled(true);
        }
        else
            ui->Save_Btn_6->setDisabled(false);
    }
    QThread::msleep(10);
    ui->stackedWidget->setCurrentIndex(17);
    text="";
    if (ui->radioButton_5->isChecked())
    {
        ui->radioButton_5->setAutoExclusive(false);
        ui->radioButton_5->setEnabled(true);
        qDebug()<<"two Male btn ";
        ui->radioButton_5->setChecked(false);
        ui->radioButton_5->setAutoExclusive(true);
    }
    else if (ui->radioButton_6->isChecked())
    {
        ui->radioButton_6->setAutoExclusive(false);
        ui->radioButton_6->setEnabled(true);
        ui->radioButton_6->setChecked(false);
        qDebug()<<"two feMale btn ";
        ui->radioButton_6->setAutoExclusive(true);
    }
    else if (ui->radioButton_7->isChecked())
    {
        ui->radioButton_7->setAutoExclusive(false);
        ui->radioButton_7->setEnabled(true);
        ui->radioButton_7->setChecked(false);
        qDebug()<<"two trans btn ";
        ui->radioButton_7->setAutoExclusive(true);
    }
    ui->EndPoint_Save_Btn->setDisabled(true);
    ui->EndPoint_Save_Btn->setVisible(true);
    ui->EndPoint_Print_Btn->setVisible(true);
    ui->EndPoint_Print_Btn->setDisabled(true);
    ui->Home_Btn_11->setVisible(false);
    ui->Home_Btn_18->setVisible(true);
    ui->Home_Btn_19->setVisible(false);
    ui->label_267->setText(TestName);
    ui->PatientInfo_LineEdit->clear();
    ui->Patient_Name->clear();
    ui->Patient_Age->clear();
    ui->PatientInfo_LineEdit->setFocus();
    ui->Stop_Btn_2->setDisabled(true);
    ui->Print_Btn->setDisabled(false);
    ui->Home_Btn_3->setVisible(true);
    ui->Home_Btn_3->setDisabled(false);
    ui->comboBox_2->setDisabled(false);
    ui->Retest_5->setDisabled(false);
    //}
}

void MainWindow::twoQCsampcalc()
{
    if(option==13)          //Two-Point QC Calc
    {
        if(Multi_calibration==1)
        {
            double od1,od2,dod,dod1;
            od1=ui->label_120->text().toDouble();
            od2=ui->label_122->text().toDouble();
            dod=od2-od1; // Samp OD1
            dod1=abs(dod);
            ui->label_234->setText(QString::number(dod1, 'f', 4));
            linearity();

        }
        else if(Multi_calibration==2)
        {
            if(fct == 0.0)
            {
                double od1,od2,dod,dod1, dod4 ,dod6;
                od1=ui->label_120->text().toDouble();
                od2=ui->label_122->text().toDouble();
                dod=od2-od1; // Samp OD1
                dod1=abs(dod);
                ui->label_234->setText(QString::number(dod1, 'f', 4));
                dod6=ui->label_234->text().toDouble();//Sample
                QString s = QString::number(dod6);
                QByteArray ary;
                ary.append(s);
                QString Neg ="-";
                QByteArray ary1;
                ary1.append(Neg);
                qDebug()<<"Ary[0] : "<<ary[0]<<dod6;
                if(ary[0]==ary1[0])
                    ui->label_276->setText("0");
                else
                {
                    double dod5;
                    // od4=ui->label_34->text().toDouble(); // Factor Value
                    dod4= dod6 * fct ; //Sample OD * Factor Value
                    dod5 = abs(dod4); // Result
                    QString Value = QString::number(dod5);
                    if(Value=="inf")
                        ui->label_276->setText("0"); // Calibrate Factor Value
                    else if(dod5<100)
                        ui->label_276->setText(QString::number(dod5, 'f' , 2));
                    else if(dod5>100)
                        ui->label_276->setText(QString::number(dod5, 'f' , 0));
                }
                float val = ui->label_276->text().toFloat();
                float min = ui->label_277->text().toFloat();
                float max = ui->label_278->text().toFloat();

                qDebug()<<"Conc.";

                ui->label_256->setVisible(true);
                if(val<=max && val>=min)
                {
                    ui->label_256->setText("QC - Within Range");
                    ui->label_256->setStyleSheet("QLabel {color : green;}");
                    ui->pushButton_189->setVisible(true);
                    ui->pushButton_190->setVisible(false);
                }
                else
                {
                    ui->label_256->setText("QC - Without Range");
                    ui->label_256->setStyleSheet("QLabel {color : red;}");
                    ui->pushButton_189->setVisible(false);
                    ui->pushButton_190->setVisible(true);
                }

                ui->TP_QC_Check->setDisabled(false);
                ui->RunCal_Btn_2->setDisabled(false);
                ui->RunSample_Btn_2->setDisabled(false);

                QString vlll= ui->comboBox_2->currentText();
                if(twopointsavebtn==1)
                    ui->Save_Btn_6->setDisabled(true);
                else
                {    if(tworuncal==1)
                    {
                        if(twoqcfinish==1)
                            ui->Save_Btn_6->setDisabled(false);
                        else
                            ui->Save_Btn_6->setDisabled(true);
                    }
                    else
                        ui->Save_Btn_6->setDisabled(false);
                }
                ui->Home_Btn_3->setVisible(true);
                ui->Home_Btn_3->setDisabled(false);
                ui->comboBox_2->setDisabled(false);
                ui->Retest_5->setDisabled(false);
            }

            else
            {
                double od1=0,od2=0,od4=0,dod=0,dod1=0, dod4=0 ,dod5=0,dod6=0;
                od4=ui->label_240->text().toDouble();
                od1=ui->label_120->text().toDouble();
                od2=ui->label_122->text().toDouble();
                dod=od2-od1; // Samp OD 1
                dod1=abs(dod);
                ui->label_234->setText(QString::number(dod1, 'f', 4));
                dod6=ui->label_234->text().toDouble();
                QString s = QString::number(dod6);
                QByteArray ary;
                ary.append(s);
                QString Neg ="-";
                QByteArray ary1;
                ary1.append(Neg);
                qDebug()<<"Ary[0] : "<<ary[0];
                if(ary[0]==ary1[0])
                    ui->label_276->setText("0");
                else
                {
                    dod4=  dod6 * fct; //Sample OD * Fact Value
                    dod5 = abs(dod4);//Result
                    QString Value = QString::number(dod5);
                    if(Value=="inf")
                        ui->label_276->setText("0"); // Calibrate Factor Value
                    else if(dod5<100)
                        ui->label_276->setText(QString::number(dod5, 'f' , 2));
                    else if(dod5>100)
                        ui->label_276->setText(QString::number(dod5, 'f' , 0));
                }

            }
            float val = ui->label_276->text().toFloat();
            float min = ui->label_277->text().toFloat();
            float max = ui->label_278->text().toFloat();

            ui->label_256->setVisible(true);
            if(val<=max && val>=min)
            {
                ui->label_256->setText("QC - Within Range");
                ui->label_256->setStyleSheet("QLabel {color : green;}");
                ui->pushButton_189->setVisible(true);
                ui->pushButton_190->setVisible(false);
            }
            else
            {
                ui->label_256->setText("QC - Without Range");
                ui->label_256->setStyleSheet("QLabel {color : red;}");
                ui->pushButton_189->setVisible(false);
                ui->pushButton_190->setVisible(true);
            }
            ui->TP_QC_Check->setDisabled(false);
            if(twopointsavebtn==1)
                ui->Save_Btn_6->setDisabled(true);
            else
            {    if(tworuncal==1)
                {
                    if(twoqcfinish==1)
                        ui->Save_Btn_6->setDisabled(false);
                    else
                        ui->Save_Btn_6->setDisabled(true);
                }
                else
                    ui->Save_Btn_6->setDisabled(false);
            }
            ui->RunCal_Btn_2->setDisabled(false);
            ui->RunSample_Btn_2->setDisabled(false);
            ui->Home_Btn_3->setVisible(true);
            ui->Home_Btn_3->setDisabled(false);
            ui->Stop_Btn_2->setDisabled(true);
            ui->comboBox_2->setDisabled(false);
            ui->Retest_5->setDisabled(false);
            twoqc_Graph();
        }
    }
}

void MainWindow::twoqc_Graph()
{
    ui->label_45->setText("");
    QString cmbox= ui->comboBox_2->currentText();
    QPixmap pixmap = ui->customPlot->grab();
    if(cmbox=="QC - 1")
    {
        if(Multi_calibration==1)
            pixmap = ui->customPlot_4->grab();
        else if(Multi_calibration==2)
            pixmap = ui->customPlot->grab();

        if(Obj_data==1)
            pixmap.save("/home/pi/FKQC1Plot.png");
        else if(Obj_data==2)
            pixmap.save("/home/pi/KQC1Plot.png");

        Two_qc1_opt=1;
        Two_qc2_opt=0;
        FKQC1printopt=1;
        QC1Conc=ui->label_276->text();
        QC1OD=ui->label_234->text();
        QC2Conc="";
        QC2OD="";
        Unit=ui->label_272->text();
        Dateee=ui->SysDate_Lbl->text();
        Timeee=ui->SysTime_Lbl->text();
        QC1= ui->label_276->text().toDouble();
        QCMin = ui->label_277->text();
        QCMax = ui->label_278->text();
        QSqlQuery q;
        q.prepare("select ctrl1bno from test where name='"+TestName+"'");
        q.exec();
        while(q.next())
            LotNo=q.value(0).toString();
        EndQC1_Func();
    }
    else if(cmbox=="QC - 2")
    {
        if(Multi_calibration==1)
            pixmap = ui->customPlot_4->grab();
        else if(Multi_calibration==2)
            pixmap = ui->customPlot->grab();

        if(Obj_data==1)
            pixmap.save("/home/pi/FKQC2Plot.png");
        else if(Obj_data==2)
            pixmap.save("/home/pi/KQC2Plot.png");
        Two_qc2_opt=1;
        Two_qc1_opt=0;
        FKQC2printopt=1;
        QC2Conc=ui->label_276->text();
        QC2OD=ui->label_234->text();
        QC1Conc="";
        QC1OD="";
        Unit=ui->label_272->text();
        Dateee=ui->SysDate_Lbl->text();
        Timeee=ui->SysTime_Lbl->text();
        QC2= ui->label_276->text().toDouble();
        QCMin = ui->label_277->text();
        QCMax = ui->label_278->text();
        QSqlQuery q;
        q.prepare("select ctrl2bno from test where name='"+TestName+"'");
        q.exec();
        while(q.next())
            LotNo=q.value(0).toString();
        EndQC2_Func();
    }
}
void MainWindow::kineticblankcalc()
{
    if(option==7)
    {
        QString TestName = ui->TestName_Lbl->text();
        QSqlQuery query;
        QString Blankval;
        int blnkval = 0;
        Blankval = char (blnkval);
        Blankval = ui->label->text();
        query.prepare("update test set blnkval='"+Blankval+"' where name='"+TestName+"'");
        if(query.exec())
        {
        }
        else
        {
        }
        ui->Home_Btn_3->setVisible(true);
        ui->Home_Btn_3->setDisabled(false);
    }
}
void MainWindow::Kineticcalfirstpoint1()
{
    if(option==8)           //Kinetic Calibrate -Calc
    {
        double od5,od6,  dod1 , dod2 ;

        od5=ui->label_194->text().toDouble();    //A2
        od6=ui->label_195->text().toDouble();    //A3
        if(val==2)
        {
            ui->label_99->setVisible(false);
            ui->label_132->setVisible(false);
            ui->label_106->setVisible(false);
            ui->label_121->setVisible(false);
            ui->label_123->setVisible(false);
            ui->label_125->setVisible(false);
            ui->label_194->setVisible(true);
            ui->label_195->setVisible(true);
            ui->label_198->setVisible(true);
            ui->label_97->setVisible(true);
            ui->label_98->setVisible(true);
            ui->label_127->setVisible(true);
            ui->label_128->setVisible(true);
            if(Multi_calibration==1)
            {
                od5=ui->label_346->text().toDouble();    //A2
                od6=ui->label_347->text().toDouble();    //A3
                dod1=od6-od5;
                dod2=abs(dod1);
                ui->label_173->setText(QString::number(dod2, 'f', 4)); //Abs1
                qDebug()<<"Abs1 : "<<dod2;
            }
            else if(Multi_calibration==2)
            {
                od5=ui->label_194->text().toDouble();    //A2
                od6=ui->label_195->text().toDouble();    //A3
                dod1=od6-od5;
                dod2=abs(dod1);
                ui->label_127->setText(QString::number(dod2, 'f', 4));
            }
        }

    }
}
void MainWindow::Kineticcalfirstpoint2()
{
    if(option==8)           //Kinetic Calibrate -Calc
    {
        double od1 , od2 ,dod5 , dod6 ;
        od1=ui->label_106->text().toDouble();    //A1
        od2=ui->label_121->text().toDouble();    //A2

        if(val==3)
        {
            ui->label_99->setVisible(true);
            ui->label_132->setVisible(true);
            ui->label_97->setVisible(true);
            ui->label_98->setVisible(true);
            ui->label_127->setVisible(true);
            ui->label_128->setVisible(true);

            ui->label_125->setVisible(true);
            ui->label_106->setVisible(true);
            ui->label_121->setVisible(true);
            ui->label_123->setVisible(true);
            ui->label_194->setVisible(false);
            ui->label_195->setVisible(false);
            ui->label_198->setVisible(false);
            if(Multi_calibration==1)
            {
                od1=ui->label_166->text().toDouble();    //A1
                od2=ui->label_167->text().toDouble();    //A2
                dod5=od2-od1;
                dod6=abs(dod5);
                ui->label_173->setText(QString::number(dod6, 'f', 4));
            }
            else if(Multi_calibration==2)
            {
                od1=ui->label_106->text().toDouble();    //A1
                od2=ui->label_121->text().toDouble();    //A2
                dod5=od2-od1;
                dod6=abs(dod5);
                ui->label_127->setText(QString::number(dod6, 'f', 4));
            }
        }
    }
}


void MainWindow::Kineticcalsecondpoint1()
{
    QPixmap pixmap;
    if(Multi_calibration==1)
        pixmap = ui->customPlot_4->grab();
    else if(Multi_calibration==2)
        pixmap = ui->customPlot->grab();
    pixmap.save("/home/pi/KCPlot.png");

    if(option==8)           //Kinetic Calibrate -Calc
    {
        double od6,od7, dod = 0.0 ,dod2 , dod3 , dod4 ,dod11 , dod12 , fact;

        if(val==2)
        {
            ui->label_99->setVisible(false);
            ui->label_132->setVisible(false);
            ui->label_106->setVisible(false);
            ui->label_121->setVisible(false);
            ui->label_123->setVisible(false);
            ui->label_125->setVisible(false);
            ui->label_194->setVisible(true);
            ui->label_195->setVisible(true);
            ui->label_198->setVisible(true);
            ui->label_97->setVisible(true);
            ui->label_98->setVisible(true);
            ui->label_127->setVisible(true);
            ui->label_128->setVisible(true);
            if(Multi_calibration==1)
            {
                od6=ui->label_347->text().toDouble();    //A3
                od7=ui->label_348->text().toDouble();    //A4
                dod2=ui->label_173->text().toDouble();
                dod3=od7-od6;
                dod4=abs(dod3);
                ui->label_175->setText(QString::number(dod4, 'f', 4));
                dod = (dod2+dod4)/2;
                dod11=abs(dod); // Cal OD Value
                ui->Abs_lbl->setText(QString::number(dod11, 'f', 4));
                dod12=ui->Abs_lbl->text().toDouble();
                fact = conct / dod12;//need to check
                qDebug()<<"Cal stop";
                QString Value = QString::number(fact);
                if(Value=="inf")
                    ui->Fact_lbl->setText("0"); // Calibrate Factor Value
                else if(fact<100)
                    ui->Fact_lbl->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
                else if(fact>100)
                    ui->Fact_lbl->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value

                ui->Conc_lbl->setText(QString::number(conct));

                QString Abs,Fact;
                Abs=ui->Abs_lbl->text();
                Fact=ui->Fact_lbl->text();
                QSqlQuery qy;
                if(cal_retest==1)
                    qy.prepare("update test set Abs1='"+Abs+"',Fact1='"+Fact+"' where name='"+TestName+"'");
                else if(cal_retest==2)
                    qy.prepare("update test set Abs2='"+Abs+"',Fact2='"+Fact+"' where name='"+TestName+"'");
                else if(cal_retest==3)
                    qy.prepare("update test set Abs3='"+Abs+"',Fact3='"+Fact+"' where name='"+TestName+"'");
                else if(cal_retest==4)
                    qy.prepare("update test set Abs4='"+Abs+"',Fact4='"+Fact+"' where name='"+TestName+"'");
                else if(cal_retest==5)
                    qy.prepare("update test set Abs5='"+Abs+"',Fact5='"+Fact+"' where name='"+TestName+"'");
                else if(cal_retest==6)
                    qy.prepare("update test set Abs6='"+Abs+"',Fact6='"+Fact+"' where name='"+TestName+"'");
                else if(cal_retest==7)
                    qy.prepare("update test set Abs7='"+Abs+"',Fact7='"+Fact+"' where name='"+TestName+"'");
                else if(cal_retest==8)
                    qy.prepare("update test set Abs8='"+Abs+"',Fact8='"+Fact+"' where name='"+TestName+"'");
                qy.exec();

                ui->Stop_Btn_3->setDisabled(true);
                ui->toolButton_57->setDisabled(false);
                ui->toolButton_61->setDisabled(false);
                ui->toolButton_63->setDisabled(false);
                ui->toolButton_58->setDisabled(false);
                ui->toolButton_60->setDisabled(false);
                ui->toolButton_64->setDisabled(false);
                ui->toolButton_59->setDisabled(false);
                ui->toolButton_62->setDisabled(false);
                ui->toolButton_39->setDisabled(false);
                ui->Retest_6->setDisabled(false);
                ui->Home_Btn_25->setDisabled(false);
            }
            else if(Multi_calibration==2)
            {
                od6=ui->label_195->text().toDouble();    //A3
                od7=ui->label_198->text().toDouble();    //A4
                dod2=ui->label_127->text().toDouble();
                dod3=od7-od6;
                dod4=abs(dod3);
                ui->label_128->setText(QString::number(dod4, 'f', 4));
                dod = (dod2+dod4)/2;
                dod11=abs(dod); // Cal OD Value
                ui->label_76->setText(QString::number(dod11, 'f', 4));
                dod12=ui->label_76->text().toDouble();
                fact = concen / dod12;//need to check
                qDebug()<<"Cal stop";
                QString Value = QString::number(fact);
                if(Value=="inf")
                {
                    ui->label_34->setText("0"); // Calibrate Factor Value
                    ui->label_240->setText("0"); // Calibrate Factor Value
                }
                else if(fact<100)
                {
                    ui->label_240->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
                    ui->label_34->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
                }
                else if(fact>100)
                {
                    ui->label_240->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value
                    ui->label_34->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value
                }
            }
        }

        ui->Home_Btn_3->setVisible(true);
        ui->Home_Btn_3->setDisabled(false);
        ui->comboBox_2->setDisabled(false);
        ui->Retest_5->setDisabled(false);
        // QThread::msleep(200);
        // Two_cal_print_image();
    }
    ui->Save_Btn_6->setVisible(true);
}

void MainWindow::Kineticcalsecondpoint2()
{
    if(option==8)           //Kinetic Calibrate -Calc
    {
        //ui->Save_Btn_6->setVisible(true);
        double  od2 , od3 ,   dod7 , dod8 ;
        od2=ui->label_121->text().toDouble();    //A2
        od3=ui->label_123->text().toDouble();    //A3

        if(val==3)
        {
            ui->label_99->setVisible(true);
            ui->label_132->setVisible(true);
            ui->label_97->setVisible(true);
            ui->label_98->setVisible(true);
            ui->label_127->setVisible(true);
            ui->label_128->setVisible(true);

            ui->label_125->setVisible(true);
            ui->label_106->setVisible(true);
            ui->label_121->setVisible(true);
            ui->label_123->setVisible(true);
            ui->label_194->setVisible(false);
            ui->label_195->setVisible(false);
            ui->label_198->setVisible(false);
            if(Multi_calibration==1)
            {
                od2=ui->label_167->text().toDouble();    //A2
                od3=ui->label_168->text().toDouble();    //A3
                dod7=od3-od2;
                dod8=abs(dod7);
                ui->label_175->setText(QString::number(dod8, 'f', 4));
            }
            else if(Multi_calibration==2)
            {
                od2=ui->label_121->text().toDouble();    //A2
                od3=ui->label_123->text().toDouble();    //A3
                dod7=od3-od2;
                dod8=abs(dod7);
                ui->label_128->setText(QString::number(dod8, 'f', 4));
            }
        }
    }
}

void MainWindow::Kineticcalthirdpoint1()
{
    QPixmap pixmap;
    if(Multi_calibration==1)
        pixmap = ui->customPlot_4->grab();
    else if(Multi_calibration==2)
        pixmap = ui->customPlot->grab();

    if(option==8)           //Kinetic Calibrate -Calc
    {
        double od3, od4 , dod =0.0, dod6 ,  dod8 ,dod9,dod10 ,dod11,dod12,fact;

        od3=ui->label_123->text().toDouble();    //A3
        od4=ui->label_125->text().toDouble();    //A4
        dod6=ui->label_127->text().toDouble();
        dod8=ui->label_128->text().toDouble();

        if(val==3)
        {
            ui->label_99->setVisible(true);
            ui->label_132->setVisible(true);
            ui->label_97->setVisible(true);
            ui->label_98->setVisible(true);
            ui->label_127->setVisible(true);
            ui->label_128->setVisible(true);
            ui->label_125->setVisible(true);
            ui->label_106->setVisible(true);
            ui->label_121->setVisible(true);
            ui->label_123->setVisible(true);
            ui->label_194->setVisible(false);
            ui->label_195->setVisible(false);
            ui->label_198->setVisible(false);
            if(Multi_calibration==1)
            {
                od3=ui->label_168->text().toDouble();    //A3
                od4=ui->label_171->text().toDouble();    //A4
                dod6=ui->label_173->text().toDouble();
                dod8=ui->label_175->text().toDouble();
                dod9=od4-od3;
                dod10=abs(dod9);
                ui->label_177->setText(QString::number(dod10, 'f', 4));
                dod = (dod6+dod8+dod10)/3; //Avg
                dod11=abs(dod); // Cal OD Value
                ui->Abs_lbl->setText(QString::number(dod11, 'f', 4));
                dod12=ui->Abs_lbl->text().toDouble();
                fact = conct / dod12;//need to check
                QString Value = QString::number(fact);
                if(Value=="inf")
                    ui->Fact_lbl->setText("0"); // Calibrate Factor Value
                else if(fact<100)
                    ui->Fact_lbl->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
                else if(fact>100)
                    ui->Fact_lbl->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value

                ui->Conc_lbl->setText(QString::number(conct));
                QString Abs,Fact;
                Abs=ui->Abs_lbl->text();
                Fact=ui->Fact_lbl->text();
                QSqlQuery qy;
                if(cal_retest==1)
                    qy.prepare("update test set Abs1='"+Abs+"',Fact1='"+Fact+"' where name='"+TestName+"'");
                else if(cal_retest==2)
                    qy.prepare("update test set Abs2='"+Abs+"',Fact2='"+Fact+"' where name='"+TestName+"'");
                else if(cal_retest==3)
                    qy.prepare("update test set Abs3='"+Abs+"',Fact3='"+Fact+"' where name='"+TestName+"'");
                else if(cal_retest==4)
                    qy.prepare("update test set Abs4='"+Abs+"',Fact4='"+Fact+"' where name='"+TestName+"'");
                else if(cal_retest==5)
                    qy.prepare("update test set Abs5='"+Abs+"',Fact5='"+Fact+"' where name='"+TestName+"'");
                else if(cal_retest==6)
                    qy.prepare("update test set Abs6='"+Abs+"',Fact6='"+Fact+"' where name='"+TestName+"'");
                else if(cal_retest==7)
                    qy.prepare("update test set Abs7='"+Abs+"',Fact7='"+Fact+"' where name='"+TestName+"'");
                else if(cal_retest==8)
                    qy.prepare("update test set Abs8='"+Abs+"',Fact8='"+Fact+"' where name='"+TestName+"'");
                qy.exec();

                ui->Stop_Btn_3->setDisabled(true);
                ui->toolButton_57->setDisabled(false);
                ui->toolButton_61->setDisabled(false);
                ui->toolButton_63->setDisabled(false);
                ui->toolButton_58->setDisabled(false);
                ui->toolButton_60->setDisabled(false);
                ui->toolButton_64->setDisabled(false);
                ui->toolButton_59->setDisabled(false);
                ui->toolButton_62->setDisabled(false);
                ui->toolButton_39->setDisabled(false);
                //   ui->toolButton_40->setDisabled(false);
                ui->Retest_6->setDisabled(false);
                ui->Home_Btn_25->setDisabled(false);


            }
            else if(Multi_calibration==2)
            {
                od3=ui->label_123->text().toDouble();    //A3
                od4=ui->label_125->text().toDouble();    //A4
                dod6=ui->label_127->text().toDouble();
                dod8=ui->label_128->text().toDouble();
                dod9=od4-od3;
                dod10=abs(dod9);
                ui->label_132->setText(QString::number(dod10, 'f', 4));
                dod = (dod6+dod8+dod10)/3; //Avg
                dod11=abs(dod); // Cal OD Value
                ui->label_76->setText(QString::number(dod11, 'f', 4));
                dod12=ui->label_76->text().toDouble();
                fact = concen / dod12;//need to check
                QString Value = QString::number(fact);
                if(Value=="inf")
                {
                    ui->label_240->setText("0"); // Calibrate Factor Value
                    ui->label_34->setText("0"); // Calibrate Factor Value
                }
                else if(fact<100)
                {
                    ui->label_240->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
                    ui->label_34->setText(QString::number(fact, 'f' , 2)); // Calibrate Factor Value
                }
                else if(fact>100)
                {
                    ui->label_240->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value
                    ui->label_34->setText(QString::number(fact, 'f' , 0)); // Calibrate Factor Value
                }
            }
        }

        ui->Stop_Btn_2->setDisabled(true);
        ui->Save_Btn_6->setDisabled(false);
        ui->Home_Btn_3->setVisible(true);
        ui->Home_Btn_3->setDisabled(false);
        ui->comboBox_2->setDisabled(false);
        ui->Retest_5->setDisabled(false);
        ui->RunCal_Btn_2->setEnabled(true);
        ui->RunSample_Btn_2->setEnabled(true);
        ui->TP_QC_Check->setEnabled(true);
        // QThread::msleep(200);
        // Two_cal_print_image();
        //kineticcalsavefunc();
        ui->Save_Btn_6->setVisible(true);
    }
}

void MainWindow::Kineticsampfirstpoint1()
{
    if(option==9)                  //Kinetic Sample Calc
    {
        ui->label_204->setText("");
        double od5,od6,  dod1=0.0, dod2 ;
        double dod16=0.0, dod17=0.0;

        od5=ui->label_194->text().toDouble();    //A2
        od6=ui->label_195->text().toDouble();    //A3

        if(fct == 0.0)
        {
            if(val==2)
            {
                ui-> label_203->setText("ΔA/min");
                ui->label_106->setVisible(false);
                ui->label_121->setVisible(false);
                ui->label_123->setVisible(false);
                ui->label_125->setVisible(false);
                ui->label_194->setVisible(true);
                ui->label_195->setVisible(true);
                ui->label_198->setVisible(true);
                dod1=od6-od5;
                dod2=abs(dod1);
                ui->label_127->setText(QString::number(dod2, 'f', 4));
            }
        }
        else
        {
            if(val==2)
            {
                ui->label_99->setVisible(false);
                ui->label_132->setVisible(false);
                ui->label_106->setVisible(false);
                ui->label_121->setVisible(false);
                ui->label_123->setVisible(false);
                ui->label_125->setVisible(false);
                ui->label_194->setVisible(true);
                ui->label_195->setVisible(true);
                ui->label_198->setVisible(true);
                ui-> label_203->setText("ΔA/min");
                dod16=od6-od5;
                dod17=abs(dod16);
                ui->label_127->setText(QString::number(dod17, 'f', 4));
            }
        }
    }
}
void MainWindow::Kineticsampfirstpoint2()
{
    if(option==9)                  //Kinetic Sample Calc
    {
        ui->label_204->setText("");
        double od1 , od2 , dod5 , dod6 ;
        double dod20=0.0 , dod21=0.0;
        od1=ui->label_106->text().toDouble();    //A1
        od2=ui->label_121->text().toDouble();    //A2

        if(fct == 0.0)
        {
            if(val==3)
            {
                ui->label_99->setVisible(true);
                ui->label_132->setVisible(true);
                ui->label_97->setVisible(true);
                ui->label_98->setVisible(true);
                ui->label_127->setVisible(true);
                ui->label_128->setVisible(true);
                ui->label_106->setVisible(true);
                ui->label_121->setVisible(true);
                ui->label_123->setVisible(true);
                ui->label_125->setVisible(true);
                ui->label_194->setVisible(false);
                ui->label_195->setVisible(false);
                ui->label_198->setVisible(false);
                ui-> label_203->setText("ΔA/min");
                dod5=od2-od1;
                dod6=abs(dod5);
                ui->label_127->setText(QString::number(dod6, 'f', 4));
            }
        }
        else
        {
            if(val==3)
            {
                ui->label_106->setVisible(true);
                ui->label_121->setVisible(true);
                ui->label_123->setVisible(true);
                ui->label_125->setVisible(true);
                ui->label_194->setVisible(false);
                ui->label_195->setVisible(false);
                ui->label_198->setVisible(false);
                ui-> label_203->setText("ΔA/min");
                dod20=od2-od1;
                dod21=abs(dod20);
                ui->label_127->setText(QString::number(dod21, 'f', 4));
            }
        }
    }
}

void MainWindow::Kineticsampsecondpoint1()
{
    if(option==9)                  //Kinetic Sample Calc
    {
        ui->label_204->setText("");
        double od6,od7, dod =0.0,  dod2 , dod3 , dod4 ,dod11,dod12,dod14,dod15;
        double dod18=0.0 , dod19=0.0 ;
        if(Multi_calibration==1)
        {
            od6=ui->label_195->text().toDouble();    //A3
            od7=ui->label_198->text().toDouble();    //A4
            dod2=ui->label_127->text().toDouble();
            if(val==2)
            {
                ui-> label_203->setText("ΔA/min");
                ui->label_106->setVisible(false);
                ui->label_121->setVisible(false);
                ui->label_123->setVisible(false);
                ui->label_125->setVisible(false);
                ui->label_194->setVisible(true);
                ui->label_195->setVisible(true);
                ui->label_198->setVisible(true);
                ui->label_97->setVisible(true);
                ui->label_98->setVisible(true);
                ui->label_127->setVisible(true);
                ui->label_128->setVisible(true);
                dod3=od7-od6;
                dod4=abs(dod3);
                ui->label_128->setText(QString::number(dod4, 'f', 4));
                dod= (dod2+dod4)/2;
            }
            dod11=abs(dod);
            ui->label_204->setText(QString::number(dod11, 'f', 4));
            // double od4=ui->label_34->text().toDouble();
            dod12=ui->label_204->text().toDouble();
            linearity();
        }
        else if(Multi_calibration==2)
        {
            od6=ui->label_195->text().toDouble();    //A3
            od7=ui->label_198->text().toDouble();    //A4
            dod2=ui->label_127->text().toDouble();
            if(fct == 0.0)
            {
                if(val==2)
                {
                    ui-> label_203->setText("ΔA/min");
                    ui->label_106->setVisible(false);
                    ui->label_121->setVisible(false);
                    ui->label_123->setVisible(false);
                    ui->label_125->setVisible(false);
                    ui->label_194->setVisible(true);
                    ui->label_195->setVisible(true);
                    ui->label_198->setVisible(true);
                    ui->label_97->setVisible(true);
                    ui->label_98->setVisible(true);
                    ui->label_127->setVisible(true);
                    ui->label_128->setVisible(true);
                    dod3=od7-od6;
                    dod4=abs(dod3);
                    ui->label_128->setText(QString::number(dod4, 'f', 4));
                    dod= (dod2+dod4)/2;
                }
                dod11=abs(dod);
                ui->label_204->setText(QString::number(dod11, 'f', 4));
                // double od4=ui->label_34->text().toDouble();
                dod12=ui->label_204->text().toDouble();
                dod14= fct*dod12; // Sample OD * Factor Value
                dod15 = abs(dod14);
                QString Value = QString::number(dod15);
                if(Value=="inf")
                {
                    ui->label_33->setText("0"); // Calibrate Factor Value
                    ui->label_50->setText("0"); // Calibrate Factor Value
                }
                else if(dod15<100)
                {
                    ui->label_33->setText(QString::number(dod15, 'f' , 2));
                    ui->label_50->setText(QString::number(dod15, 'f' , 2));
                }
                else if(dod15>100)
                {
                    ui->label_33->setText(QString::number(dod15, 'f' , 0));
                    ui->label_50->setText(QString::number(dod15, 'f' , 0));
                }

            }
            else

            {
                if(val==2)
                {
                    ui->label_99->setVisible(false);
                    ui->label_132->setVisible(false);
                    ui->label_106->setVisible(false);
                    ui->label_121->setVisible(false);
                    ui->label_123->setVisible(false);
                    ui->label_125->setVisible(false);
                    ui->label_194->setVisible(true);
                    ui->label_195->setVisible(true);
                    ui->label_198->setVisible(true);
                    ui-> label_203->setText("ΔA/min");
                    dod18=od7-od6;
                    dod19=abs(dod18);
                    ui->label_128->setText(QString::number(dod19, 'f', 4));
                    dod= (dod2+dod19)/2;
                }
                dod11=abs(dod);
                ui->label_204->setText(QString::number(dod11, 'f', 4));
                dod12=ui->label_204->text().toDouble();
                // double od4=ui->label_240->text().toDouble();
                dod14= fct*dod12; // Sample OD * Factor Value
                dod15 = abs(dod14);
                QString Value = QString::number(dod15);
                if(Value=="inf")
                {
                    ui->label_33->setText("0"); // Calibrate Factor Value
                    ui->label_50->setText("0"); // Calibrate Factor Value
                }
                else if(dod15<100)
                {
                    ui->label_33->setText(QString::number(dod15, 'f' , 2));
                    ui->label_50->setText(QString::number(dod15, 'f' , 2));
                }
                else if(dod15>100)
                {
                    ui->label_33->setText(QString::number(dod15, 'f' , 0));
                    ui->label_50->setText(QString::number(dod15, 'f' , 0));
                }

            }
        }
        QThread::msleep(1000);
        ui->stackedWidget->setCurrentIndex(17);
        text="";
        if(kineticsavebtn==1)
            ui->Save_Btn_6->setDisabled(true);
        else
        {    if(kineticrunsamp==1)
            {
                if(kineticsampfinish==1)
                    ui->Save_Btn_6->setDisabled(false);
                else
                    ui->Save_Btn_6->setDisabled(true);
            }
            else
                ui->Save_Btn_6->setDisabled(false);
        }
        ui->EndPoint_Save_Btn->setVisible(false);
        if (ui->radioButton_5->isChecked())
        {
            ui->radioButton_5->setAutoExclusive(false);
            ui->radioButton_5->setEnabled(true);
            qDebug()<<"kin Male btn ";
            ui->radioButton_5->setChecked(false);
            ui->radioButton_5->setAutoExclusive(true);
        }
        else if (ui->radioButton_6->isChecked())
        {
            ui->radioButton_6->setAutoExclusive(false);
            ui->radioButton_6->setEnabled(true);
            ui->radioButton_6->setChecked(false);
            qDebug()<<"kin feMale btn ";
            ui->radioButton_6->setAutoExclusive(true);
        }
        else if (ui->radioButton_7->isChecked())
        {
            ui->radioButton_7->setAutoExclusive(false);
            ui->radioButton_7->setEnabled(true);
            ui->radioButton_7->setChecked(false);
            qDebug()<<"kin trans btn ";
            ui->radioButton_7->setAutoExclusive(true);
        }
        ui->EndPoint_Save_Btn->setDisabled(false);
        ui->EndPoint_Save_Btn->setVisible(true);
        ui->EndPoint_Print_Btn->setVisible(true);
        ui->EndPoint_Print_Btn->setDisabled(false);
        ui->comboBox_2->setDisabled(false);
        ui->Retest_5->setDisabled(false);
        ui->Home_Btn_11->setVisible(false);
        ui->Home_Btn_18->setVisible(false);
        ui->Home_Btn_19->setVisible(true);
        ui->label_267->setText(TestName);
        ui->PatientInfo_LineEdit->clear();
        ui->Patient_Name->clear();
        ui->Patient_Age->clear();
        ui->PatientInfo_LineEdit->setFocus();
        ui->Stop_Btn_2->setDisabled(true);
        ui->Print_Btn->setDisabled(false);
        ui->Home_Btn_3->setVisible(true);
        ui->Home_Btn_3->setDisabled(false);
        ui->RunCal_Btn_2->setEnabled(true);
        ui->RunSample_Btn_2->setEnabled(true);
        ui->TP_QC_Check->setEnabled(true);
    }
}

void MainWindow::Kineticsampsecondpoint2()
{
    if(option==9)                  //Kinetic Sample Calc
    {
        ui->label_204->setText("");
        double  od2 , od3 ,  dod7 , dod8 ;
        double  dod22=0.0 , dod23=0.0 ;
        od2=ui->label_121->text().toDouble();    //A2
        od3=ui->label_123->text().toDouble();    //A3
        if(fct == 0.0)
        {
            if(val==3)
            {
                ui->label_99->setVisible(true);
                ui->label_132->setVisible(true);
                ui->label_97->setVisible(true);
                ui->label_98->setVisible(true);
                ui->label_127->setVisible(true);
                ui->label_128->setVisible(true);
                ui->label_106->setVisible(true);
                ui->label_121->setVisible(true);
                ui->label_123->setVisible(true);
                ui->label_125->setVisible(true);
                ui->label_194->setVisible(false);
                ui->label_195->setVisible(false);
                ui->label_198->setVisible(false);
                ui-> label_203->setText("ΔA/min");
                dod7=od3-od2;
                dod8=abs(dod7);
                ui->label_128->setText(QString::number(dod8, 'f', 4));
            }
        }
        else
        {
            if(val==3)
            {
                ui->label_99->setVisible(true);
                ui->label_132->setVisible(true);
                ui->label_98->setVisible(true);
                ui->label_128->setVisible(true);
                ui->label_97->setVisible(true);
                ui->label_127->setVisible(true);
                ui->label_106->setVisible(true);
                ui->label_121->setVisible(true);
                ui->label_123->setVisible(true);
                ui->label_125->setVisible(true);
                ui->label_194->setVisible(false);
                ui->label_195->setVisible(false);
                ui->label_198->setVisible(false);
                ui-> label_203->setText("ΔA/min");
                dod22=od3-od2;
                dod23=abs(dod22);
                ui->label_128->setText(QString::number(dod23, 'f', 4));
            }
        }
    }
}

void MainWindow::Kineticsampthirdpoint1()
{
    if(option==9)                  //Kinetic Sample Calc
    {
        ui->label_204->setText("");
        double od3 , od4 , dod =0.0,  dod6 , dod8 ,dod9,dod10 ,dod11,dod12,dod14,dod15;
        double dod24=0.0,dod25=0.0,dod26=0.0, dod27 ,dod29,dod30;
        od3=ui->label_123->text().toDouble();    //A3
        od4=ui->label_125->text().toDouble();    //A4
        dod6=ui->label_127->text().toDouble();
        dod8=ui->label_128->text().toDouble();
        if(Multi_calibration==1)
        {
            if(val==3)
            {
                ui->label_99->setVisible(true);
                ui->label_132->setVisible(true);
                ui->label_97->setVisible(true);
                ui->label_98->setVisible(true);
                ui->label_127->setVisible(true);
                ui->label_128->setVisible(true);
                ui->label_106->setVisible(true);
                ui->label_121->setVisible(true);
                ui->label_123->setVisible(true);
                ui->label_125->setVisible(true);
                ui->label_194->setVisible(false);
                ui->label_195->setVisible(false);
                ui->label_198->setVisible(false);
                ui-> label_203->setText("ΔA/min");
                dod9=od4-od3;
                dod10=abs(dod9);
                ui->label_132->setText(QString::number(dod10, 'f', 4));
                dod = (dod6+dod8+dod10)/3; //Avg
            }
            dod11=abs(dod);
            ui->label_204->setText(QString::number(dod11, 'f', 4));
            dod12=ui->label_204->text().toDouble();
            linearity();
        }
        else if(Multi_calibration==2)
        {
            if(fct == 0.0)
            {
                if(val==3)
                {
                    ui->label_99->setVisible(true);
                    ui->label_132->setVisible(true);
                    ui->label_97->setVisible(true);
                    ui->label_98->setVisible(true);
                    ui->label_127->setVisible(true);
                    ui->label_128->setVisible(true);
                    ui->label_106->setVisible(true);
                    ui->label_121->setVisible(true);
                    ui->label_123->setVisible(true);
                    ui->label_125->setVisible(true);
                    ui->label_194->setVisible(false);
                    ui->label_195->setVisible(false);
                    ui->label_198->setVisible(false);
                    ui-> label_203->setText("ΔA/min");
                    dod9=od4-od3;
                    dod10=abs(dod9);
                    ui->label_132->setText(QString::number(dod10, 'f', 4));
                    dod = (dod6+dod8+dod10)/3; //Avg
                }
                dod11=abs(dod);
                ui->label_204->setText(QString::number(dod11, 'f', 4));
                dod12=ui->label_204->text().toDouble();
                //double od4=ui->label_34->text().toDouble();
                dod14= dod12*fct; // Sample OD * Factor Value
                dod15 = abs(dod14);
                QString Value = QString::number(dod15);
                if(Value=="inf")
                {
                    ui->label_33->setText("0"); // Calibrate Factor Value
                    ui->label_50->setText("0"); // Calibrate Factor Value
                }
                else if(dod15<100)
                {
                    ui->label_33->setText(QString::number(dod15, 'f' , 2));
                    ui->label_50->setText(QString::number(dod15, 'f' , 2));
                }
                else if(dod15>100)
                {
                    ui->label_33->setText(QString::number(dod15, 'f' , 0));
                    ui->label_50->setText(QString::number(dod15, 'f' , 0));
                }
            }
            else
            {
                if(val==3)
                {
                    ui->label_99->setVisible(true);
                    ui->label_132->setVisible(true);
                    ui->label_98->setVisible(true);
                    ui->label_128->setVisible(true);
                    ui->label_97->setVisible(true);
                    ui->label_127->setVisible(true);
                    ui->label_106->setVisible(true);
                    ui->label_121->setVisible(true);
                    ui->label_123->setVisible(true);
                    ui->label_125->setVisible(true);
                    ui->label_194->setVisible(false);
                    ui->label_195->setVisible(false);
                    ui->label_198->setVisible(false);
                    ui-> label_203->setText("ΔA/min");
                    dod24=od4-od3;
                    dod25=abs(dod24);
                    ui->label_132->setText(QString::number(dod25, 'f', 4));
                    dod = (dod6+dod8+dod25)/3;
                }
                dod26=abs(dod);
                ui->label_204->setText(QString::number(dod26, 'f', 4));
                dod27=ui->label_204->text().toDouble();
                //double od4=ui->label_240->text().toDouble();
                dod29= dod27 * fct; // Sample OD * Fact
                dod30= abs(dod29);
                QString Value = QString::number(dod30);
                if(Value=="inf")
                {
                    ui->label_33->setText("0"); // Calibrate Factor Value
                    ui->label_50->setText("0"); // Calibrate Factor Value
                }
                else if(dod30<100)
                {
                    ui->label_33->setText(QString::number(dod30, 'f' , 2));
                    ui->label_50->setText(QString::number(dod30, 'f' , 2));
                }
                else if(dod30>100)
                {
                    ui->label_33->setText(QString::number(dod30, 'f' , 0));
                    ui->label_50->setText(QString::number(dod30, 'f' , 0));
                }

            }
        }
    }
    QThread::msleep(1000);
    ui->stackedWidget->setCurrentIndex(17);
    text="";
    if(kineticsavebtn==1)
        ui->Save_Btn_6->setDisabled(true);
    else
    {    if(kineticrunsamp==1)
        {
            if(kineticsampfinish==1)
                ui->Save_Btn_6->setDisabled(false);
            else
                ui->Save_Btn_6->setDisabled(true);
        }
        else
            ui->Save_Btn_6->setDisabled(false);
    }
    ui->EndPoint_Save_Btn->setVisible(false);
    if (ui->radioButton_5->isChecked())
    {
        ui->radioButton_5->setAutoExclusive(false);
        ui->radioButton_5->setEnabled(true);
        qDebug()<<"kin Male btn ";
        ui->radioButton_5->setChecked(false);
        ui->radioButton_5->setAutoExclusive(true);
    }
    else if (ui->radioButton_6->isChecked())
    {
        ui->radioButton_6->setAutoExclusive(false);
        ui->radioButton_6->setEnabled(true);
        ui->radioButton_6->setChecked(false);
        qDebug()<<"kin feMale btn ";
        ui->radioButton_6->setAutoExclusive(true);
    }
    else if (ui->radioButton_7->isChecked())
    {
        ui->radioButton_7->setAutoExclusive(false);
        ui->radioButton_7->setEnabled(true);
        ui->radioButton_7->setChecked(false);
        qDebug()<<"kin trans btn ";
        ui->radioButton_7->setAutoExclusive(true);
    }
    ui->EndPoint_Save_Btn->setDisabled(true);
    ui->EndPoint_Save_Btn->setVisible(true);
    ui->EndPoint_Print_Btn->setVisible(true);
    ui->EndPoint_Print_Btn->setDisabled(true);
    ui->Home_Btn_11->setVisible(false);
    ui->Home_Btn_18->setVisible(false);
    ui->Home_Btn_19->setVisible(true);
    ui->label_267->setText(TestName);
    ui->PatientInfo_LineEdit->clear();
    ui->Patient_Name->clear();
    ui->Patient_Age->clear();
    ui->PatientInfo_LineEdit->setFocus();
    ui->Stop_Btn_2->setDisabled(true);
    ui->Print_Btn->setDisabled(false);
    ui->Home_Btn_3->setVisible(true);
    ui->Home_Btn_3->setDisabled(false);
    ui->comboBox_2->setDisabled(false);
    ui->Retest_5->setDisabled(false);
    ui->RunCal_Btn_2->setEnabled(true);
    ui->RunSample_Btn_2->setEnabled(true);
    ui->TP_QC_Check->setEnabled(true);
}


void MainWindow::KineticQCsampfirstpoint1()
{
    if(option==14)                  //Kinetic Sample Calc
    {
        ui->label_203->setVisible(false);
        ui->label_204->setText("");
        double od5,od6,  dod1=0.0, dod2 ;
        double dod16=0.0, dod17=0.0;
        od5=ui->label_194->text().toDouble();    //A2
        od6=ui->label_195->text().toDouble();    //A3
        if(fct == 0.0)
        {
            if(val==2)
            {
                ui->label_106->setVisible(false);
                ui->label_121->setVisible(false);
                ui->label_123->setVisible(false);
                ui->label_125->setVisible(false);
                ui->label_194->setVisible(true);
                ui->label_195->setVisible(true);
                ui->label_198->setVisible(true);
                dod1=od6-od5;
                dod2=abs(dod1);
                ui->label_127->setText(QString::number(dod2, 'f', 4));
            }
        }
        else
        {
            if(val==2)
            {
                ui->label_99->setVisible(false);
                ui->label_132->setVisible(false);
                ui->label_106->setVisible(false);
                ui->label_121->setVisible(false);
                ui->label_123->setVisible(false);
                ui->label_125->setVisible(false);
                ui->label_194->setVisible(true);
                ui->label_195->setVisible(true);
                ui->label_198->setVisible(true);
                dod16=od6-od5;
                dod17=abs(dod16);
                ui->label_127->setText(QString::number(dod17, 'f', 4));
            }
        }
    }
}
void MainWindow::KineticQCsampfirstpoint2()
{
    if(option==14)                  //Kinetic Sample Calc
    {
        ui->label_204->setText("");
        double od1 , od2 , dod5 , dod6 ;
        double dod20=0.0 , dod21=0.0;
        od1=ui->label_106->text().toDouble();    //A1
        od2=ui->label_121->text().toDouble();    //A2
        if(fct == 0.0)
        {
            if(val==3)
            {
                ui->label_99->setVisible(true);
                ui->label_132->setVisible(true);
                ui->label_97->setVisible(true);
                ui->label_98->setVisible(true);
                ui->label_127->setVisible(true);
                ui->label_128->setVisible(true);

                ui->label_106->setVisible(true);
                ui->label_121->setVisible(true);
                ui->label_123->setVisible(true);
                ui->label_125->setVisible(true);
                ui->label_194->setVisible(false);
                ui->label_195->setVisible(false);
                ui->label_198->setVisible(false);
                dod5=od2-od1;
                dod6=abs(dod5);
                ui->label_127->setText(QString::number(dod6, 'f', 4));
            }
        }
        else
        {
            if(val==3)
            {
                ui->label_106->setVisible(true);
                ui->label_121->setVisible(true);
                ui->label_123->setVisible(true);
                ui->label_125->setVisible(true);
                ui->label_194->setVisible(false);
                ui->label_195->setVisible(false);
                ui->label_198->setVisible(false);
                //  ui-> label_203->setText("ΔA/min");
                dod20=od2-od1;
                dod21=abs(dod20);
                ui->label_127->setText(QString::number(dod21, 'f', 4));
            }
        }
    }
}

void MainWindow::KineticQCsampsecondpoint1()
{
    if(option==14)                  //Kinetic Sample Calc
    {
        ui->label_204->setText("");
        double od6,od7, dod =0.0,  dod2 , dod3 , dod4 ,dod11,dod12,dod14,dod15;
        double dod18=0.0 , dod19=0.0 ;

        od6=ui->label_195->text().toDouble();    //A3
        od7=ui->label_198->text().toDouble();    //A4
        dod2=ui->label_127->text().toDouble();
        if(Multi_calibration==1)
        {
            if(val==2)
            {
                //   ui-> label_203->setText("ΔA/min");
                ui->label_106->setVisible(false);
                ui->label_121->setVisible(false);
                ui->label_123->setVisible(false);
                ui->label_125->setVisible(false);
                ui->label_194->setVisible(true);
                ui->label_195->setVisible(true);
                ui->label_198->setVisible(true);
                ui->label_97->setVisible(true);
                ui->label_98->setVisible(true);
                ui->label_127->setVisible(true);
                ui->label_128->setVisible(true);
                dod3=od7-od6;
                dod4=abs(dod3);
                ui->label_128->setText(QString::number(dod4, 'f', 4));
                dod= (dod2+dod4)/2;
            }
            dod11=abs(dod);
            ui->label_234->setText(QString::number(dod11, 'f', 4));
            linearity();
        }

        else if(Multi_calibration==2)
        {
            if(fct == 0.0)
            {
                if(val==2)
                {
                    //   ui-> label_203->setText("ΔA/min");
                    ui->label_106->setVisible(false);
                    ui->label_121->setVisible(false);
                    ui->label_123->setVisible(false);
                    ui->label_125->setVisible(false);
                    ui->label_194->setVisible(true);
                    ui->label_195->setVisible(true);
                    ui->label_198->setVisible(true);
                    ui->label_97->setVisible(true);
                    ui->label_98->setVisible(true);
                    ui->label_127->setVisible(true);
                    ui->label_128->setVisible(true);
                    dod3=od7-od6;
                    dod4=abs(dod3);
                    ui->label_128->setText(QString::number(dod4, 'f', 4));
                    dod= (dod2+dod4)/2;
                }
                dod11=abs(dod);
                ui->label_234->setText(QString::number(dod11, 'f', 4));
                dod12=ui->label_234->text().toDouble();
                QString s = QString::number(dod12);
                QByteArray ary;
                ary.append(s);
                QString Neg ="-";
                QByteArray ary1;
                ary1.append(Neg);
                qDebug()<<"Ary[0] : "<<ary[0];
                if(ary[0]==ary1[0])
                    ui->label_276->setText("0");
                else
                {
                    //double od4=ui->label_34->text().toDouble();
                    dod14= dod12*fct; // Sample OD * Factor Value
                    dod15 = abs(dod14);
                    QString Value = QString::number(dod15);
                    if(Value=="inf")
                        ui->label_276->setText("0"); // Calibrate Factor Value
                    else if(dod15<100)
                        ui->label_276->setText(QString::number(dod15, 'f' , 2));
                    else if(dod15>100)
                        ui->label_276->setText(QString::number(dod15, 'f' , 0));
                }

                float val = ui->label_276->text().toFloat();
                float min = ui->label_277->text().toFloat();
                float max = ui->label_278->text().toFloat();

                if(val<=max && val>=min)
                {
                    ui->label_256->setVisible(true);
                    ui->label_257->setVisible(false);
                }
                else
                {
                    ui->label_257->setVisible(true);
                    ui->label_256->setVisible(false);
                }
                ui->TP_QC_Check->setDisabled(false);

                QString vlll= ui->comboBox_2->currentText();
                if(kineticsavebtn==1)
                    ui->Save_Btn_6->setDisabled(true);
                else
                {    if(kineticruncal==1)
                    {
                        if(kineticqcfinish==1)
                            ui->Save_Btn_6->setDisabled(false);
                        else
                            ui->Save_Btn_6->setDisabled(true);
                    }
                    else
                        ui->Save_Btn_6->setDisabled(false);
                }
            }

            else
            {
                if(val==2)
                {
                    ui->label_99->setVisible(false);
                    ui->label_132->setVisible(false);
                    ui->label_106->setVisible(false);
                    ui->label_121->setVisible(false);
                    ui->label_123->setVisible(false);
                    ui->label_125->setVisible(false);
                    ui->label_194->setVisible(true);
                    ui->label_195->setVisible(true);
                    ui->label_198->setVisible(true);
                    //   ui-> label_203->setText("ΔA/min");
                    dod18=od7-od6;
                    dod19=abs(dod18);
                    ui->label_128->setText(QString::number(dod19, 'f', 4));
                    dod= (dod2+dod19)/2;
                }
                dod11=abs(dod);
                ui->label_234->setText(QString::number(dod11, 'f', 4));
                dod12=ui->label_234->text().toDouble();
                QString s = QString::number(dod12);
                QByteArray ary;
                ary.append(s);
                QString Neg ="-";
                QByteArray ary1;
                ary1.append(Neg);
                qDebug()<<"Ary[0] : "<<ary[0];
                if(ary[0]==ary1[0])
                    ui->label_276->setText("0");
                else
                {
                    //double od4=ui->label_240->text().toDouble();
                    dod14= dod12*fct; // Sample OD * Factor Value
                    dod15 = abs(dod14);
                    QString Value = QString::number(dod15);
                    if(Value=="inf")
                        ui->label_276->setText("0"); // Calibrate Factor Value
                    else if(dod15<100)
                        ui->label_276->setText(QString::number(dod15, 'f' , 2));
                    else if(dod15>100)
                        ui->label_276->setText(QString::number(dod15, 'f' , 0));
                }
                float val = ui->label_276->text().toFloat();
                float min = ui->label_277->text().toFloat();
                float max = ui->label_278->text().toFloat();

                ui->label_256->setVisible(true);
                if(val<=max && val>=min)
                {
                    ui->label_256->setText("QC - Within Range");
                    ui->label_256->setStyleSheet("QLabel {color : green;}");
                    ui->pushButton_189->setVisible(true);
                    ui->pushButton_190->setVisible(false);
                }
                else
                {
                    ui->label_256->setText("QC - Without Range");
                    ui->label_256->setStyleSheet("QLabel {color : red;}");
                    ui->pushButton_189->setVisible(false);
                    ui->pushButton_190->setVisible(true);
                }
                ui->TP_QC_Check->setDisabled(false);
                QString vlll= ui->comboBox_2->currentText();
                if(kineticsavebtn==1)
                    ui->Save_Btn_6->setDisabled(true);
                else
                {    if(kineticruncal==1)
                    {
                        if(kineticqcfinish==1)
                            ui->Save_Btn_6->setDisabled(false);
                        else
                            ui->Save_Btn_6->setDisabled(true);
                    }
                    else
                        ui->Save_Btn_6->setDisabled(false);
                }
                ui->Stop_Btn_2->setDisabled(true);
                ui->Home_Btn_3->setVisible(true);
                ui->Home_Btn_3->setDisabled(false);
                ui->comboBox_2->setDisabled(false);
                ui->Retest_5->setDisabled(false);
                ui->RunCal_Btn_2->setEnabled(true);
                ui->RunSample_Btn_2->setEnabled(true);
                ui->TP_QC_Check->setEnabled(true);
                twoqc_Graph();
            }
        }
    }
}
void MainWindow::KineticQCsampsecondpoint2()
{

    if(option==14)                  //Kinetic Sample Calc
    {
        ui->label_204->setText("");
        double  od2 , od3 ,  dod7 , dod8 ;
        double  dod22=0.0 , dod23=0.0 ;

        od2=ui->label_121->text().toDouble();    //A2
        od3=ui->label_123->text().toDouble();    //A3

        if(fct == 0.0)
        {

            if(val==3)
            {
                ui->label_99->setVisible(true);
                ui->label_132->setVisible(true);
                ui->label_97->setVisible(true);
                ui->label_98->setVisible(true);
                ui->label_127->setVisible(true);
                ui->label_128->setVisible(true);

                ui->label_106->setVisible(true);
                ui->label_121->setVisible(true);
                ui->label_123->setVisible(true);
                ui->label_125->setVisible(true);
                ui->label_194->setVisible(false);
                ui->label_195->setVisible(false);
                ui->label_198->setVisible(false);
                ui-> label_203->setText("ΔA/min");
                dod7=od3-od2;
                dod8=abs(dod7);
                ui->label_128->setText(QString::number(dod8, 'f', 4));
            }

        }
        else
        {
            if(val==3)
            {
                ui->label_99->setVisible(true);
                ui->label_132->setVisible(true);
                ui->label_98->setVisible(true);
                ui->label_128->setVisible(true);
                ui->label_97->setVisible(true);
                ui->label_127->setVisible(true);
                ui->label_106->setVisible(true);
                ui->label_121->setVisible(true);
                ui->label_123->setVisible(true);
                ui->label_125->setVisible(true);
                ui->label_194->setVisible(false);
                ui->label_195->setVisible(false);
                ui->label_198->setVisible(false);
                ui-> label_203->setText("ΔA/min");
                dod22=od3-od2;
                dod23=abs(dod22);
                ui->label_128->setText(QString::number(dod23, 'f', 4));
            }
        }
    }
}

void MainWindow::KineticQCsampthirdpoint1()
{
    if(option==14)                  //Kinetic QC Sample Calc
    {
        ui->label_204->setText("");
        double od3 , od4 , dod =0.0,  dod6 , dod8 ,dod9,dod10 ,dod11,dod12,dod14,dod15;
        double dod24=0.0,dod25=0.0,dod26=0.0, dod27 ,dod29,dod30;
        od3=ui->label_123->text().toDouble();    //A3
        od4=ui->label_125->text().toDouble();    //A4
        dod6=ui->label_127->text().toDouble();
        dod8=ui->label_128->text().toDouble();
        if(Multi_calibration==1)
        {
            if(val==3)
            {
                ui->label_99->setVisible(true);
                ui->label_132->setVisible(true);
                ui->label_97->setVisible(true);
                ui->label_98->setVisible(true);
                ui->label_127->setVisible(true);
                ui->label_128->setVisible(true);
                ui->label_106->setVisible(true);
                ui->label_121->setVisible(true);
                ui->label_123->setVisible(true);
                ui->label_125->setVisible(true);
                ui->label_194->setVisible(false);
                ui->label_195->setVisible(false);
                ui->label_198->setVisible(false);
                ui-> label_203->setText("ΔA/min");
                dod9=od4-od3;
                dod10=abs(dod9);
                ui->label_132->setText(QString::number(dod10, 'f', 4));
                dod = (dod6+dod8+dod10)/3; //Avg
            }
            dod11=abs(dod);
            ui->label_234->setText(QString::number(dod11, 'f', 4));
        }
        else if(Multi_calibration==2)
        {
            if(fct == 0.0)
            {
                if(val==3)
                {
                    ui->label_99->setVisible(true);
                    ui->label_132->setVisible(true);
                    ui->label_97->setVisible(true);
                    ui->label_98->setVisible(true);
                    ui->label_127->setVisible(true);
                    ui->label_128->setVisible(true);
                    ui->label_106->setVisible(true);
                    ui->label_121->setVisible(true);
                    ui->label_123->setVisible(true);
                    ui->label_125->setVisible(true);
                    ui->label_194->setVisible(false);
                    ui->label_195->setVisible(false);
                    ui->label_198->setVisible(false);
                    ui-> label_203->setText("ΔA/min");
                    dod9=od4-od3;
                    dod10=abs(dod9);
                    ui->label_132->setText(QString::number(dod10, 'f', 4));
                    dod = (dod6+dod8+dod10)/3; //Avg
                }
                dod11=abs(dod);
                ui->label_234->setText(QString::number(dod11, 'f', 4));
                dod12=ui->label_234->text().toDouble();
                //double od4=ui->label_34->text().toDouble();
                dod14= dod12*fct; // Sample OD * Factor Value
                dod15 = abs(dod14);
                QString Value = QString::number(dod15);
                if(Value=="inf")
                    ui->label_276->setText("0"); // Calibrate Factor Value
                else if(dod15<100)
                    ui->label_276->setText(QString::number(dod15, 'f' , 2));
                else if(dod15>100)
                    ui->label_276->setText(QString::number(dod15, 'f' , 0));

                float val = ui->label_276->text().toFloat();
                float min = ui->label_277->text().toFloat();
                float max = ui->label_278->text().toFloat();

                if(val<=max && val>=min)
                {
                    ui->label_256->setText("QC - Within Range");
                    ui->label_256->setStyleSheet("QLabel {color : green;}");
                    ui->pushButton_189->setVisible(true);
                    ui->pushButton_190->setVisible(false);
                }
                else
                {
                    ui->label_256->setText("QC - Without Range");
                    ui->label_256->setStyleSheet("QLabel {color : red;}");
                    ui->pushButton_189->setVisible(false);
                    ui->pushButton_190->setVisible(true);
                }

                QString vlll= ui->comboBox_2->currentText();
                ui->TP_QC_Check->setDisabled(false);
                if(kineticsavebtn==1)
                    ui->Save_Btn_6->setDisabled(true);
                else
                {    if(kineticruncal==1)
                    {
                        if(kineticqcfinish==1)
                            ui->Save_Btn_6->setDisabled(false);
                        else
                            ui->Save_Btn_6->setDisabled(true);
                    }
                    else
                        ui->Save_Btn_6->setDisabled(false);
                }
            }

            else
            {
                if(val==3)
                {
                    ui->label_99->setVisible(true);
                    ui->label_132->setVisible(true);
                    ui->label_98->setVisible(true);
                    ui->label_128->setVisible(true);
                    ui->label_97->setVisible(true);
                    ui->label_127->setVisible(true);
                    ui->label_106->setVisible(true);
                    ui->label_121->setVisible(true);
                    ui->label_123->setVisible(true);
                    ui->label_125->setVisible(true);
                    ui->label_194->setVisible(false);
                    ui->label_195->setVisible(false);
                    ui->label_198->setVisible(false);
                    ui-> label_203->setText("ΔA/min");
                    dod24=od4-od3;
                    dod25=abs(dod24);
                    ui->label_132->setText(QString::number(dod25, 'f', 4));
                    dod = (dod6+dod8+dod25)/3;
                }
                dod26=abs(dod);
                ui->label_234->setText(QString::number(dod26, 'f', 4));
                dod27=ui->label_234->text().toDouble();
                // double od4=ui->label_240->text().toDouble();
                dod29= dod27 * fct; // Sample OD * Fact
                dod30= abs(dod29);
                QString Value = QString::number(dod30);
                if(Value=="inf")
                    ui->label_276->setText("0"); // Calibrate Factor Value
                else if(dod30<100)
                    ui->label_276->setText(QString::number(dod30, 'f' , 2));
                else if(dod30>100)
                    ui->label_276->setText(QString::number(dod30, 'f' , 0));

                float val = ui->label_276->text().toFloat();
                float min = ui->label_277->text().toFloat();
                float max = ui->label_278->text().toFloat();

                if(val<=max && val>=min)
                {
                    ui->label_256->setVisible(true);
                    ui->label_257->setVisible(false);
                }
                else
                {
                    ui->label_257->setVisible(true);
                    ui->label_256->setVisible(false);
                }
                QString vlll= ui->comboBox_2->currentText();
                ui->RunCal_Btn_2->setEnabled(true);
                if(kineticsavebtn==1)
                    ui->Save_Btn_6->setDisabled(true);
                else
                {    if(kineticruncal==1)
                    {
                        if(kineticqcfinish==1)
                            ui->Save_Btn_6->setDisabled(false);
                        else
                            ui->Save_Btn_6->setDisabled(true);
                    }
                    else
                        ui->Save_Btn_6->setDisabled(false);
                }
            }


            if(fct == 0.0)
            {
                if(val==3)
                {
                    ui->label_99->setVisible(true);
                    ui->label_132->setVisible(true);
                    ui->label_97->setVisible(true);
                    ui->label_98->setVisible(true);
                    ui->label_127->setVisible(true);
                    ui->label_128->setVisible(true);
                    ui->label_106->setVisible(true);
                    ui->label_121->setVisible(true);
                    ui->label_123->setVisible(true);
                    ui->label_125->setVisible(true);
                    ui->label_194->setVisible(false);
                    ui->label_195->setVisible(false);
                    ui->label_198->setVisible(false);
                    ui-> label_203->setText("ΔA/min");
                    dod9=od4-od3;
                    dod10=abs(dod9);
                    ui->label_132->setText(QString::number(dod10, 'f', 4));
                    dod = (dod6+dod8+dod10)/3; //Avg
                }
                dod11=abs(dod);
                ui->label_234->setText(QString::number(dod11, 'f', 4));
                dod12=ui->label_234->text().toDouble();
                //double od4=ui->label_34->text().toDouble();
                dod14= dod12*fct; // Sample OD * Factor Value
                dod15 = abs(dod14);
                QString Value = QString::number(dod15);
                if(Value=="inf")
                    ui->label_276->setText("0"); // Calibrate Factor Value
                else if(dod15<100)
                    ui->label_276->setText(QString::number(dod15, 'f' , 2));
                else if(dod15>100)
                    ui->label_276->setText(QString::number(dod15, 'f' , 0));

                float val = ui->label_276->text().toFloat();
                float min = ui->label_277->text().toFloat();
                float max = ui->label_278->text().toFloat();

                ui->label_256->setVisible(true);
                if(val<=max && val>=min)
                {
                    ui->label_256->setText("QC - Within Range");
                    ui->label_256->setStyleSheet("QLabel {color : green;}");
                    ui->pushButton_189->setVisible(true);
                    ui->pushButton_190->setVisible(false);
                }
                else
                {
                    ui->label_256->setText("QC - Without Range");
                    ui->label_256->setStyleSheet("QLabel {color : red;}");
                    ui->pushButton_189->setVisible(false);
                    ui->pushButton_190->setVisible(true);
                }
                QString vlll= ui->comboBox_2->currentText();
                ui->TP_QC_Check->setDisabled(false);
                if(kineticsavebtn==1)
                    ui->Save_Btn_6->setDisabled(true);
                else
                {    if(kineticruncal==1)
                    {
                        if(kineticqcfinish==1)
                            ui->Save_Btn_6->setDisabled(false);
                        else
                            ui->Save_Btn_6->setDisabled(true);
                    }
                    else
                        ui->Save_Btn_6->setDisabled(false);
                }
                ui->Home_Btn_3->setVisible(true);
                ui->Home_Btn_3->setDisabled(false);
                ui->comboBox_2->setDisabled(false);
                ui->Retest_5->setDisabled(false);
                ui->RunCal_Btn_2->setEnabled(true);
                ui->RunSample_Btn_2->setEnabled(true);
                ui->TP_QC_Check->setEnabled(true);
                twoqc_Graph();
            }

            else
            {
                if(val==3)
                {
                    ui->label_99->setVisible(true);
                    ui->label_132->setVisible(true);
                    ui->label_98->setVisible(true);
                    ui->label_128->setVisible(true);
                    ui->label_97->setVisible(true);
                    ui->label_127->setVisible(true);
                    ui->label_106->setVisible(true);
                    ui->label_121->setVisible(true);
                    ui->label_123->setVisible(true);
                    ui->label_125->setVisible(true);
                    ui->label_194->setVisible(false);
                    ui->label_195->setVisible(false);
                    ui->label_198->setVisible(false);
                    ui-> label_203->setText("ΔA/min");
                    dod24=od4-od3;
                    dod25=abs(dod24);
                    ui->label_132->setText(QString::number(dod25, 'f', 4));
                    dod = (dod6+dod8+dod25)/3;
                }
                dod26=abs(dod);
                ui->label_234->setText(QString::number(dod26, 'f', 4));
                dod27=ui->label_234->text().toDouble();
                // double od4=ui->label_240->text().toDouble();
                dod29= dod27 * fct; // Sample OD * Fact
                dod30= abs(dod29);
                QString Value = QString::number(dod30);
                if(Value=="inf")
                    ui->label_276->setText("0"); // Calibrate Factor Value
                else if(dod30<100)
                    ui->label_276->setText(QString::number(dod30, 'f' , 2));
                else if(dod30>100)
                    ui->label_276->setText(QString::number(dod30, 'f' , 0));

                float val = ui->label_276->text().toFloat();
                float min = ui->label_277->text().toFloat();
                float max = ui->label_278->text().toFloat();

                ui->label_256->setVisible(true);
                if(val<=max && val>=min)
                {
                    ui->label_256->setText("QC - Within Range");
                    ui->label_256->setStyleSheet("QLabel {color : green;}");
                    ui->pushButton_189->setVisible(true);
                    ui->pushButton_190->setVisible(false);
                }
                else
                {
                    ui->label_256->setText("QC - Without Range");
                    ui->label_256->setStyleSheet("QLabel {color : red;}");
                    ui->pushButton_189->setVisible(false);
                    ui->pushButton_190->setVisible(true);
                }
                QString vlll= ui->comboBox_2->currentText();
                ui->RunCal_Btn_2->setEnabled(true);
                if(kineticsavebtn==1)
                    ui->Save_Btn_6->setDisabled(true);
                else
                {    if(kineticruncal==1)
                    {
                        if(kineticqcfinish==1)
                            ui->Save_Btn_6->setDisabled(false);
                        else
                            ui->Save_Btn_6->setDisabled(true);
                    }
                    else
                        ui->Save_Btn_6->setDisabled(false);
                }
                ui->RunSample_Btn_2->setEnabled(true);
                ui->TP_QC_Check->setEnabled(true);
                ui->Stop_Btn_2->setDisabled(true);
                ui->Home_Btn_3->setVisible(true);
                ui->Home_Btn_3->setDisabled(false);
                ui->comboBox_2->setDisabled(false);
                ui->Retest_5->setDisabled(false);
                twoqc_Graph();
            }
        }
    }
}

void MainWindow::on_pushButton_134_clicked()
{
    ui->stackedWidget->setCurrentIndex(19);
    ui->stackedWidget_6->setCurrentIndex(0);

    // Clear focus and forcefully update the state
    ui->radioButton_8->clearFocus();
    ui->radioButton_8->setChecked(false);
    ui->radioButton_8->update(); // Force update

    ui->radioButton_9->clearFocus();
    ui->radioButton_9->setChecked(false);
    ui->radioButton_9->update(); // Force update

    // Verify state with debug messages
    qDebug() << "radioButton_8 checked state after update:" << ui->radioButton_8->isChecked();
    qDebug() << "radioButton_9 checked state after update:" << ui->radioButton_9->isChecked();
    ui->label_91->setText("LIS SETUP");
}

void MainWindow::on_toolButton_23_clicked()
{
    ui->stackedWidget->setCurrentIndex(7);
    ui->frame_12->setVisible(false);
    ui->label_428->setVisible(false);
    ui->label_431->setVisible(false);
    ui->pushButton_294->setVisible(false);
    ui->label_432->setVisible(false);
    ui->label_433->setVisible(false);
    ui->pushButton_293->setVisible(false);
    ui->label_438->setVisible(false);
    ui->frame_64->setVisible(true);
}

void MainWindow::on_radioButton_5_clicked()
{
    text="Male";
    ui->radioButton_6->setAutoExclusive(false);
    ui->radioButton_6->setEnabled(true);
    ui->radioButton_6->setChecked(false);
    ui->radioButton_6->setAutoExclusive(true);
    ui->radioButton_7->setAutoExclusive(false);
    ui->radioButton_7->setEnabled(true);
    ui->radioButton_7->setChecked(false);
    ui->radioButton_7->setAutoExclusive(true);
}

void MainWindow::on_radioButton_6_clicked()
{
    text="Female";
    ui->radioButton_5->setAutoExclusive(false);
    ui->radioButton_5->setEnabled(true);
    ui->radioButton_5->setChecked(false);
    ui->radioButton_5->setAutoExclusive(true);
    ui->radioButton_7->setAutoExclusive(false);
    ui->radioButton_7->setEnabled(true);
    ui->radioButton_7->setChecked(false);
    ui->radioButton_7->setAutoExclusive(true);
}

void MainWindow::on_radioButton_7_clicked()
{
    text="Others";
    ui->radioButton_6->setAutoExclusive(false);
    ui->radioButton_6->setEnabled(true);
    ui->radioButton_6->setChecked(false);
    ui->radioButton_6->setAutoExclusive(true);
    ui->radioButton_5->setAutoExclusive(false);
    ui->radioButton_5->setEnabled(true);
    ui->radioButton_5->setChecked(false);
    ui->radioButton_5->setAutoExclusive(true);
}



void MainWindow::on_Home_Btn_11_clicked()
{
    if(check_saveBtn==1)
    {
        //EndPoint...
        ui->stackedWidget->setCurrentIndex(2);
        ui->RunSample_Btn->setEnabled(true);        //RunSample_Btn->setEnabled(true);;
        if(retestval==1)
        {
            ui->Retest->setDisabled(true);
            ui->Retest_3->setDisabled(true);
        }
        else if(retestval==2)
        {
            ui->Retest->setDisabled(true);
            ui->Retest_3->setDisabled(true);
            ui->Retest_4->setDisabled(true);
        }
        ui->Home_Btn_3->setVisible(true);
        ui->Home_Btn_3->setDisabled(false);
        qDebug()<<"EpSaveBTn : "<<endpointsavebtn<<" EPRunSamp : "<<endrunsamp<<" EPSampFinish : "<<endsampfinish;

        if(endpointsavebtn==1)
            ui->Save_Btn_5->setDisabled(true);
        else
        {
            if(endrunsamp==1)
            {
                if(endsampfinish==1)
                    ui->Save_Btn_5->setDisabled(false);
                else
                    ui->Save_Btn_5->setDisabled(true);
            }
            else
                ui->Save_Btn_5->setDisabled(false);
        }

    }
    else
    {
        QString PID= ui->PatientInfo_LineEdit->text();
        QString PName= ui->Patient_Name->text();
        QString PAge= ui->Patient_Age->text();

        QString  PaID,Date , Time  , PaName , PGender , Unit,PaAge; //PID, , ANrmlRang , BNrmlRang , ODVal , ResultOD ,  ;
        QString LIS_Check = "0";
        int  date = 0 ,time=0;
        double  ANrmlRang=0 , BNrmlRang=0  ,ODVal=0 , ResultOD =0;
        Date = char (date);
        Time = char (time);
        PID = ui->PatientInfo_LineEdit->text();
        ODVal = ui->label_119->text().toDouble();
        ResultOD = ui->label_33->text().toDouble();
        Date= ui->SysDate_Lbl->text();
        Time =ui->SysTime_Lbl->text();
        ui->RunSample_Btn_2->setEnabled(true);
        ui->EndPoint_Save_Btn->setDisabled(true);
        ui->EndPoint_Print_Btn->setDisabled(true);
        Unit = ui->label_272->text();
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup); // Changed from Qt::Popup to Qt::Dialog
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        msg.setText("Do you want to save the data?");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/info.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QPushButton* saveButton = msg.addButton("Yes", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        QPushButton* dontSaveButton = msg.addButton("No", QMessageBox::DestructiveRole);
        dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #ff5957, stop: 0.5 #ff5957, stop: 1 #ff5957);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(184, 0, 0), stop: 0.5 rgb(184, 0, 0), stop: 1 rgb(184, 0, 0)); color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            QString PID= ui->PatientInfo_LineEdit->text();

            if(PID=="")
            {
                QMessageBox msg(this);
                msg.setWindowFlags(Qt::Popup);
                msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
                msg.setText("Please enter patient ID.");
                QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/info.png");
                auto newPixmap = p.scaled(80, 80);
                msg.setIconPixmap(newPixmap);
                QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                msg.setDefaultButton(saveButton);
                msg.exec();
                if (msg.clickedButton() == saveButton)
                {
                    ui->stackedWidget->setCurrentIndex(17);
                    ui->EndPoint_Print_Btn->setDisabled(false);
                    ui->EndPoint_Save_Btn->setDisabled(false);
                    ui->Patient_Name_Btn->setDisabled(false);
                    ui->Patient_Age_Btn->setDisabled(false);
                    ui->pushButton_117->setDisabled(false);
                    check_saveBtn=0;
                    endsavebtn=0;

                }
            }
            else if(!PID.isEmpty())
            {
                PaID = ui->PatientInfo_LineEdit->text();
                PaName = PName.isEmpty() ? "-" : ui->Patient_Name->text();
                PaAge = PAge.isEmpty() ? "-" : ui->Patient_Age->text();
                PGender = text.isEmpty() ? "-" : text;
                Unit = ui->label_272->text();
                // QString TestName1=TestName;
                // TestName1=ParameterNameToShow(TestName);
                qDebug()<<"TestName : "<<TestName;
                QSqlQuery query;
                query.prepare("insert into Reports(PID, PName, PAge, PGender, TName, ANrmlRang, BNrmlRang, ODVal, ResultOD, Unit, Date, Time, LIS_Check) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                query.addBindValue(PaID);
                query.addBindValue(PaName);
                query.addBindValue(PaAge);
                query.addBindValue(PGender);
                query.addBindValue(TestName);
                query.addBindValue(ANrmlRang);
                query.addBindValue(BNrmlRang);
                query.addBindValue(ODVal);
                query.addBindValue(ResultOD);
                query.addBindValue(Unit);
                query.addBindValue(Date);
                query.addBindValue(Time);
                query.addBindValue(LIS_Check);
                query.exec();

                QMessageBox msg(this);
                msg.setWindowFlags(Qt::Popup);
                msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
                QPixmap pii("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
                auto newPixmap = pii.scaled(65, 65);
                msg.setIconPixmap(newPixmap);
                QFont font;
                font.setBold(true);
                msg.setFont(font);
                msg.setText("Data saved.");
                QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                msg.setDefaultButton(saveButton);
                msg.exec();
                if (msg.clickedButton() == saveButton)
                {
                    ui->RunSample_Btn_2->setEnabled(true);
                    ui->EndPoint_Print_Btn->setEnabled(true);
                    ui->pushButton_117->setDisabled(true);
                    ui->Patient_Name_Btn->setDisabled(true);
                    ui->Patient_Age_Btn->setDisabled(true);
                    ui->radioButton_5->setDisabled(true);
                    ui->radioButton_6->setDisabled(true);
                    ui->radioButton_7->setDisabled(true);
                    ui->EndPoint_Save_Btn->setDisabled(true);
                    check_saveBtn=1;
                    endsavebtn=1;
                    ui->stackedWidget->setCurrentIndex(17);
                }
                else
                    ui->stackedWidget->setCurrentIndex(17);
            }
        }
        else if(msg.clickedButton() == dontSaveButton)
        {

            qDebug()<<"cancel-ep";
            //EndPoint...
            ui->stackedWidget->setCurrentIndex(2);
            ui->RunSample_Btn->setEnabled(true);        //RunSample_Btn->setEnabled(true);;
            if(retestval==1)
            {
                ui->Retest->setDisabled(true);
                ui->Retest_3->setDisabled(true);
            }
            else if(retestval==2)
            {
                ui->Retest->setDisabled(true);
                ui->Retest_3->setDisabled(true);
                ui->Retest_4->setDisabled(true);
            }
            ui->Home_Btn_3->setVisible(true);
            ui->Home_Btn_3->setDisabled(false);
            qDebug()<<"EpSaveBTn : "<<endpointsavebtn<<" EPRunSamp : "<<endrunsamp<<" EPSampFinish : "<<endsampfinish;

            if(endpointsavebtn==1)
                ui->Save_Btn_5->setDisabled(true);
            else
            {
                if(endrunsamp==1)
                {
                    if(endsampfinish==1)
                        ui->Save_Btn_5->setDisabled(false);
                    else
                        ui->Save_Btn_5->setDisabled(true);
                }
                else
                    ui->Save_Btn_5->setDisabled(false);
            }
        }
        else
            ui->stackedWidget->setCurrentIndex(17);
    }
}

void MainWindow::on_Home_Btn_18_clicked()
{
    if(check_saveBtn==1)
    {
        //TwoPoint...
        FKCprintopt=0;
        FKQC1printopt=0;
        FKQC2printopt=0;
        ui->stackedWidget->setCurrentIndex(2);
        ui->RunSample_Btn_2->setEnabled(true);        //RunSample_Btn->setEnabled(true);;
        ui->Home_Btn_3->setVisible(true);
        ui->Home_Btn_3->setDisabled(false);
        qDebug()<<"TpSaveBTn : "<<twopointsavebtn<<" TPRunSamp : "<<tworunsamp<<" TPSampFinish : "<<twosampfinish;

        if(twopointsavebtn==1)
            ui->Save_Btn_6->setDisabled(true);
        else
        {
            if(tworunsamp==1)
            {
                if(twosampfinish==1)
                    ui->Save_Btn_6->setDisabled(false);
                else
                    ui->Save_Btn_6->setDisabled(true);
            }
            else
                ui->Save_Btn_6->setDisabled(false);
        }
    }
    else
    {
        QString PID= ui->PatientInfo_LineEdit->text();
        QString PName= ui->Patient_Name->text();
        QString PAge= ui->Patient_Age->text();

        QString  PaID,Date , Time  , PaName , PGender , Unit,PaAge; //PID, , ANrmlRang , BNrmlRang , ODVal , ResultOD ,  ;
        QString LIS_Check = "0";
        int  date = 0 ,time=0;
        double  ANrmlRang=0 , BNrmlRang=0  ,ODVal=0 , ResultOD =0;
        Date = char (date);
        Time = char (time);
        PID = ui->PatientInfo_LineEdit->text();
        ODVal = ui->label_119->text().toDouble();
        ResultOD = ui->label_33->text().toDouble();
        Date= ui->SysDate_Lbl->text();
        Time =ui->SysTime_Lbl->text();
        ui->RunSample_Btn_2->setEnabled(true);
        ui->EndPoint_Save_Btn->setDisabled(true);
        ui->EndPoint_Print_Btn->setDisabled(true);
        Unit = ui->label_272->text();

        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        msg.setText("Do you want to save the data?");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/info.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QPushButton* saveButton = msg.addButton("Yes", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        QPushButton* dontSaveButton = msg.addButton("No", QMessageBox::DestructiveRole);
        dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #ff5957, stop: 0.5 #ff5957, stop: 1 #ff5957);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(184, 0, 0), stop: 0.5 rgb(184, 0, 0), stop: 1 rgb(184, 0, 0)); color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            QString PID= ui->PatientInfo_LineEdit->text();

            if(PID=="")
            {
                QMessageBox msg(this);
                msg.setWindowFlags(Qt::Popup);
                msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
                msg.setText("Please enter patient ID.");
                QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/info.png");
                auto newPixmap = p.scaled(80, 80);
                msg.setIconPixmap(newPixmap);
                QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                msg.setDefaultButton(saveButton);
                msg.exec();
                if (msg.clickedButton() == saveButton)
                {
                    ui->stackedWidget->setCurrentIndex(17);
                    ui->EndPoint_Print_Btn->setDisabled(false);
                    ui->EndPoint_Save_Btn->setDisabled(false);
                    ui->Patient_Name_Btn->setDisabled(false);
                    ui->Patient_Age_Btn->setDisabled(false);
                    ui->pushButton_117->setDisabled(false);
                    check_saveBtn=0;
                    endsavebtn=0;

                }
            }

            else if(!PID.isEmpty())
            {
                PaID = ui->PatientInfo_LineEdit->text();
                PaName = PName.isEmpty() ? "-" : ui->Patient_Name->text();
                PaAge = PAge.isEmpty() ? "-" : ui->Patient_Age->text();
                PGender = text.isEmpty() ? "-" : text;
                Unit = ui->label_272->text();

                QSqlQuery query;
                query.prepare("insert into Reports(PID, PName, PAge, PGender, TName, ANrmlRang, BNrmlRang, ODVal, ResultOD, Unit, Date, Time, LIS_Check) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                query.addBindValue(PaID);
                query.addBindValue(PaName);
                query.addBindValue(PaAge);
                query.addBindValue(PGender);
                query.addBindValue(TestName);
                query.addBindValue(ANrmlRang);
                query.addBindValue(BNrmlRang);
                query.addBindValue(ODVal);
                query.addBindValue(ResultOD);
                query.addBindValue(Unit);
                query.addBindValue(Date);
                query.addBindValue(Time);
                query.addBindValue(LIS_Check);
                query.exec();

                QMessageBox msg(this);
                msg.setWindowFlags(Qt::Popup);
                msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
                QPixmap pii("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
                auto newPixmap = pii.scaled(65, 65);
                msg.setIconPixmap(newPixmap);
                QFont font;
                font.setBold(true);
                msg.setFont(font);
                msg.setText("Data saved.");
                QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                msg.setDefaultButton(saveButton);
                msg.exec();
                if (msg.clickedButton() == saveButton)
                {
                    ui->RunSample_Btn_2->setEnabled(true);
                    ui->EndPoint_Print_Btn->setEnabled(true);
                    ui->pushButton_117->setDisabled(true);
                    ui->Patient_Name_Btn->setDisabled(true);
                    ui->Patient_Age_Btn->setDisabled(true);
                    ui->radioButton_5->setDisabled(true);
                    ui->radioButton_6->setDisabled(true);
                    ui->radioButton_7->setDisabled(true);
                    ui->EndPoint_Save_Btn->setDisabled(true);
                    check_saveBtn=1;
                    endsavebtn=1;
                    ui->stackedWidget->setCurrentIndex(17);
                }
                else
                    ui->stackedWidget->setCurrentIndex(17);
            }

        }
        else if(msg.clickedButton() == dontSaveButton)
        {
            qDebug()<<"cancel";
            //TwoPoint...
            FKCprintopt=0;
            FKQC1printopt=0;
            FKQC2printopt=0;
            ui->stackedWidget->setCurrentIndex(2);
            ui->RunSample_Btn_2->setEnabled(true);        //RunSample_Btn->setEnabled(true);;
            ui->Home_Btn_3->setVisible(true);
            ui->Home_Btn_3->setDisabled(false);
            qDebug()<<"TpSaveBTn : "<<twopointsavebtn<<" TPRunSamp : "<<tworunsamp<<" TPSampFinish : "<<twosampfinish;

            if(twopointsavebtn==1)
                ui->Save_Btn_6->setDisabled(true);
            else
            {
                if(tworunsamp==1)
                {
                    if(twosampfinish==1)
                        ui->Save_Btn_6->setDisabled(false);
                    else
                        ui->Save_Btn_6->setDisabled(true);
                }
                else
                    ui->Save_Btn_6->setDisabled(false);
            }
        }
        else
            ui->stackedWidget->setCurrentIndex(17);
    }
}

void MainWindow::on_Home_Btn_19_clicked()
{
    if(check_saveBtn==1)
    {
        //Kinetic...
        KCprintopt=0;
        KQC1printopt=0;
        KQC2printopt=0;
        ui->stackedWidget->setCurrentIndex(2);
        ui->RunSample_Btn_2->setEnabled(true);        //RunSample_Btn->setEnabled(true);;
        ui->Home_Btn_3->setVisible(true);
        ui->Home_Btn_3->setDisabled(false);
        qDebug()<<"KSaveBTn : "<<kineticsavebtn<<" KRunSamp : "<<kineticrunsamp<<" KSampFinish : "<<kineticsampfinish;

        if(kineticsavebtn==1)
            ui->Save_Btn_6->setDisabled(true);
        else
        {
            if(kineticrunsamp==1)
            {
                if(kineticsampfinish==1)
                    ui->Save_Btn_6->setDisabled(false);
                else
                    ui->Save_Btn_6->setDisabled(true);
            }
            else
                ui->Save_Btn_6->setDisabled(false);
        }
    }
    else
    {
        QString PID= ui->PatientInfo_LineEdit->text();
        QString PName= ui->Patient_Name->text();
        QString PAge= ui->Patient_Age->text();

        QString  PaID,Date , Time  , PaName , PGender , Unit,PaAge; //PID, , ANrmlRang , BNrmlRang , ODVal , ResultOD ,  ;
        QString LIS_Check = "0";
        int  date = 0 ,time=0;
        double  ANrmlRang=0 , BNrmlRang=0  ,ODVal=0 , ResultOD =0;
        Date = char (date);
        Time = char (time);
        PID = ui->PatientInfo_LineEdit->text();
        ODVal = ui->label_119->text().toDouble();
        ResultOD = ui->label_33->text().toDouble();
        Date= ui->SysDate_Lbl->text();
        Time =ui->SysTime_Lbl->text();
        ui->RunSample_Btn_2->setEnabled(true);
        ui->EndPoint_Save_Btn->setDisabled(true);
        ui->EndPoint_Print_Btn->setDisabled(true);
        Unit = ui->label_272->text();
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        msg.setText("Do you want to save the data?");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/info.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QPushButton* saveButton = msg.addButton("Yes", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        QPushButton* dontSaveButton = msg.addButton("No", QMessageBox::DestructiveRole);
        dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #ff5957, stop: 0.5 #ff5957, stop: 1 #ff5957);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(184, 0, 0), stop: 0.5 rgb(184, 0, 0), stop: 1 rgb(184, 0, 0)); color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {   QString PID= ui->PatientInfo_LineEdit->text();

            if(PID=="")
            {
                QMessageBox msg(this);
                msg.setWindowFlags(Qt::Popup);
                msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
                msg.setText("Please enter patient ID.");
                QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/info.png");
                auto newPixmap = p.scaled(80, 80);
                msg.setIconPixmap(newPixmap);
                QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                msg.setDefaultButton(saveButton);
                msg.exec();
                if (msg.clickedButton() == saveButton)
                {
                    ui->stackedWidget->setCurrentIndex(17);
                    ui->EndPoint_Print_Btn->setDisabled(false);
                    ui->EndPoint_Save_Btn->setDisabled(false);
                    ui->Patient_Name_Btn->setDisabled(false);
                    ui->Patient_Age_Btn->setDisabled(false);
                    ui->pushButton_117->setDisabled(false);
                    check_saveBtn=0;
                    endsavebtn=0;

                }
            }

            else if(!PID.isEmpty())
            {
                PaID = ui->PatientInfo_LineEdit->text();
                PaName = PName.isEmpty() ? "-" : ui->Patient_Name->text();
                PaAge = PAge.isEmpty() ? "-" : ui->Patient_Age->text();
                PGender = text.isEmpty() ? "-" : text;
                Unit = ui->label_272->text();
                //  QString TestName1=TestName;
                // TestName1=ParameterNameToShow(TestName);
                qDebug()<<"TestName : "<<TestName;
                QSqlQuery query;
                query.prepare("insert into Reports(PID, PName, PAge, PGender, TName, ANrmlRang, BNrmlRang, ODVal, ResultOD, Unit, Date, Time, LIS_Check) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                query.addBindValue(PaID);
                query.addBindValue(PaName);
                query.addBindValue(PaAge);
                query.addBindValue(PGender);
                query.addBindValue(TestName);
                query.addBindValue(ANrmlRang);
                query.addBindValue(BNrmlRang);
                query.addBindValue(ODVal);
                query.addBindValue(ResultOD);
                query.addBindValue(Unit);
                query.addBindValue(Date);
                query.addBindValue(Time);
                query.addBindValue(LIS_Check);
                query.exec();

                QMessageBox msg(this);
                msg.setWindowFlags(Qt::Popup);
                msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
                QPixmap pii("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
                auto newPixmap = pii.scaled(65, 65);
                msg.setIconPixmap(newPixmap);
                QFont font;
                font.setBold(true);
                msg.setFont(font);
                msg.setText("Data saved.");
                QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                msg.setDefaultButton(saveButton);
                msg.exec();
                if (msg.clickedButton() == saveButton)
                {
                    ui->RunSample_Btn_2->setEnabled(true);
                    ui->EndPoint_Print_Btn->setEnabled(true);
                    ui->pushButton_117->setDisabled(true);
                    ui->Patient_Name_Btn->setDisabled(true);
                    ui->Patient_Age_Btn->setDisabled(true);
                    ui->radioButton_5->setDisabled(true);
                    ui->radioButton_6->setDisabled(true);
                    ui->radioButton_7->setDisabled(true);
                    ui->EndPoint_Save_Btn->setDisabled(true);
                    check_saveBtn=1;
                    endsavebtn=1;
                    ui->stackedWidget->setCurrentIndex(17);
                }
                else
                    ui->stackedWidget->setCurrentIndex(17);
            }
        }
        else if(msg.clickedButton() == dontSaveButton)
        {
            qDebug()<<"cancel";
            //Kinetic...
            KCprintopt=0;
            KQC1printopt=0;
            KQC2printopt=0;
            ui->stackedWidget->setCurrentIndex(2);
            ui->RunSample_Btn_2->setEnabled(true);        //RunSample_Btn->setEnabled(true);;
            ui->Home_Btn_3->setVisible(true);
            ui->Home_Btn_3->setDisabled(false);
            qDebug()<<"KSaveBTn : "<<kineticsavebtn<<" KRunSamp : "<<kineticrunsamp<<" KSampFinish : "<<kineticsampfinish;

            if(kineticsavebtn==1)
                ui->Save_Btn_6->setDisabled(true);
            else
            {
                if(kineticrunsamp==1)
                {
                    if(kineticsampfinish==1)
                        ui->Save_Btn_6->setDisabled(false);
                    else
                        ui->Save_Btn_6->setDisabled(true);
                }
                else
                    ui->Save_Btn_6->setDisabled(false);
            }
        }
        else
            ui->stackedWidget->setCurrentIndex(17);
    }
}

void MainWindow::on_radioButton_3_clicked()
{
    ui->checkBox_2->setChecked(false);
    With_G= 0;
    QString Baudrate , Databit , Parity, Flowcontrol;
    QSqlQuery qy;
    qy.prepare("select BaudRate,DataBits,Parity,FlowControl from Printer where sno=1");
    qy.exec();
    while(qy.next())
    {
        Baudrate = qy.value(0).toString();
        Databit = qy.value(1).toString();
        Parity = qy.value(2).toString();
        Flowcontrol = qy.value(3).toString();
    }
    qDebug()<<"Baudrate : "<<Baudrate;
    ui->comboBox_11->setCurrentText(Baudrate);
    ui->comboBox_17->setCurrentText(Databit);
    ui->comboBox_14->setCurrentText(Parity);
    ui->comboBox_18->setCurrentText(Flowcontrol);
    ui->toolButton_2->setVisible(true);
    ui->toolButton_2->setEnabled(true);
    ui->pushButton_150->setVisible(false);
    ui->stackedWidget_2->setCurrentIndex(2);

}

void MainWindow::on_radioButton_4_clicked()
{

    // Get a list of available printer names
    QList<QPrinterInfo> printerList = QPrinterInfo::availablePrinters();

    // Populate the ComboBox with printer names
    foreach (const QPrinterInfo &printerInfo, printerList) {
        ui->comboBox_10->addItem(printerInfo.printerName());
    }
    QString Type , Papersize;
    QSqlQuery qy;
    qy.prepare("select Papersize,Type from Printer where sno=1");
    qy.exec();
    while(qy.next())
    {
        Papersize=qy.value(0).toString();
        Type=qy.value(1).toString();
    }
    ui->comboBox_12->setCurrentText(Type);
    ui->comboBox_13->setCurrentText(Papersize);
    ui->stackedWidget_2->setCurrentIndex(1);

}

void MainWindow::on_pushButton_11_clicked()
{
    ui->label_343->clear();
    ui->stackedWidget->setCurrentIndex(28);
}

void MainWindow::on_Power_Btn_clicked()
{
    Wave_LED_OFF();

    QMessageBox msg(this);
    msg.setWindowFlags(Qt::Popup);
    msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
    QPixmap pix("/home/pi/git/BCYWithTRY/BCYWithTRY/img/output-onlinepngtools (8).png");
    auto newPixmap = pix.scaled(65, 65);
    msg.setIconPixmap(newPixmap);

    msg.setText("Are you sure you want to power off ?");

    QPushButton* saveButton = msg.addButton("Yes", QMessageBox::AcceptRole);
    saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
    QPushButton* dontSaveButton = msg.addButton("Go back", QMessageBox::DestructiveRole);
    dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #ff5957, stop: 0.5 #ff5957, stop: 1 #ff5957);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(184, 0, 0), stop: 0.5 rgb(184, 0, 0), stop: 1 rgb(184, 0, 0)); color:white;}");
    msg.setDefaultButton(saveButton);
    msg.exec();
    if (msg.clickedButton() == saveButton)
        system("sudo poweroff");  //System Power Off Option
    else if(msg.clickedButton() == dontSaveButton)
        ui->stackedWidget->setCurrentIndex(0);
    else
        ui->stackedWidget->setCurrentIndex(0);
}

void MainWindow::Wave_LED_OFF()
{
    digitalWrite (LED_BASE + 14,LOW) ;
    digitalWrite (LED_BASE + 13,LOW) ;
    digitalWrite (LED_BASE + 12,LOW) ;
    digitalWrite (LED_BASE + 11,LOW) ;
    digitalWrite (LED_BASE + 10,LOW) ;
    digitalWrite (LED_BASE + 9,LOW) ;
    digitalWrite (LED_BASE + 8,LOW) ;
    digitalWrite (LED_BASE + 0,LOW) ;
    digitalWrite (LED_BASE + 1,LOW) ;
    digitalWrite (LED_BASE + 2,LOW) ;
    digitalWrite (LED_BASE + 3,LOW) ;
    digitalWrite (LED_BASE + 4,LOW) ;
    digitalWrite (LED_BASE + 5,LOW) ;
    //  digitalWrite (LED_BASE + 6,LOW) ;
}

void MainWindow::Wave_LED_340()
{
    digitalWrite (LED_BASE + 9,HIGH) ;
}

void MainWindow::Wave_LED_405()
{

    digitalWrite (LED_BASE + 10,HIGH) ;
}
void MainWindow::Wave_LED_505()
{

    digitalWrite (LED_BASE + 11,HIGH) ;
}
void MainWindow::Wave_LED_545()
{

    digitalWrite (LED_BASE + 12,HIGH) ;
}
void MainWindow::Wave_LED_570()
{

    digitalWrite (LED_BASE + 13,HIGH) ;
}
void MainWindow::Wave_LED_630()
{

    digitalWrite (LED_BASE + 14,HIGH) ;
}
void MainWindow::Wave_LED_700()
{

    //  digitalWrite (LED_BASE + 14,HIGH) ;
}

void MainWindow::on_Stop_Btn_clicked()
{
    ui->comboBox->setEnabled(true);
    ui->Retest_5->setEnabled(true);
    readtimer->stop();
    ui->Stop_Btn->setDisabled(true);
    ui->Home_Btn_3->setVisible(true);
    ui->Home_Btn_3->setEnabled(true);
    ui->RunBlank_Btn->setDisabled(false);
    ui->RunCal_Btn->setDisabled(false);
    ui->RunCal_Btn_2->setDisabled(false);
    ui->RunSample_Btn->setEnabled(true);
    ui->RunSample_Btn_2->setEnabled(true);
    ui->E_QC_Check->setEnabled(true);
    ui->TP_QC_Check->setEnabled(true);
    if(option==10)
    {
        if(Calreteststop==1)
        {
            ui->Retest->setEnabled(true);
            ui->Retest_3->setDisabled(true);
            ui->Retest_4->setDisabled(true);
            qDebug()<<"Retest Visible...";
            Calreteststop=0;
        }
        // endpoint recal
        QString abs , fact ;
        QSqlQuery qy;
        qy.prepare("select fact , calibrateabs from test where name='"+TestName+"'");
        qy.exec();
        while(qy.next())
        {
            fact=qy.value(0).toString();
            abs=qy.value(1).toString();
        }
        // endpoint recal
        if(fact=="")
        {
            ui->label_226->setVisible(true);
            ui->label_224->setVisible(true);
            ui->label_224->setText(abs);
            ui->label_225->setVisible(true);
            ui->label_227->setVisible(true);
            ui->label_242->setVisible(false);
            ui->label_241->setVisible(false);
        }
        else
        {
            ui->label_226->setVisible(false);
            ui->label_224->setVisible(false);
            ui->label_225->setVisible(false);
            ui->label_227->setVisible(false);
            ui->label_242->setVisible(true);
            ui->label_242->setText(fact);
            ui->label_241->setVisible(true);

        }
        // endpoint recal

    }
    else if(option==15)
    {
        if(QCreteststop==1)
        {
            ui->Retest->setDisabled(true);
            ui->Retest_3->setEnabled(true);
            ui->Retest_4->setDisabled(true);
            qDebug()<<"Retest_3 Visible...";
            QCreteststop=0;
        }
    }
    else if(option==11)
    {
        if(Samplereteststop==1)
        {
            ui->Retest->setDisabled(true);
            ui->Retest_3->setDisabled(true);
            ui->Retest_4->setEnabled(true);
            qDebug()<<"Retest_4 Visible...";
            Samplereteststop=0;
        }
    }
    QMessageBox msg(this);
    msg.setWindowFlags(Qt::Popup);
    msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");

    msg.setText("Reading has stopped.");
    QPixmap pi("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
    auto newPixmaps = pi.scaled(80, 80);
    msg.setIconPixmap(newPixmaps);
    QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
    saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
    msg.setDefaultButton(saveButton);
    msg.exec();
    if (msg.clickedButton() == saveButton)
        ui->stackedWidget->setCurrentIndex(2);
    else
        ui->stackedWidget->setCurrentIndex(2);
    ui->comboBox->setEnabled(true);
    ui->Retest_5->setEnabled(true);
}

void MainWindow::nostd(const QString &NoStd)
{

    ui->pushButton_215->setEnabled(true) ;
    if(NoStd == "0")
    {
        ui->pushButton_234->setDisabled(true);
        ui->pushButton_238->setDisabled(true) ;
        ui->pushButton_232->setDisabled(true) ;
        ui->pushButton_237->setDisabled(true) ;
        ui->pushButton_233->setDisabled(true) ;
        ui->pushButton_235->setDisabled(true) ;
        ui->pushButton_215->setDisabled(false) ;
        ui->pushButton_236->setDisabled(true) ;
    }
    else if(NoStd == "1")
    {
        ui->pushButton_234->setDisabled(true);
        ui->pushButton_238->setDisabled(true) ;
        ui->pushButton_232->setDisabled(true) ;
        ui->pushButton_237->setDisabled(true) ;
        ui->pushButton_233->setDisabled(true) ;
        ui->pushButton_235->setDisabled(true) ;
        ui->pushButton_215->setDisabled(false) ;
        ui->pushButton_236->setDisabled(true) ;
    }
    if(NoStd == "2")
    {
        ui->pushButton_234->setDisabled(true);
        ui->pushButton_238->setDisabled(true) ;
        ui->pushButton_232->setDisabled(true) ;
        ui->pushButton_237->setDisabled(true) ;
        ui->pushButton_233->setDisabled(true) ;
        ui->pushButton_235->setDisabled(true) ;
        ui->pushButton_215->setDisabled(false) ;
        ui->pushButton_236->setDisabled(true) ;
    }
    else if(NoStd == "3")
    {
        ui->pushButton_234->setDisabled(true);
        ui->pushButton_238->setDisabled(true) ;
        ui->pushButton_232->setDisabled(true) ;
        ui->pushButton_237->setDisabled(true) ;
        ui->pushButton_233->setDisabled(true) ;
        ui->pushButton_235->setDisabled(true) ;
        ui->pushButton_215->setDisabled(false) ;
        ui->pushButton_236->setDisabled(true) ;

    }
    else if(NoStd == "4")
    {
        ui->pushButton_234->setDisabled(true);
        ui->pushButton_238->setDisabled(true) ;
        ui->pushButton_232->setDisabled(true) ;
        ui->pushButton_237->setDisabled(true) ;
        ui->pushButton_233->setDisabled(true) ;
        ui->pushButton_235->setDisabled(true) ;
        ui->pushButton_215->setDisabled(false) ;
        ui->pushButton_236->setDisabled(true) ;
    }
    else if(NoStd == "5")
    {
        ui->pushButton_234->setDisabled(true);
        ui->pushButton_238->setDisabled(true) ;
        ui->pushButton_232->setDisabled(true) ;
        ui->pushButton_237->setDisabled(true) ;
        ui->pushButton_233->setDisabled(true) ;
        ui->pushButton_235->setDisabled(true) ;
        ui->pushButton_215->setDisabled(false) ;
        ui->pushButton_236->setDisabled(true) ;
    }
    else if(NoStd == "6")
    {
        ui->pushButton_234->setDisabled(true);
        ui->pushButton_238->setDisabled(true) ;
        ui->pushButton_232->setDisabled(true) ;
        ui->pushButton_237->setDisabled(true) ;
        ui->pushButton_233->setDisabled(true) ;
        ui->pushButton_235->setDisabled(true) ;
        ui->pushButton_215->setDisabled(false) ;
        ui->pushButton_236->setDisabled(true) ;
    }

    else if(NoStd == "7")
    {
        ui->pushButton_234->setDisabled(true);
        ui->pushButton_238->setDisabled(true) ;
        ui->pushButton_232->setDisabled(true) ;
        ui->pushButton_237->setDisabled(true) ;
        ui->pushButton_233->setDisabled(true) ;
        ui->pushButton_235->setDisabled(true) ;
        ui->pushButton_215->setDisabled(false) ;
        ui->pushButton_236->setDisabled(true) ;
    }
    else if(NoStd == "8")
    {
        ui->pushButton_234->setDisabled(true);
        ui->pushButton_238->setDisabled(true) ;
        ui->pushButton_232->setDisabled(true) ;
        ui->pushButton_237->setDisabled(true) ;
        ui->pushButton_233->setDisabled(true) ;
        ui->pushButton_235->setDisabled(true) ;
        ui->pushButton_215->setDisabled(false) ;
        ui->pushButton_236->setDisabled(true) ;
    }
}
void MainWindow::on_ReactionType_Combo_activated(const QString )
{
    QString React = ui->ReactionType_Combo->currentText();
    if(React=="End point")
    {
        ui->pushButton_122->setDisabled(true);
        ui->pushButton_124->setDisabled(true);
    }
    else if(React == "Fixed Kinetic")
    {
        ui->pushButton_122->setDisabled(false);
        ui->pushButton_124->setDisabled(false);
    }
    else if(React == "Kinetic")
    {
        ui->pushButton_122->setDisabled(false);
        ui->pushButton_124->setDisabled(false);
    }
}

void MainWindow::on_toolButton_16_clicked()
{
    ui->pushButton_148->setVisible(false);
    ui->stackedWidget->setCurrentIndex(10);
}

void MainWindow::on_comboBox_5_activated(const QString )
{
    QString NoStd = ui->comboBox_5->currentText();
    qDebug()<<ui->comboBox_5->currentText();
    if(NoStd == "0")
    {
        ui->pushButton_207->setDisabled(false);
        ui->pushButton_213->setDisabled(true) ;
        ui->pushButton_210->setDisabled(true) ;
        ui->pushButton_212->setDisabled(true) ;
        ui->pushButton_208->setDisabled(true) ;
        ui->pushButton_214->setDisabled(true) ;
        ui->pushButton_209->setDisabled(true) ;
        ui->pushButton_211->setDisabled(true) ;

    }
    else if(NoStd == "1")
    {
        ui->pushButton_207->setDisabled(false);
        ui->pushButton_213->setDisabled(true) ;
        ui->pushButton_210->setDisabled(true) ;
        ui->pushButton_212->setDisabled(true) ;
        ui->pushButton_208->setDisabled(true) ;
        ui->pushButton_214->setDisabled(true) ;
        ui->pushButton_209->setDisabled(true) ;
        ui->pushButton_211->setDisabled(true) ;
    }
    else if(NoStd == "2")
    {
        ui->pushButton_207->setDisabled(false);
        ui->pushButton_213->setDisabled(true) ;
        ui->pushButton_210->setDisabled(true) ;
        ui->pushButton_212->setDisabled(true) ;
        ui->pushButton_208->setDisabled(true) ;
        ui->pushButton_214->setDisabled(true) ;
        ui->pushButton_209->setDisabled(true) ;
        ui->pushButton_211->setDisabled(true) ;
    }
    else if(NoStd == "3")
    {
        ui->pushButton_207->setDisabled(false);
        ui->pushButton_213->setDisabled(true) ;
        ui->pushButton_210->setDisabled(true) ;
        ui->pushButton_212->setDisabled(true) ;
        ui->pushButton_208->setDisabled(true) ;
        ui->pushButton_214->setDisabled(true) ;
        ui->pushButton_209->setDisabled(true) ;
        ui->pushButton_211->setDisabled(true) ;

    }
    else if(NoStd == "4")
    {
        ui->pushButton_207->setDisabled(false);
        ui->pushButton_213->setDisabled(true) ;
        ui->pushButton_210->setDisabled(true) ;
        ui->pushButton_212->setDisabled(true) ;
        ui->pushButton_208->setDisabled(true) ;
        ui->pushButton_214->setDisabled(true) ;
        ui->pushButton_209->setDisabled(true) ;
        ui->pushButton_211->setDisabled(true) ;
    }
    else if(NoStd == "5")
    {
        ui->pushButton_207->setDisabled(false);
        ui->pushButton_213->setDisabled(true) ;
        ui->pushButton_210->setDisabled(true) ;
        ui->pushButton_212->setDisabled(true) ;
        ui->pushButton_208->setDisabled(true) ;
        ui->pushButton_214->setDisabled(true) ;
        ui->pushButton_209->setDisabled(true) ;
        ui->pushButton_211->setDisabled(true) ;
    }
    else if(NoStd == "6")
    {
        ui->pushButton_207->setDisabled(false);
        ui->pushButton_213->setDisabled(true) ;
        ui->pushButton_210->setDisabled(true) ;
        ui->pushButton_212->setDisabled(true) ;
        ui->pushButton_208->setDisabled(true) ;
        ui->pushButton_214->setDisabled(true) ;
        ui->pushButton_209->setDisabled(true) ;
        ui->pushButton_211->setDisabled(true) ;
    }

    else if(NoStd == "7")
    {
        ui->pushButton_207->setDisabled(false);
        ui->pushButton_213->setDisabled(true) ;
        ui->pushButton_210->setDisabled(true) ;
        ui->pushButton_212->setDisabled(true) ;
        ui->pushButton_208->setDisabled(true) ;
        ui->pushButton_214->setDisabled(true) ;
        ui->pushButton_209->setDisabled(true) ;
        ui->pushButton_211->setDisabled(true) ;
    }
    else if(NoStd == "8")
    {
        ui->pushButton_207->setDisabled(false);
        ui->pushButton_213->setDisabled(true) ;
        ui->pushButton_210->setDisabled(true) ;
        ui->pushButton_212->setDisabled(true) ;
        ui->pushButton_208->setDisabled(true) ;
        ui->pushButton_214->setDisabled(true) ;
        ui->pushButton_209->setDisabled(true) ;
        ui->pushButton_211->setDisabled(true) ;
    }
}

void MainWindow::on_Home_Btn_12_clicked()
{
    ui->stackedWidget->setCurrentIndex(10);
}

void MainWindow::on_Home_Btn_13_clicked()
{
    ui->stackedWidget->setCurrentIndex(1);
    Wave_LED_OFF();
}

void MainWindow::on_Settings_Back_Btn_2_clicked()
{
    qDebug()<<"Settings_Btn_2";
    ui->pushButton_148->setVisible(true);
    ui->stackedWidget_9->setCurrentIndex(0);
    ui->stackedWidget_9->setVisible(true);
    ui->label_219->setText("USER");
    ui->label_219->setVisible(false);
    // ui->label_220->setVisible(true);
    ui->pushButton_10->setVisible(false);
    ui->pushButton_258->setVisible(false);
    ui->pushButton_134->setVisible(false);
    ui->pushButton_4->setVisible(false);
    ui->pushButton_5->setVisible(false);
    ui->toolButton->setVisible(false);
    ui->pushButton_7->setVisible(false);
    ui->pushButton_231->setVisible(false);
    ui->pushButton_228->setVisible(true);
    ui->pushButton_11->setVisible(false);
    ui->pushButton_131->setVisible(false);
    ui->label_210->setVisible(false);
    ui->Settings_Back_Btn->setVisible(false);
    ui->Settings_Back_Btn_2->setVisible(false);
    ui->toolButton_14->setVisible(true);
    ui->label_73->setVisible(true);
    ui->label_73->setText("Settings");
    ui->pushButton_227->setVisible(false);
    if(ui->label_211->text()=="Version : ")
    {

    }
    else if(ui->label_211->text()=="Status : ")
    {
        ui->label_211->setText("Version : ");
        QFile file("/home/pi/git/BCYWithTRY/README.md");
        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
            QTextStream in(&file);
            while (!in.atEnd()) {
                QString data = in.readLine();
                bool ok = false;
                double Version = data.toDouble(&ok);
                ui->label_340->setText("<font color='gray'>"+QString::number(Version)+"</font>");
                qDebug()<<Version;
            }

        }
    }

}

void MainWindow::on_pushButton_227_clicked()
{
    // 340 Internval Auto set............. //Frstvl = 340nm Gain val  // FrstInternval = 2950  // SecInternval = 3150
    //  Movie();

    ui->stackedWidget->setCurrentIndex(21);
    ui->stackedWidget_7->setCurrentIndex(0);
    ui->pushButton_327->setVisible(true);
    ui->pushButton_324->setVisible(false);
    ui->lineEdit_96->clear();
}


int MainWindow::on_lineEdit_13_textChanged(const QString &arg1)
{
    Q_UNUSED(arg1);
    QString Val = ui->lineEdit_13->text().toLocal8Bit().constData();

    if(Val==" ")
    {

    }
    else
    {
        // QStringList list_str2 = Val.split("") ;



        QString Out;
        for (int c = 0; c < Val.length(); ++c)
        {
            Out += Val[c];
            if ( c % 1)
                Out += " ";
            //qDebug()<<Out<<"List";
        }

    }
    return 0;
}

void MainWindow::on_lineEdit_13_returnPressed()
{
    qDebug()<<"FUnc Enter";
    Barcode_ExistingCheck();
}

void MainWindow::on_pushButton_240_clicked()
{
    QString code = ui->lineEdit_13->text();
    QString LotNumber = ui->lineEdit_15->text();
    QString Exp_Month = ui->dateEdit->text();
    QString Exp_Year = ui->dateEdit_2->text();

    QByteArray bytes = code.toLatin1();
    int length = bytes.size(); //Number of bytes
    qDebug()<<"Length : "<<length;
    if(code=="")
    {
        qDebug()<<"Found Error";
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("No kit scanned yet.");
        QPushButton* saveButton = msg.addButton("Yes", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {

            QDate Current_Year=QDate::currentDate();
            QDate Current_Month=QDate::currentDate();
            ui->dateEdit->setDisplayFormat("MM");
            ui->dateEdit->setDate(Current_Month);
            ui->dateEdit_2->setDisplayFormat("yyyy");
            ui->dateEdit_2->setDate(Current_Year);
            ui->Home_Btn_13->setVisible(true);
            ui->Home_Btn_23->setVisible(false);
            // QString TestName1=TestName;
            //  TestName1=ParameterNameToShow(TestName);
            ui->label_215->setText("Test Name : "+TestName+"");

            ui->lineEdit_13->clear();
            ui->label_270->clear();
            ui->label_271->clear();
            ui->lineEdit_17->clear();
            ui->lineEdit_15->clear();    ui->lineEdit_13->setFocus();
            ui->lineEdit_13->installEventFilter(this);
            this->installEventFilter(this);
            ui->stackedWidget->setCurrentIndex(22);
        }
    }
    else if(length<=13)
    {
        QString P_Name = ui->label_270->text();
        qDebug()<<"Enter"<<TestName<<P_Name <<Prod_Code;
        QString Wave;
        if(Prod_Code == P_Name)
        {
            CheckBarLOTMMYY();
            QSqlQuery query;
            query.prepare("select wave from test where name='"+TestName+"'");
            query.exec();
            while(query.next())
                Wave=query.value(0).toString();

            if(Wave=="340 nm")
            {
                Wave_LED_OFF();
                Wave_LED_340();
            }
            else if (Wave=="405 nm")
            {
                Wave_LED_OFF();
                Wave_LED_405();
            }
            else if (Wave=="505 nm")
            {
                Wave_LED_OFF();
                Wave_LED_505();
            }
            else if (Wave=="545 nm")
            {
                Wave_LED_OFF();
                Wave_LED_545();
            }
            else if (Wave=="570 nm")
            {
                Wave_LED_OFF();
                Wave_LED_570();
            }
            else if (Wave=="630 nm")
            {
                Wave_LED_OFF();
                Wave_LED_630();
            }
            else if (Wave=="700 nm")
            {
                Wave_LED_OFF();
                Wave_LED_700();
            }
        }

        else
        {
            qDebug()<<"Found Error";
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);

            QFont font;
            font.setBold(true);
            msg.setFont(font);
            msg.setText("Please select the correct one, you have selected a different parameter & kit.");
            QPushButton* saveButton = msg.addButton("Yes", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {

                // QString TestName1=TestName;
                // TestName1=ParameterNameToShow(TestName);
                ui->label_215->setText("Test Name : "+TestName+"");

                ui->Home_Btn_13->setVisible(true);
                ui->Home_Btn_23->setVisible(false);
                ui->lineEdit_13->clear();
                ui->label_270->clear();
                ui->label_271->clear();
                ui->lineEdit_17->clear();
                ui->lineEdit_15->clear();    ui->lineEdit_13->setFocus();
                ui->lineEdit_13->installEventFilter(this);
                this->installEventFilter(this);
                QDate Current_Year=QDate::currentDate();
                QDate Current_Month=QDate::currentDate();
                ui->dateEdit->setDisplayFormat("MM");
                ui->dateEdit->setDate(Current_Month);
                ui->dateEdit_2->setDisplayFormat("yyyy");
                ui->dateEdit_2->setDate(Current_Year);
                ui->stackedWidget->setCurrentIndex(22);
            }
        }
    }
    else
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("Incorrect barcode.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {

            //QString TestName1=TestName;
            // TestName1=ParameterNameToShow(TestName);
            ui->label_215->setText("Test Name : "+TestName+"");

            ui->Home_Btn_13->setVisible(true);
            ui->Home_Btn_23->setVisible(false);
            ui->lineEdit_13->clear();
            ui->label_270->clear();
            ui->label_271->clear();
            ui->lineEdit_17->clear();
            ui->lineEdit_15->clear();    ui->lineEdit_13->setFocus();
            ui->lineEdit_13->installEventFilter(this);
            this->installEventFilter(this);
            QDate Current_Year=QDate::currentDate();
            QDate Current_Month=QDate::currentDate();
            ui->dateEdit->setDisplayFormat("MM");
            ui->dateEdit->setDate(Current_Month);
            ui->dateEdit_2->setDisplayFormat("yyyy");
            ui->dateEdit_2->setDate(Current_Year);
            ui->stackedWidget->setCurrentIndex(22);
        }
    }
}

void MainWindow::CheckBarLOTMMYY()
{
    QString LotNumber = ui->lineEdit_15->text();
    QString Exp_Month = ui->dateEdit->text();
    QString Exp_Year = ui->dateEdit_2->text();
    if(LotNumber == "")
    {
        qDebug()<<"LotNumber Empty enter..."<<LotNumber;
        ui->lineEdit_15->setStyleSheet("border: 1px solid red");
        ui->pushButton_245->setVisible(false);
        ui->label_221->setVisible(true);
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("Lotno must be entered.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {

            ui->Home_Btn_13->setVisible(true);
            ui->Home_Btn_23->setVisible(false);
            // QString TestName1=TestName;
            // TestName1=ParameterNameToShow(TestName);
            ui->label_215->setText("Test Name : "+TestName+"");

            ui->lineEdit_15->setStyleSheet("background-color:white;border: none");
            ui->pushButton_245->setVisible(true);
            QDate Current_Year=QDate::currentDate();
            QDate Current_Month=QDate::currentDate();
            ui->dateEdit->setDisplayFormat("MM");
            ui->dateEdit->setDate(Current_Month);
            ui->dateEdit_2->setDisplayFormat("yyyy");
            ui->dateEdit_2->setDate(Current_Year);
            ui->stackedWidget->setCurrentIndex(22);
        }
        else
        {
            ui->lineEdit_15->setStyleSheet("background-color:white;border:none");
            ui->pushButton_245->setVisible(true);
        }
    }
    else if (Exp_Month == "")
    {
        ui->dateEdit->setStyleSheet("border: 1px solid red");
        ui->label_266->setVisible(true);
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("Expiry month must be entered.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {

            //QString TestName1=TestName;
            //TestName1=ParameterNameToShow(TestName);
            ui->label_215->setText("Test Name : "+TestName+"");

            ui->Home_Btn_13->setVisible(true);
            ui->Home_Btn_23->setVisible(false);
            ui->dateEdit->setStyleSheet("background-color:white;border: none");
            QDate Current_Year=QDate::currentDate();
            QDate Current_Month=QDate::currentDate();
            ui->dateEdit->setDisplayFormat("MM");
            ui->dateEdit->setDate(Current_Month);
            ui->dateEdit_2->setDisplayFormat("yyyy");
            ui->dateEdit_2->setDate(Current_Year);
            ui->stackedWidget->setCurrentIndex(22);
        }
    }
    else if (Exp_Year == "")
    {
        ui->dateEdit_2->setStyleSheet("border: 1px solid red");
        ui->label_266->setVisible(true);
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("Expiry year must be entered.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {

            ui->Home_Btn_13->setVisible(true);
            ui->Home_Btn_23->setVisible(false);
            // QString TestName1=TestName;
            // TestName1=ParameterNameToShow(TestName);
            ui->label_215->setText("Test Name : "+TestName+"");

            ui->dateEdit_2->setStyleSheet("background-color:white;border: none");
            QDate Current_Year=QDate::currentDate();
            QDate Current_Month=QDate::currentDate();
            ui->dateEdit->setDisplayFormat("MM");
            ui->dateEdit->setDate(Current_Month);
            ui->dateEdit_2->setDisplayFormat("yyyy");
            ui->dateEdit_2->setDate(Current_Year);
            ui->stackedWidget->setCurrentIndex(22);
        }
    }
    else
    {
        qDebug()<<"Barcode Read Function Enter...";
        int Current_Year=QDate::currentDate().year();
        int Current_Month=QDate::currentDate().month();
        int condition_check = Current_Month-1;
        int cncheck = Current_Year+1;
        int Check_Month = ui->dateEdit->text().toInt();
        int Check_Year = ui->dateEdit_2->text().toInt();
        qDebug()<<Check_Month<<Check_Year<<"****";
        if(Check_Year == Current_Year) // || Check_Year == cncheck)
        {
            qDebug()<<"current_yr";
            if(Check_Month == condition_check)
            {
                QMessageBox msg(this);
                msg.setWindowFlags(Qt::Popup);
                msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
                QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
                auto newPixmap = p.scaled(80, 80);
                msg.setIconPixmap(newPixmap);

                QFont font;
                font.setBold(true);
                msg.setFont(font);
                msg.setText("Kit already expired, please scan new kit.");
                QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                msg.setDefaultButton(saveButton);
                msg.exec();
                if (msg.clickedButton() == saveButton)
                {

                    ui->Home_Btn_13->setVisible(true);
                    ui->Home_Btn_23->setVisible(false);
                    // QString TestName1=TestName;
                    //  TestName1=ParameterNameToShow(TestName);
                    ui->label_215->setText("Test Name : "+TestName+"");

                    ui->lineEdit_13->clear();
                    ui->label_270->clear();
                    ui->label_271->clear();
                    ui->lineEdit_17->clear();
                    ui->lineEdit_15->clear();    ui->lineEdit_13->setFocus();
                    ui->lineEdit_13->installEventFilter(this);
                    this->installEventFilter(this);
                    QDate Current_Year=QDate::currentDate();
                    QDate Current_Month=QDate::currentDate();
                    ui->dateEdit->setDisplayFormat("MM");
                    ui->dateEdit->setDate(Current_Month);
                    ui->dateEdit_2->setDisplayFormat("yyyy");
                    ui->dateEdit_2->setDate(Current_Year);
                    ui->stackedWidget->setCurrentIndex(22);
                }
            }
            else if(Check_Month >= Current_Month)
            {
                qDebug()<<"current_month true";
                Barcode_read();
            }
            else
            {
                qDebug()<<"Without Range...00";
                QMessageBox msg(this);
                msg.setWindowFlags(Qt::Popup);
                msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
                QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
                auto newPixmap = p.scaled(80, 80);
                msg.setIconPixmap(newPixmap);

                QFont font;
                font.setBold(true);
                msg.setFont(font);
                msg.setText("Kit already expired, please scan new kit.");
                QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                msg.setDefaultButton(saveButton);
                msg.exec();
                if (msg.clickedButton() == saveButton)
                {

                    ui->Home_Btn_13->setVisible(true);
                    ui->Home_Btn_23->setVisible(false);
                    // QString TestName1=TestName;
                    // TestName1=ParameterNameToShow(TestName);
                    ui->label_215->setText("Test Name : "+TestName+"");

                    ui->lineEdit_13->clear();
                    ui->label_270->clear();
                    ui->label_271->clear();
                    ui->lineEdit_17->clear();
                    ui->lineEdit_15->clear();    ui->lineEdit_13->setFocus();
                    ui->lineEdit_13->installEventFilter(this);
                    this->installEventFilter(this);
                    QDate Current_Year=QDate::currentDate();
                    QDate Current_Month=QDate::currentDate();
                    ui->dateEdit->setDisplayFormat("MM");
                    ui->dateEdit->setDate(Current_Month);
                    ui->dateEdit_2->setDisplayFormat("yyyy");
                    ui->dateEdit_2->setDate(Current_Year);
                    ui->stackedWidget->setCurrentIndex(22);
                }
            }
        }
        else if(Check_Year == cncheck)
        {
            qDebug()<<"current_yr";
            if(Check_Month == condition_check || Check_Month <= Current_Month)
            {
                qDebug()<<"current_month true";
                Barcode_read();
            }
            else
            {
                qDebug()<<"Without Range...00";
                QMessageBox msg(this);
                msg.setWindowFlags(Qt::Popup);
                msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
                QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
                auto newPixmap = p.scaled(80, 80);
                msg.setIconPixmap(newPixmap);

                QFont font;
                font.setBold(true);
                msg.setFont(font);
                msg.setText("Kit already expired, please scan new kit.");
                QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                msg.setDefaultButton(saveButton);
                msg.exec();
                if (msg.clickedButton() == saveButton)
                {

                    ui->Home_Btn_13->setVisible(true);
                    ui->Home_Btn_23->setVisible(false);
                    // QString TestName1=TestName;
                    //  TestName1=ParameterNameToShow(TestName);
                    ui->label_215->setText("Test Name : "+TestName+"");

                    ui->lineEdit_13->clear();
                    ui->label_270->clear();
                    ui->label_271->clear();
                    ui->lineEdit_17->clear();
                    ui->lineEdit_15->clear();
                    ui->lineEdit_13->setFocus();
                    ui->lineEdit_13->installEventFilter(this);
                    this->installEventFilter(this);
                    QDate Current_Year=QDate::currentDate();
                    QDate Current_Month=QDate::currentDate();
                    ui->dateEdit->setDisplayFormat("MM");
                    ui->dateEdit->setDate(Current_Month);
                    ui->dateEdit_2->setDisplayFormat("yyyy");
                    ui->dateEdit_2->setDate(Current_Year);
                    ui->stackedWidget->setCurrentIndex(22);
                }
            }
        }
        else if(Check_Month > condition_check || Check_Year > cncheck)
        {
            qDebug()<<"Without Range...00";
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);

            QFont font;
            font.setBold(true);
            msg.setFont(font);
            msg.setText("Incorrect expiry.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {

                ui->Home_Btn_13->setVisible(true);
                ui->Home_Btn_23->setVisible(false);
                // QString TestName1=TestName;
                // TestName1=ParameterNameToShow(TestName);
                ui->label_215->setText("Test Name : "+TestName+"");

                ui->lineEdit_13->clear();
                ui->label_270->clear();
                ui->label_271->clear();
                ui->lineEdit_17->clear();
                ui->lineEdit_15->clear();    ui->lineEdit_13->setFocus();
                ui->lineEdit_13->installEventFilter(this);
                this->installEventFilter(this);
                QDate Current_Year=QDate::currentDate();
                QDate Current_Month=QDate::currentDate();
                ui->dateEdit->setDisplayFormat("MM");
                ui->dateEdit->setDate(Current_Month);
                ui->dateEdit_2->setDisplayFormat("yyyy");
                ui->dateEdit_2->setDate(Current_Year);
                ui->stackedWidget->setCurrentIndex(22);
            }
        }
        else
        {
            qDebug()<<"Without Range...00";
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);

            QFont font;
            font.setBold(true);
            msg.setFont(font);
            msg.setText("Kit already expired, please scan new kit.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {

                ui->Home_Btn_13->setVisible(true);
                ui->Home_Btn_23->setVisible(false);
                // QString TestName1=TestName;
                // TestName1=ParameterNameToShow(TestName);
                ui->label_215->setText("Test Name : "+TestName+"");

                ui->lineEdit_13->clear();
                ui->label_270->clear();
                ui->label_271->clear();
                ui->lineEdit_17->clear();
                ui->lineEdit_15->clear();    ui->lineEdit_13->setFocus();
                ui->lineEdit_13->installEventFilter(this);
                this->installEventFilter(this);
                QDate Current_Year=QDate::currentDate();
                QDate Current_Month=QDate::currentDate();
                ui->dateEdit->setDisplayFormat("MM");
                ui->dateEdit->setDate(Current_Month);
                ui->dateEdit_2->setDisplayFormat("yyyy");
                ui->dateEdit_2->setDate(Current_Year);
                ui->stackedWidget->setCurrentIndex(22);
            }
        }
    }
}

void MainWindow::Barcode_read()
{
    QString Data = ui->lineEdit_13->text().toLocal8Bit().constData();
    qDebug()<<Data<<TestName;
    QString Pro_Name , Pro_Code , Lot_No,Expiry,Kit_No,Dist_Code,Date,Time , Count , Tempd , Hex_Data;
    Pro_Name=ui->label_271->text();
    Pro_Code=ui->label_270->text();;
    Lot_No=ui->lineEdit_15->text();
    Expiry=ui->dateEdit->text()+ui->dateEdit_2->text();
    Kit_No=ui->lineEdit_17->text();
    Dist_Code=ui->lineEdit_18->text();
    Date=ui->SysDate_Lbl->text();
    Time=ui->SysTime_Lbl->text();
    Tempd=Data;
    Hex_Data= Data;
    Count="50";

    qDebug()<<"Within Range Current Month & Year...";
    Barcode_count_check_func();

    QString Temp,Cnt;
    QSqlQuery query;
    query.prepare("select Temp from "+Barcode_checkname+" where sno =1");
    query.exec();
    while(query.next())
        Temp=query.value(0).toString();
    qDebug()<<Temp<<"Nrml Temp";
    Glu_Temp = Temp;
    qDebug()<<Glu_Temp<<""+Barcode_checkname+" Temp";
    QString Temp1;
    bool ok ;
    QSqlQuery qry;
    ok=qry.exec("select Count from "+Barcode_checkname+" where Data='"+Temp+"'");
    if (ok && qry.next())
        Cnt=qry.value(0).toString();
    qDebug()<<"Count"<<Cnt;
    if(Cnt=="0")
    {

        QSqlQuery query;
        bool ok;
        QSqlQuery q;
        qDebug()<<"For else";
        ok = q.exec("select * from "+Barcode_checkname+" where Data='"+Data+"'");
        if (ok && q.next())
        {
            qDebug()<<"Data Already Exists";
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);

            QFont font;
            font.setBold(true);
            msg.setFont(font);
            msg.setText("Kit already used , please scan new kit.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {
                ui->lineEdit_13->clear();
                ui->label_270->clear();
                ui->label_271->clear();
                ui->lineEdit_17->clear();
                ui->lineEdit_15->clear();
                ui->lineEdit_13->setFocus();
                ui->lineEdit_13->installEventFilter(this);
                this->installEventFilter(this);
                QDate Current_Year=QDate::currentDate();
                QDate Current_Month=QDate::currentDate();
                ui->dateEdit->setDisplayFormat("MM");
                ui->dateEdit->setDate(Current_Month);
                ui->dateEdit_2->setDisplayFormat("yyyy");
                ui->dateEdit_2->setDate(Current_Year);
                ui->Home_Btn_13->setVisible(true);
                ui->Home_Btn_23->setVisible(false);
                // QString TestName1=TestName;
                // TestName1=ParameterNameToShow(TestName);
                ui->label_215->setText("Test Name : "+TestName+"");
                ui->stackedWidget->setCurrentIndex(22);

            }
        }
        else
        {
            QSqlQuery qry;
            qry.prepare("insert into "+Barcode_checkname+"(Pro_Name , Pro_Code, Lot_No, Expiry, Kit_No, Dist_Code, Date, Time , Count, Temp,Data) values(?,?,?,?,?,?,?,?,?,?,?)");
            qry.addBindValue(Pro_Name);
            qry.addBindValue(Pro_Code);
            qry.addBindValue(Lot_No);
            qry.addBindValue(Expiry);
            qry.addBindValue(Kit_No);
            qry.addBindValue(Dist_Code);
            qry.addBindValue(Date);
            qry.addBindValue(Time);
            qry.addBindValue(Count);
            qry.addBindValue(Tempd);
            qry.addBindValue(Hex_Data);
            qry.exec();
            qDebug()<<"New Record Found";
            QSqlQuery query;
            query.prepare("update "+Barcode_checkname+" set Temp='"+Hex_Data+"' where sno=1");
            if(query.exec())
                tested();
        }
    }
    else
    {
        Pro_Name=TestName;
        QSqlQuery query;
        bool ok;
        QSqlQuery q;
        qDebug()<<"For else";
        ok = q.exec("select * from "+Barcode_checkname+" where Data='"+Data+"'");
        if (ok && q.next())
        {
            qDebug()<<"Data Already Exists";
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);

            QFont font;
            font.setBold(true);
            msg.setFont(font);
            msg.setText("Kit already used , please scan new kit.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {

                ui->Home_Btn_13->setVisible(true);
                ui->Home_Btn_23->setVisible(false);
                //QString TestName1=TestName;
                // TestName1=ParameterNameToShow(TestName);
                ui->label_215->setText("Test Name : "+TestName+"");
                ui->lineEdit_13->clear();
                ui->label_270->clear();
                ui->label_271->clear();
                ui->lineEdit_17->clear();
                ui->lineEdit_15->clear();    ui->lineEdit_13->setFocus();
                ui->lineEdit_13->installEventFilter(this);
                this->installEventFilter(this);
                QDate Current_Year=QDate::currentDate();
                QDate Current_Month=QDate::currentDate();
                ui->dateEdit->setDisplayFormat("MM");
                ui->dateEdit->setDate(Current_Month);
                ui->dateEdit_2->setDisplayFormat("yyyy");
                ui->dateEdit_2->setDate(Current_Year);
                ui->stackedWidget->setCurrentIndex(22);
            }
        }
        else
        {
            QSqlQuery qry;
            qry.prepare("insert into "+Barcode_checkname+"(Pro_Name , Pro_Code, Lot_No, Expiry, Kit_No, Dist_Code, Date, Time , Count, Temp,Data) values(?,?,?,?,?,?,?,?,?,?,?)");
            qry.addBindValue(Pro_Name);
            qry.addBindValue(Pro_Code);
            qry.addBindValue(Lot_No);
            qry.addBindValue(Expiry);
            qry.addBindValue(Kit_No);
            qry.addBindValue(Dist_Code);
            qry.addBindValue(Date);
            qry.addBindValue(Time);
            qry.addBindValue(Count);
            qry.addBindValue(Tempd);
            qry.addBindValue(Hex_Data);
            qry.exec();
            qDebug()<<"New Record Found";
            QSqlQuery query;
            query.prepare("update "+Barcode_checkname+" set Temp='"+Hex_Data+"' where sno=1");
            if(query.exec())
                tested();
        }
    }
    ui->lineEdit_13->clear();
    ui->label_270->clear();
    ui->label_271->clear();
    ui->lineEdit_17->clear();
    ui->lineEdit_15->clear();
    ui->lineEdit_13->setFocus();
    ui->lineEdit_13->installEventFilter(this);
    this->installEventFilter(this);
    QDate Current_Year=QDate::currentDate();
    QDate Current_Month=QDate::currentDate();
    ui->dateEdit->setDisplayFormat("MM");
    ui->dateEdit->setDate(Current_Month);
    ui->dateEdit_2->setDisplayFormat("yyyy");
    ui->dateEdit_2->setDate(Current_Year);
}

void MainWindow::Barcode_ExistingCheck()
{
    QString Data = ui->lineEdit_13->text();
    QSqlQuery query;
    bool ok;
    QSqlQuery q;
    qDebug()<<"For else";
    Barcode_count_check_func();

    ok = q.exec("select * from "+Barcode_checkname+" where Data='"+Data+"'");
    if (ok && q.next())
    {
        qDebug()<<"Data Already Exists";
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("Kit already used , please scan new kit.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->lineEdit_13->clear();
            ui->label_270->clear();
            ui->label_271->clear();
            ui->lineEdit_17->clear();
            ui->lineEdit_15->clear();    ui->lineEdit_13->setFocus();
            ui->lineEdit_13->installEventFilter(this);
            this->installEventFilter(this);
            QDate Current_Year=QDate::currentDate();
            QDate Current_Month=QDate::currentDate();
            ui->dateEdit->setDisplayFormat("MM");
            ui->dateEdit->setDate(Current_Month);
            ui->dateEdit_2->setDisplayFormat("yyyy");
            ui->dateEdit_2->setDate(Current_Year);
        }
    }
    else
    {
        on_pushButton_242_clicked();
    }
}
void MainWindow::on_pushButton_242_clicked()
{
    // Barcode Read....
    QString temp , temp1 , temp2 , temp3 , temp4 , temp5 , temp6 , temp7 , temp8 , temp9 , temp10 , temp11, temp12, temp13 , temp14, temp15, temp16, temp17, temp18, temp19, temp20, temp21;
    QString  temp22, temp23, temp24, temp25, temp26, temp27, temp28 , temp29 , temp30, temp31;
    QString t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,t41,t42,t43,t44,t45,t46,t47,t48,t49,t50,t51;
    QByteArray arry =  ui->lineEdit_13->text().toLocal8Bit().constData();
    qDebug()<<arry<<"Main val"<<arry[0]<<arry[1]<<arry[2]<<arry[3]<<arry[4]<<arry[5]<<arry[6]<<arry[7]<<arry[8]<<arry[9];

    temp1 = arry[5];
    temp2= arry[6];
    temp3=arry[7];
    temp4 = arry[8];
    temp5 = arry[9];
    t2=temp1;
    t3=temp2;
    t4=temp3;
    t5=temp4;
    t6=temp5;
    t7=arry[4];
    t8=arry[3];
    t9=arry[2];
    t10=arry[1];
    t11=arry[0];

    qDebug()<<t2<<t3<<t4<<t5<<t6<<t7<<t8<<t9<<t10<<t11;

    QString Data = t2+t3+t4+t5+t6+t7+t8+t9+t10+t11;

    qDebug()<<Data<<"Shuffle";

    QString number = "1";
    QByteArray aa;
    bool ok;
    QString val1= aa.append(Data);

    qDebug()<<val1<<"val"<<aa<<"Arry Val";

    QString vall1 =QString::number(aa.toLongLong(&ok, 16),10);

    qDebug()<<"Checking"<<vall1;

    QByteArray ary =  vall1.toLocal8Bit().constData();

    qDebug()<<ary[0]<<ary[1]<<ary[2]<<ary[3]<<ary[4]<<ary[5]<<ary[6]<<ary[7]<<ary[8]<<ary[9]<<ary[10]<<ary[11]<<"Ary Val";

    //Pro_Code
    t12="M";
    t13="B";
    t14=ary[0];
    t15=ary[1];
    t16=ary[2];
    t17=ary[3];
    //Kit No
    t18=ary[4];
    t19=ary[5];
    t20=ary[6];
    t21=ary[7];
    t22=ary[8];
    //Dist Code
    t23=ary[9];
    t24=ary[10];
    t25=ary[11];


    qDebug()<<t12+t13+t14+t15+t16+t17+t18+t19+t20+t21+t22+t23+t24+t25<<"Club";

    QString procode=t12+t13+t14+t15+t16+t17;
    QString Distcode=t23+t24+t25;
    QString kitno=t18+t19+t20+t21+t22;
    P_Name = t12+t13+t14+t15+t16+t17;

    //ui->label_270->setText(procode);
    QString Distributor_Code ;
    QString txt = ui->lineEdit_13->text();
    QSqlQuery qry;
    qry.prepare("select Distributor_code from Distributor where sno=1");
    qry.exec();
    while(qry.next())
    {
        Distributor_Code = qry.value(0).toString();
    }
    qDebug()<<"Distributor_Code : "<<Distributor_Code<<Distcode<<procode;
    QString Barcode_Test_Name;
    if(P_Name=="MB1011")
        Barcode_Test_Name="GLUCOSE";
    else if(P_Name=="MB1021")
        Barcode_Test_Name="GLUCOSE-HK";
    else if(P_Name=="MB1031")
        Barcode_Test_Name="ADA";
    else if(P_Name=="MB1041")
        Barcode_Test_Name="ALBUMIN";
    else if(P_Name=="MB1051")
        Barcode_Test_Name="ALP";
    else if(P_Name=="MB1061")
        Barcode_Test_Name="AMYLASE";
    else if(P_Name=="MB1071")
        Barcode_Test_Name="AMMONIA";
    else if(P_Name=="MB1081")
        Barcode_Test_Name="ASO";
    else if(P_Name=="MB1091")
        Barcode_Test_Name="ACE";
    else if(P_Name=="MB1101")
        Barcode_Test_Name="BICARBONATE";
    else if(P_Name=="MB1111")
        Barcode_Test_Name="BILIRUBIN DIRECT";
    else if(P_Name=="MB1121")
        Barcode_Test_Name="BILIRUBIN TOTAL";
    else if(P_Name=="MB1131")
        Barcode_Test_Name="CALCIUM";
    else if(P_Name=="MB1141")
        Barcode_Test_Name="CHLORIDE";
    else if(P_Name=="MB1151")
        Barcode_Test_Name="CK-MB";
    else if(P_Name=="MB1161")
        Barcode_Test_Name="CK-NAC";
    else if(P_Name=="MB1171")
        Barcode_Test_Name="CREATININE(ENZY)";
    else if(P_Name=="MB1181")
        Barcode_Test_Name="CREATININE(KINE)";
    else if(P_Name=="MB1191")
        Barcode_Test_Name="ETHYL ALCOHOL";
    else if(P_Name=="MB1201")
        Barcode_Test_Name="GAMMA GT";
    else if(P_Name=="MB1211")
        Barcode_Test_Name="GOT(AST)";
    else if(P_Name=="MB1221")
        Barcode_Test_Name="GPT(ALT)";
    else if(P_Name=="MB1231")
        Barcode_Test_Name="HDL CHOLESTEROL";
    else if(P_Name=="MB1241")
        Barcode_Test_Name="HEMOGLOBIN";
    else if(P_Name=="MB1251")
        Barcode_Test_Name="HOMOCYSTEINE";
    else if(P_Name=="MB1261")
        Barcode_Test_Name="IRON";
    else if(P_Name=="MB1271")
        Barcode_Test_Name="LACTATE";
    else if(P_Name=="MB1281")
        Barcode_Test_Name="LDH";
    else if(P_Name=="MB1291")
        Barcode_Test_Name="LDL CHOLESTEROL";
    else if(P_Name=="MB1301")
        Barcode_Test_Name="LIPASE";
    else if(P_Name=="MB1311")
        Barcode_Test_Name="MAGNESIUM";
    else if(P_Name=="MB1321")
        Barcode_Test_Name="MICROALBUMIN";
    else if(P_Name=="MB1331")
        Barcode_Test_Name="PHOSPHOLIPIDS";
    else if(P_Name=="MB1341")
        Barcode_Test_Name="PHOSPHORUS-UV";
    else if(P_Name=="MB1351")
        Barcode_Test_Name="PHOSPHORUS-C";
    else if(P_Name=="MB1361")
        Barcode_Test_Name="POTASSIUM";
    else if(P_Name=="MB1371")
        Barcode_Test_Name="RHEUMATOID FACTOR";
    else if(P_Name=="MB1381")
        Barcode_Test_Name="SODIUM";
    else if(P_Name=="MB1391")
        Barcode_Test_Name="TOTAL CHOLESTEROL";
    else if(P_Name=="MB1401")
        Barcode_Test_Name="TOTAL PROTEIN";
    else if(P_Name=="MB1411")
        Barcode_Test_Name="TPU/CSF";
    else if(P_Name=="MB1421")
        Barcode_Test_Name="TIBC";
    else if(P_Name=="MB1431")
        Barcode_Test_Name="TRIGLYCERIDES";
    else if(P_Name=="MB1441")
        Barcode_Test_Name="UREA";
    else if(P_Name=="MB1451")
        Barcode_Test_Name="URIC ACID";
    else if(P_Name=="MB1461")
        Barcode_Test_Name="ZINC";
    else if(P_Name=="MB1471")
        Barcode_Test_Name="CHOLINESTERASE";
    else if(P_Name=="MB1481")
        Barcode_Test_Name="COPPER";
    else if(P_Name=="MB1491")
        Barcode_Test_Name="LITHIUM";
    else if(P_Name=="MB1501")
        Barcode_Test_Name="TBA";
    else if(P_Name=="MB1511")
        Barcode_Test_Name="UIBC";
    else if(P_Name=="MB1521")
        Barcode_Test_Name="GD";
    else if(P_Name=="MB1462")
        Barcode_Test_Name="ZINC-S";
    else if(P_Name=="MB1651")
        Barcode_Test_Name="MAGNESIUM(C)";
    else if(P_Name=="MB1212")
        Barcode_Test_Name="AST-S";
    else if(P_Name=="MB1222")
        Barcode_Test_Name="ALT-S";
    else if(P_Name=="MB1052")
        Barcode_Test_Name="ALP-S";
    else if(P_Name=="MB1122")
        Barcode_Test_Name="BILIRUBIN TOTAL-S";
    else if(P_Name=="MB1182")
        Barcode_Test_Name="CREATININE-S";

    if(Distcode==Distributor_Code)
    {
        if(txt=="")
        {
            ui->label_270->clear();
            ui->lineEdit_18->clear();
            ui->lineEdit_17->clear();
        }
        else
        {
            qDebug()<<"Enter :"<<procode;
            ui->label_271->setText(Barcode_Test_Name);
            ui->label_270->setText(procode);
            ui->lineEdit_18->setText(Distcode);
            ui->lineEdit_17->setText(kitno);
        }
    }
    else
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;");
        msg.setText("The scanned kit distributor code is wrong. Scan the correct barcode");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->Home_Btn_13->setVisible(true);
            ui->Home_Btn_23->setVisible(false);
            //QString TestName1=TestName;
            //TestName1=ParameterNameToShow(TestName);
            ui->label_215->setText("Test Name : "+TestName+"");

            ui->lineEdit_13->clear();
            ui->label_270->clear();
            ui->label_271->clear();
            ui->lineEdit_15->clear();
            QDate Current_Year=QDate::currentDate();
            QDate Current_Month=QDate::currentDate();
            ui->dateEdit->setDisplayFormat("MM");
            ui->dateEdit->setDate(Current_Month);
            ui->dateEdit_2->setDisplayFormat("yyyy");
            ui->dateEdit_2->setDate(Current_Year);
            ui->stackedWidget->setCurrentIndex(22);
        }
    }
}

void MainWindow::productcheck()
{
    if(Prod_Code == P_Name)
    {
        QString Wave;
        CheckBarLOTMMYY();
        QSqlQuery query;
        query.prepare("select wave from test where name='"+TestName+"'");
        query.exec();
        while(query.next())
            Wave=query.value(0).toString();

        if(Wave=="340 nm")
        {
            Wave_LED_OFF();
            Wave_LED_340();
        }
        else if (Wave=="405 nm")
        {
            Wave_LED_OFF();
            Wave_LED_405();
        }
        else if (Wave=="505 nm")
        {
            Wave_LED_OFF();
            Wave_LED_505();
        }
        else if (Wave=="545 nm")
        {
            Wave_LED_OFF();
            Wave_LED_545();
        }
        else if (Wave=="570 nm")
        {
            Wave_LED_OFF();
            Wave_LED_570();
        }
        else if (Wave=="630 nm")
        {
            Wave_LED_OFF();
            Wave_LED_630();
        }
        else if (Wave=="700 nm")
        {
            Wave_LED_OFF();
            Wave_LED_700();
        }
    }

    else
    {
        qDebug()<<"Found Error";
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("Please select the correct one, you have selected a different parameter & kit.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {

            ui->Home_Btn_13->setVisible(true);
            ui->Home_Btn_23->setVisible(false);  // QString TestName1=TestName;
            // TestName1=ParameterNameToShow(TestName);
            ui->label_215->setText("Test Name : "+TestName+"");

            ui->lineEdit_13->clear();
            ui->label_270->clear();
            ui->label_271->clear();
            ui->lineEdit_17->clear();
            ui->lineEdit_15->clear();
            ui->lineEdit_13->setFocus();
            ui->lineEdit_13->installEventFilter(this);
            this->installEventFilter(this);
            QDate Current_Year=QDate::currentDate();
            QDate Current_Month=QDate::currentDate();
            ui->dateEdit->setDisplayFormat("MM");
            ui->dateEdit->setDate(Current_Month);
            ui->dateEdit_2->setDisplayFormat("yyyy");
            ui->dateEdit_2->setDate(Current_Year);
            ui->stackedWidget->setCurrentIndex(22);
        }

    }
}
void MainWindow::on_comboBox_currentTextChanged(const QString &arg1)
{
    Q_UNUSED(arg1);
    QString EQC ;
    double ctrl1min=0 , ctrl1max=0 , ctrl2min=0,ctrl2max=0;
    EQC=ui->comboBox->currentText();
    QSqlQuery query;
    query.prepare("select ctrl1min,ctrl1max,ctrl2min,ctrl2max from test where name='"+TestName+"'");
    query.exec();
    while(query.next())
    {
        ctrl1min=query.value(0).toDouble();
        ctrl1max=query.value(1).toDouble();
        ctrl2min=query.value(2).toDouble();
        ctrl2max=query.value(3).toDouble();
    }
    if(EQC=="QC - 1")
    {

        ui->label_274->setText(QString::number(ctrl1min,'f',2));
        ui->label_275->setText(QString::number(ctrl1max,'f',2));
        if(qc1retestbtn==1)
        {
            ui->Retest_3->setDisabled(false);
            //qc1retestbtn=0;
        }
        else if(qc1retestbtn==0)
        {
            ui->Retest_3->setDisabled(true);
        }

    }
    else if(EQC=="QC - 2")
    {
        ui->label_274->setText(QString::number(ctrl2min,'f',2));
        ui->label_275->setText(QString::number(ctrl2max,'f',2));
        if(qc2retestbtn==1)
        {
            ui->Retest_3->setDisabled(false);
            // qc2retestbtn=0;
        }
        else if(qc2retestbtn==0)
        {
            ui->Retest_3->setDisabled(true);
        }
    }
    qDebug()<<"Endpoint QC Text : "<<EQC;
}

void MainWindow::Pro_Code_Check()
{
    Barcode_count_check_func();
    QString Temp;
    QSqlQuery query;
    query.prepare("select Temp from "+Barcode_checkname+" where sno =1");
    query.exec();
    while(query.next())
        Temp=query.value(0).toString();

    int Cnt=0;
    QSqlQuery qury;
    qury.prepare("select Count from "+Barcode_checkname+" where Data='"+Temp+"'");
    qury.exec();
    while(qury.next())
        Cnt=qury.value(0).toInt();

    if(Cnt==0)
    {
        qDebug()<<"Count Empty";
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("No test left , please scan the new kit and start the test.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->Home_Btn_13->setVisible(true);
            ui->Home_Btn_23->setVisible(false);
            ui->label_215->setText("Test Name : "+TestName+"");
            ui->lineEdit_13->clear();
            ui->label_270->clear();
            ui->label_271->clear();
            ui->lineEdit_17->clear();
            ui->lineEdit_15->clear();    ui->lineEdit_13->setFocus();
            ui->lineEdit_13->installEventFilter(this);
            this->installEventFilter(this);
            QDate Current_Year=QDate::currentDate();
            QDate Current_Month=QDate::currentDate();
            ui->dateEdit->setDisplayFormat("MM");
            ui->dateEdit->setDate(Current_Month);
            ui->dateEdit_2->setDisplayFormat("yyyy");
            ui->dateEdit_2->setDate(Current_Year);
            ui->stackedWidget->setCurrentIndex(22);
            readtimer->stop();
        }
    }
    else
    {
        QString results;
        Cnt--;
        results= QString::number(Cnt);
        QSqlQuery qry;
        qry.prepare("update "+Barcode_checkname+" set Count='"+results+"'  where Data='"+Temp+"'");
        if(qry.exec())
        {
            ui->label_253->setText(results);
            qDebug()<<"Count Update Done";
        }
        else
        {
            qDebug()<<"Update Failed";
        }
        conditioncheck();
    }
}
void MainWindow::Barcode_count_check_func()
{
    if(Prod_Code=="MB1011")
        Barcode_checkname="Glucose";
    else if(Prod_Code=="MB1021")
        Barcode_checkname="Glucose_HK";
    else if(Prod_Code=="MB1031")
        Barcode_checkname="ADA";
    else if(Prod_Code=="MB1041")
        Barcode_checkname="Albumin";
    else if(Prod_Code=="MB1051")
        Barcode_checkname="ALP";
    else if(Prod_Code=="MB1061")
        Barcode_checkname="Amylase";
    else if(Prod_Code=="MB1071")
        Barcode_checkname="Ammonia";
    else if(Prod_Code=="MB1081")
        Barcode_checkname="ASO";
    else if(Prod_Code=="MB1091")
        Barcode_checkname="ACE";
    else if(Prod_Code=="MB1101")
        Barcode_checkname="Bicarbonate";
    else if(Prod_Code=="MB1111")
        Barcode_checkname="BDirect";
    else if(Prod_Code=="MB1121")
        Barcode_checkname="BTotal";
    else if(Prod_Code=="MB1131")
        Barcode_checkname="Calcium";
    else if(Prod_Code=="MB1141")
        Barcode_checkname="Chloride";
    else if(Prod_Code=="MB1151")
        Barcode_checkname="CK_MB";
    else if(Prod_Code=="MB1161")
        Barcode_checkname="CK_NAC";
    else if(Prod_Code=="MB1171")
        Barcode_checkname="Crea_Enzy";
    else if(Prod_Code=="MB1181")
        Barcode_checkname="Crea_Kine";
    else if(Prod_Code=="MB1191")
        Barcode_checkname="Ethyl_Alco";
    else if(Prod_Code=="MB1201")
        Barcode_checkname="GGT";
    else if(Prod_Code=="MB1211")
        Barcode_checkname="AST";
    else if(Prod_Code=="MB1221")
        Barcode_checkname="ALT";
    else if(Prod_Code=="MB1231")
        Barcode_checkname="HDL_Choles";
    else if(Prod_Code=="MB1241")
        Barcode_checkname="Hemoglobin";
    else if(Prod_Code=="MB1251")
        Barcode_checkname="HCY";
    else if(Prod_Code=="MB1261")
        Barcode_checkname="Iron";
    else if(Prod_Code=="MB1271")
        Barcode_checkname="Lactate";
    else if(Prod_Code=="MB1281")
        Barcode_checkname="LDH";
    else if(Prod_Code=="MB1291")
        Barcode_checkname="LDL_Choles";
    else if(Prod_Code=="MB1301")
        Barcode_checkname="Lipase";
    else if(Prod_Code=="MB1311")
        Barcode_checkname="Magnesium";
    else if(Prod_Code=="MB1321")
        Barcode_checkname="Microalbumin";
    else if(Prod_Code=="MB1331")
        Barcode_checkname="Phospholipids";
    else if(Prod_Code=="MB1341")
        Barcode_checkname="Phos_UV";
    else if(Prod_Code=="MB1351")
        Barcode_checkname="Phos_C";
    else if(Prod_Code=="MB1361")
        Barcode_checkname="Potassium";
    else if(Prod_Code=="MB1371")
        Barcode_checkname="RF";
    else if(Prod_Code=="MB1381")
        Barcode_checkname="Sodium";
    else if(Prod_Code=="MB1391")
        Barcode_checkname="TC";
    else if(Prod_Code=="MB1401")
        Barcode_checkname="TP";
    else if(Prod_Code=="MB1411")
        Barcode_checkname="TPU_CSF";
    else if(Prod_Code=="MB1421")
        Barcode_checkname="TIBC";
    else if(Prod_Code=="MB1431")
        Barcode_checkname="Trigly";
    else if(Prod_Code=="MB1441")
        Barcode_checkname="Urea";
    else if(Prod_Code=="MB1451")
        Barcode_checkname="Uric_Acid";
    else if(Prod_Code=="MB1461")
        Barcode_checkname="Zinc";
    else if(Prod_Code=="MB1471")
        Barcode_checkname="Cholin";
    else if(Prod_Code=="MB1481")
        Barcode_checkname="Copper";
    else if(Prod_Code=="MB1491")
        Barcode_checkname="Lithium";
    else if(Prod_Code=="MB1501")
        Barcode_checkname="TBA";
    else if(Prod_Code=="MB1511")
        Barcode_checkname="UIBC";
    else if(Prod_Code=="MB1521")
        Barcode_checkname="GD";

    else if(Prod_Code=="MB1462")
        Barcode_checkname="ZINC_S";
    else if(Prod_Code=="MB1651")
        Barcode_checkname="MAGNESIUM_C";
    else if(Prod_Code=="MB1212")
        Barcode_checkname="AST_S";
    else if(Prod_Code=="MB1222")
        Barcode_checkname="ALT_S";
    else if(Prod_Code=="MB1052")
        Barcode_checkname="ALP_S";
    else if(Prod_Code=="MB1122")
        Barcode_checkname="BILIRUBINTOTAL_S";
    else if(Prod_Code=="MB1182")
        Barcode_checkname="CREATININE_S";

}

void MainWindow::Pro_Code_CheckAdd()
{
    Barcode_count_check_func();
    QString Temp;
    QSqlQuery query;
    query.prepare("select Temp from "+Barcode_checkname+" where sno =1");
    query.exec();
    while(query.next())
        Temp=query.value(0).toString();
    int Cnt=0;
    QSqlQuery qury;
    qury.prepare("select Count from "+Barcode_checkname+" where Data='"+Temp+"'");
    qury.exec();
    while(qury.next())
        Cnt=qury.value(0).toInt();

    if(Cnt==0)
    {
        qDebug()<<"Count Empty";
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("No test left , please scan the new kit and start the test.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->Home_Btn_13->setVisible(true);
            ui->Home_Btn_23->setVisible(false);
            ui->label_215->setText("Test Name : "+TestName+"");
            ui->lineEdit_13->clear();
            ui->label_270->clear();
            ui->label_271->clear();
            ui->lineEdit_17->clear();
            ui->lineEdit_15->clear();    ui->lineEdit_13->setFocus();
            ui->lineEdit_13->installEventFilter(this);
            this->installEventFilter(this);
            QDate Current_Year=QDate::currentDate();
            QDate Current_Month=QDate::currentDate();
            ui->dateEdit->setDisplayFormat("MM");
            ui->dateEdit->setDate(Current_Month);
            ui->dateEdit_2->setDisplayFormat("yyyy");
            ui->dateEdit_2->setDate(Current_Year);
            ui->stackedWidget->setCurrentIndex(22);
            readtimer->stop();
        }
    }
    else
    {
        QString results;
        Cnt++;
        results= QString::number(Cnt);
        QSqlQuery qry;
        qry.prepare("update "+Barcode_checkname+" set Count='"+results+"'  where Data='"+Temp+"'");
        if(qry.exec())
        {
            ui->label_253->setText(results);
            qDebug()<<"Count Update Done";
        }
        else
        {
            qDebug()<<"Update Failed";
        }
    }
}

void MainWindow::conditioncheck()
{
    qApp->processEvents();
    if(option==2)
    {
        endcalibrate();
    }
    else if(option==3)
    {
        endsample();
    }
    else if(option==12)
    {
        qDebug()<<"Enter Condition check opt --- 12";
        endqcrun();

    }
    else if(option==5 || option==8)
    {
        twocalibrate();
    }
    else if(option==6 || option==9)
    {
        twosample();
    }
    else if(option==13 || option==14)
    {
        twoqcrun();
    }
    else if(option==15)
    {
        endreqcrun();
    }
}
void MainWindow::on_comboBox_2_currentTextChanged(const QString &arg1)
{
    Q_UNUSED(arg1);
    // Fixed Kinetic //
    QString EQC ;
    double ctrl1min=0 , ctrl1max=0, ctrl2min=0,ctrl2max=0;
    EQC=ui->comboBox_2->currentText();
    QSqlQuery query;
    query.prepare("select ctrl1min,ctrl1max,ctrl2min,ctrl2max from test where name='"+TestName+"'");
    query.exec();
    while(query.next())
    {
        ctrl1min=query.value(0).toDouble();
        ctrl1max=query.value(1).toDouble();
        ctrl2min=query.value(2).toDouble();
        ctrl2max=query.value(3).toDouble();
    }
    if(EQC=="QC - 1")
    {
        ui->label_277->setText(QString::number(ctrl1min,'f',2));
        ui->label_278->setText(QString::number(ctrl1max,'f',2));
    }
    else if(EQC=="QC - 2")
    {
        ui->label_277->setText(QString::number(ctrl2min,'f',2));
        ui->label_278->setText(QString::number(ctrl2max,'f',2));
    }
}

void MainWindow::QC_plot_func()
{
    QString ctrl1min , ctrl1max , ctrl1bno , unit;
    QList<double> list;
    QList<double> lit;
    QList<QString> datefmt;
    QList<QString> timefmt;
    QString date;
    QString time;
    int count=0;
    QSqlQuery qury;
    if(End_qc1_opt==1 || Two_qc1_opt==1 || Kin_qc1_opt==1)
    {
        ui->label_61->setText("QC-1");
        qury.prepare("select * from "+QC1_Testname+" where Date='"+Dateee+"'");
        ui->label_258->setText(QString::number(QC1));
    }
    else if (End_qc2_opt==1 || Two_qc2_opt==1 || Kin_qc2_opt==1)
    {
        ui->label_61->setText("QC-2");
        qury.prepare("select * from "+QC2_Testname+" where Date='"+Dateee+"'");
        ui->label_258->setText(QString::number(QC2));
    }
    qury.exec();
    while(qury.next())
    {
        list.append(qury.value(3).toDouble());
        lit.append(qury.value(10).toInt());
        ctrl1min=qury.value(6).toString();
        ctrl1bno=qury.value(13).toString();
        ctrl1max=qury.value(7).toString();
        unit=qury.value(5).toString();
        date=(qury.value(8).toString());
        time=(qury.value(9).toString());
        datefmt.append(qury.value(8).toString());
        timefmt.append(qury.value(9).toString());
        arraylst[count]=date;
        count++;
    }

    ui->label_65->setText(ctrl1min);
    ui->label_66->setText(ctrl1max);
    ui->label_255->setText(ctrl1bno);
    ui->label_259->setText(unit);

    double minval = ctrl1min.toDouble();
    double maxval = ctrl1max.toDouble();
    double val= minval+maxval;
    double mean= val/2;
    double diff = maxval-minval;
    double SD=diff/5;
    double sd1pos = mean+SD;
    double sd1neg = mean-SD;
    double sd2pos = mean+(SD*2);
    double sd2neg = mean-(SD*2);
    double sd3pos = mean+(SD*3);
    double sd3neg = mean-(SD*3);
    QString frt = QString::number(sd3neg);
    QString sec = QString::number(sd2neg);
    QString thi = QString::number(sd1neg);
    QString mid = QString::number(mean);
    QString fou = QString::number(sd1pos);
    QString fif = QString::number(sd2pos);
    QString six = QString::number(sd3pos);
    QByteArray aa;
    aa.append(frt);
    aa.append(sec);
    aa.append(thi);
    aa.append(mid);
    aa.append(fou);
    aa.append(fif);
    aa.append(six);
    QVector<double> xv1(2);
    QVector<double> yv1(2);
    QVector<double> yv2(2);
    QVector<double> yv3(2);
    QVector<double> yv4(2);
    QVector<double> yv5(2);
    QVector<double> yv6(2);
    QVector<double> yv7(2);
    QVector<double> yv8(2);
    QVector<double> xv4(2);
    yv1[0]=yv1[1]=sd3neg;
    yv2[0]=yv2[1]=sd2neg;
    yv3[0]=yv3[1]=sd1neg;
    yv4[0]=yv4[1]=mean;
    yv5[0]=yv5[1]=sd1pos;
    yv6[0]=yv6[1]=sd2pos;
    yv7[0]=yv7[1]=sd3pos;
    xv1[0]=xv1[1]=25;
    yv8[0]=yv8[1]=30;

    QVector<double> x(101), y(101); // initialize with entries 0..100
    for (int i=0; i<101; ++i)
    {
        x[i] = i/50.0 - 1; // x goes from -1 to 1
        y[i] = x[i]*x[i]; // let's plot a quadratic function
    }
    QSharedPointer<QCPAxisTickerTime> timeTicker(new QCPAxisTickerTime);
    QDateTime currentTime = QDateTime::currentDateTime();
    QVector<double> x1 , y1;
    x1=list.toVector(); //Concentrat
    y1=lit.toVector(); //x val = 5,10,15
    double xv=lit.last();
    ui->customPlot_2->addGraph();
    ui->customPlot_2->update();
    ui->customPlot_2->graph(0)->setData(y1, x1);
    ui->customPlot_2->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
    ui->customPlot_2->graph(0)->setLineStyle(QCPGraph::lsLine);
    ui->customPlot_2->graph(0)->setPen(QPen(Qt::blue,1));
    ui->customPlot_2->graph(0)->selectionDecorator()->setPen(QPen(Qt::green));
    ui->customPlot_2->xAxis->setLabel("x");
    ui->customPlot_2->yAxis->setLabel("y");
    QSharedPointer<QCPAxisTickerText> textTicker(new QCPAxisTickerText);
    textTicker->addTick(sd3neg, "-3SD");
    textTicker->addTick(sd2neg, "-2SD");
    textTicker->addTick(sd1neg, "-1SD");
    textTicker->addTick(mean, "X");
    textTicker->addTick(sd1pos, "1SD");
    textTicker->addTick(sd2pos, "2SD");
    textTicker->addTick(sd3pos, "3SD");
    int count1=0;
    int value = datefmt.size();
    qDebug()<<"Value... : "<<value;
    QString d1,t1;
    QSharedPointer<QCPAxisTickerText> textTicker1(new QCPAxisTickerText);
    ui->customPlot_2->xAxis->setTickLabelRotation(45);

    for (int i=0;i< value;i++ )
    {
        d1=datefmt[i].toLatin1().data();      // d2=date[1].toLatin1().data();
        t1=timefmt[i].toLatin1().data();
        count1 = count1+10;
        qDebug()<<"date val - Urea : "<<d1<<i<<count1;
        textTicker1->addTick(count1, d1+"\n"+t1);
    }
    ui->customPlot_2->xAxis->setTicker(textTicker1);
    ui->customPlot_2->yAxis->setTicker(textTicker);
    ui->customPlot_2->xAxis->setRange(1, xv+5);
    ui->customPlot_2->yAxis->setRange(sd3neg-0.25,sd3pos+0.25);
    ui->customPlot_2->replot();
    ui->customPlot_2->update();
    QThread::msleep(200);
    if(Obj_data==1 || Obj_data==2)
        //Two_QC1_print_image();
        qDebug()<<"print";
    else
        qDebug()<<"ENdpoint Data-qc1";
}

void MainWindow::on_Home_Btn_14_clicked()
{
    ui->stackedWidget_3->setCurrentIndex(0);
}

void MainWindow::on_Home_Btn_15_clicked()
{
    ui->stackedWidget_3->setCurrentIndex(0);
    ui->comboBox_15->clear();
    ui->comboBox_16->clear();
}

void MainWindow::on_Home_Btn_16_clicked()
{
    ui->stackedWidget->setCurrentIndex(1);
}

void MainWindow::QC1_loop()
{
    qApp->processEvents();
    static const std::unordered_map<std::string, std::string> prodToQC1 = {
        {"MB1011", "Glucose_QC1"}, {"MB1021", "Glucose_HTP_QC1"}, {"MB1031", "ADA_QC1"},
        {"MB1041", "Albumin_QC1"}, {"MB1051", "ALP_QC1"}, {"MB1061", "Amylase_QC1"},
        {"MB1071", "Ammonia_QC1"}, {"MB1081", "ASO_QC1"}, {"MB1091", "ACE_QC1"},
        {"MB1101", "Bicarbonate_QC1"}, {"MB1111", "BDirect_QC1"}, {"MB1121", "BTotal_QC1"},
        {"MB1131", "Calcium_QC1"}, {"MB1141", "Chloride_QC1"}, {"MB1151", "CK_MB_QC1"},
        {"MB1161", "CK_NAC_QC1"}, {"MB1171", "Crea_Enzy_QC1"}, {"MB1181", "Crea_Kine_QC1"},
        {"MB1191", "Ethyl_Alco_QC1"}, {"MB1201", "GGT_QC1"}, {"MB1211", "AST_QC1"},
        {"MB1221", "ALT_QC1"}, {"MB1231", "HDL_QC1"}, {"MB1241", "Hemoglobin_QC1"},
        {"MB1251", "Hcy_QC1"}, {"MB1261", "Iron_QC1"}, {"MB1271", "Lactate_QC1"},
        {"MB1281", "LDH_QC1"}, {"MB1291", "LDL_QC1"}, {"MB1301", "Lipase_QC1"},
        {"MB1311", "Magnesium_QC1"}, {"MB1321", "Micro_QC1"}, {"MB1331", "Phos_QC1"},
        {"MB1341", "Phos_UV_QC1"}, {"MB1351", "Phos_C_QC1"}, {"MB1361", "Potassium_QC1"},
        {"MB1371", "RF_QC1"}, {"MB1381", "Sodium_QC1"}, {"MB1391", "TC_QC1"},
        {"MB1401", "TP_QC1"}, {"MB1411", "TPU_QC1"}, {"MB1421", "TIBC_QC1"},
        {"MB1431", "Trigly_QC1"}, {"MB1441", "Urea_QC1"}, {"MB1451", "UA_QC1"},
        {"MB1461", "Zinc_QC1"}, {"MB1471", "Cholin_QC1"}, {"MB1481", "Copper_QC1"},
        {"MB1491", "Lithium_QC1"}, {"MB1501", "TBA_QC1"}, {"MB1511", "UIBC_QC1"},
        {"MB1521", "GD_QC1"},{"MB1462","ZINC_S_QC1"},{"MB1651","MAGNESIUM_C_QC1"},
        {"MB1212","AST_S_QC1"},{"MB1222","ALT_S_QC1"},{"MB1052","ALP_S_QC1"},{"MB1122","BTotal_S_QC1"},{"MB1182","CREATININE_S_QC1"}

    };

    auto it = prodToQC1.find(Prod_Code.toStdString());
    QC1_Testname = (it != prodToQC1.end()) ? QString::fromStdString(it->second) : "Unknown_QC2";
}

void MainWindow::QC2_loop()
{
    qApp->processEvents();
    static const std::unordered_map<std::string, std::string> prodToQC2 = {
        {"MB1011", "Glucose_QC2"}, {"MB1021", "Glucose_HTP_QC2"}, {"MB1031", "ADA_QC2"},
        {"MB1041", "Albumin_QC2"}, {"MB1051", "ALP_QC2"}, {"MB1061", "Amylase_QC2"},
        {"MB1071", "Ammonia_QC2"}, {"MB1081", "ASO_QC2"}, {"MB1091", "ACE_QC2"},
        {"MB1101", "Bicarbonate_QC2"}, {"MB1111", "BDirect_QC2"}, {"MB1121", "BTotal_QC2"},
        {"MB1131", "Calcium_QC2"}, {"MB1141", "Chloride_QC2"}, {"MB1151", "CK_MB_QC2"},
        {"MB1161", "CK_NAC_QC2"}, {"MB1171", "Crea_Enzy_QC2"}, {"MB1181", "Crea_Kine_QC2"},
        {"MB1191", "Ethyl_Alco_QC2"}, {"MB1201", "GGT_QC2"}, {"MB1211", "AST_QC2"},
        {"MB1221", "ALT_QC2"}, {"MB1231", "HDL_QC2"}, {"MB1241", "Hemoglobin_QC2"},
        {"MB1251", "Hcy_QC2"}, {"MB1261", "Iron_QC2"}, {"MB1271", "Lactate_QC2"},
        {"MB1281", "LDH_QC2"}, {"MB1291", "LDL_QC2"}, {"MB1301", "Lipase_QC2"},
        {"MB1311", "Magnesium_QC2"}, {"MB1321", "Micro_QC2"}, {"MB1331", "Phos_QC2"},
        {"MB1341", "Phos_UV_QC2"}, {"MB1351", "Phos_C_QC2"}, {"MB1361", "Potassium_QC2"},
        {"MB1371", "RF_QC2"}, {"MB1381", "Sodium_QC2"}, {"MB1391", "TC_QC2"},
        {"MB1401", "TP_QC2"}, {"MB1411", "TPU_QC2"}, {"MB1421", "TIBC_QC2"},
        {"MB1431", "Trigly_QC2"}, {"MB1441", "Urea_QC2"}, {"MB1451", "UA_QC2"},
        {"MB1461", "Zinc_QC2"}, {"MB1471", "Cholin_QC2"}, {"MB1481", "Copper_QC2"},
        {"MB1491", "Lithium_QC2"}, {"MB1501", "TBA_QC2"}, {"MB1511", "UIBC_QC2"},
        {"MB1521", "GD_QC2"},{"MB1462","ZINC_S_QC2"},{"MB1651","MAGNESIUM_C_QC2"},
        {"MB1212","AST_S_QC2"},{"MB1222","ALT_S_QC2"},{"MB1052","ALP_S_QC2"},{"MB1122","BTotal_S_QC2"},{"MB1182","CREATININE_S_QC2"}
    };

    auto it = prodToQC2.find(Prod_Code.toStdString());
    QC2_Testname = (it != prodToQC2.end()) ? QString::fromStdString(it->second) : "Unknown_QC2";
}

void MainWindow::on_Retest_3_clicked()
{
    option=15;
    Run_Data=0;
    BackBlankfunc=1;
    QCreteststop=1;
    qc1retestbtn = 0;
    qc2retestbtn = 0;
    clearGraph_end();
    ui->label_12->clear();
    ui->label_32->clear();
    ui->Home_Btn_3->setVisible(true);
    ui->Home_Btn_3->setDisabled(true);
    ui->Stop_Btn_2->setVisible(false);
    ui->Stop_Btn->setVisible(true);
    ui->Stop_Btn->setEnabled(true);
    ui->Retest_3->setEnabled(false);
    ui->label_6->setEnabled(true);
    ui->label_6->clear();
    ui->label_75->clear();
    ui->label_208->clear();
    ui->label_7->setVisible(false);
    ui->label_6->setVisible(false);
    ui->label_228->clear();
    ui->label_273->clear();
    ui->label_7->setText("Abs-B.Abs");
    ui->label_203->setVisible(false);
    ui->label_204->setVisible(false);
    ui->label_208->setVisible(true);
    ui->label_209->setVisible(true);
    ui->label_207->setVisible(false);
    ui->label_75->setVisible(false);
    ui->label_228->clear();
    ui->label_273->clear();
    ui->label_254->setVisible(false);
    ui->RunCal_Btn->setDisabled(true);
    ui->RunSample_Btn->setDisabled(true);
    ui->RunBlank_Btn->setDisabled(true);
    ui->E_QC_Check->setDisabled(true);
    ui->Save_Btn_5->setDisabled(true);
    ui->comboBox->setDisabled(true);
    ui->Retest_5->setDisabled(true);
    ui->Print_Btn->setDisabled(true);
    conditioncheck();

}

void MainWindow::Autocalibrate()
{
    ui->stackedWidget->setCurrentIndex(28);
}

void MainWindow::ProductCodeChoose()
{
    if(Prod_Code=="MB1011")
    {
        qDebug()<<"glucose";
        decimalpoint=0;
    }
    else if(Prod_Code=="MB1021")
    {
    }
    else if(Prod_Code=="MB1031")
    {
    }
    else if(Prod_Code=="MB1041")
    {
        //1 Decimal Point
        decimalpoint=1;
    }
    else if(Prod_Code=="MB1051")
    {
        //0 Decimal Point
        decimalpoint=0;
    }
    else if(Prod_Code=="MB1061")
    {
        //0 Decimal Point
        decimalpoint=0;
    }
    else if(Prod_Code=="MB1071")
    {
    }
    else if(Prod_Code=="MB1081")
    {
    }
    else if(Prod_Code=="MB1091")
    {
    }
    else if(Prod_Code=="MB1101")
    {
    }
    else if(Prod_Code=="MB1111")
    {
    }
    else if(Prod_Code=="MB1121")
    {
        //2 Decimal Point
        decimalpoint=2;
    }
    else if(Prod_Code=="MB1131")
    {
        //2 Decimal Point
        decimalpoint=2;
    }
    else if(Prod_Code=="MB1141")
    {
    }
    else if(Prod_Code=="MB1151")
    {
        //0 Decimal Point
        decimalpoint=0;
    }
    else if(Prod_Code=="MB1161")
    {
        //0 Decimal Point
        decimalpoint=0;
    }
    else if(Prod_Code=="MB1171")
    {
    }
    else if(Prod_Code=="MB1181")
    {
        //2 Decimal Point
        decimalpoint=2;
    }
    else if(Prod_Code=="MB1191")
    {
    }
    else if(Prod_Code=="MB1201")
    {
        //0 Decimal Point
        decimalpoint=0;
    }
    else if(Prod_Code=="MB1211")
    {
        //0 Decimal Point
        decimalpoint=0;
    }
    else if(Prod_Code=="MB1221")
    {
        //0 Decimal Point
        decimalpoint=0;
    }
    else if(Prod_Code=="MB1231")
    {
    }
    else if(Prod_Code=="MB1241")
    {
    }
    else if(Prod_Code=="MB1251")
    {
    }
    else if(Prod_Code=="MB1261")
    {
    }
    else if(Prod_Code=="MB1271")
    {
    }
    else if(Prod_Code=="MB1281")
    {
        //0 Decimal Point
        decimalpoint=0;
    }
    else if(Prod_Code=="MB1291")
    {
    }
    else if(Prod_Code=="MB1301")
    {
        //0 Decimal Point
        decimalpoint=0;
    }
    else if(Prod_Code=="MB1311")
    {
    }
    else if(Prod_Code=="MB1321")
    {
    }
    else if(Prod_Code=="MB1331")
    {
    }
    else if(Prod_Code=="MB1341")
    {
        //2 Decimal Point
        decimalpoint=2;
    }
    else if(Prod_Code=="MB1351")
    {
    }
    else if(Prod_Code=="MB1361")
    {
    }
    else if(Prod_Code=="MB1371")
    {
    }
    else if(Prod_Code=="MB1381")
    {
    }
    else if(Prod_Code=="MB1391")
    {
        //0 Decimal Point
        decimalpoint=0;
    }
    else if(Prod_Code=="MB1401")
    {
        //1 Decimal Point
        decimalpoint=1;
    }
    else if(Prod_Code=="MB1411")
    {
    }
    else if(Prod_Code=="MB1421")
    {
    }
    else if(Prod_Code=="MB1431")
    {
        //0 Decimal Point
        decimalpoint=0;
    }
    else if(Prod_Code=="MB1441")
    {
        //0 Decimal Point
        decimalpoint=0;
    }
    else if(Prod_Code=="MB1451")
    {
        //1 Decimal Point
        decimalpoint=1;
    }
    else if(Prod_Code=="MB1461")
    {

    }
    else if(Prod_Code=="MB1471")
    {

    }
    else if(Prod_Code=="MB1481")
    {

    }
    else if(Prod_Code=="MB1491")
    {

    }
    else if(Prod_Code=="MB1501")
    {

    }
    else if(Prod_Code=="MB1511")
    {

    }
    else if(Prod_Code=="MB1521")
    {

    }
    else if(Prod_Code=="MB1462")
    {

    }
    else if(Prod_Code=="MB1651")
    {

    }
    else if(Prod_Code=="MB1212")
    {

    }
    else if(Prod_Code=="MB1222")
    {

    }
    else if(Prod_Code=="MB1052")
    {

    }
    else if(Prod_Code=="MB1122")
    {

    }
    else if(Prod_Code=="MB1182")
    {

    }
    qDebug()<<decimalpoint;
}

void MainWindow::on_pushButton_256_clicked()
{
    qApp->processEvents();
    QString Array = ui->label_427->text().toLocal8Bit().constData();;
    QString temp , temp1 , temp2 , temp3 , temp4, temp5 , temp6 , temp7, temp8,temp9,temp10,temp11 , temp12, temp13,temp14,temp15,begin,last;

    begin="'";
    temp=Array[0];
    temp1=Array[1];
    temp2=Array[2];
    temp3=Array[3];
    temp4="-";
    temp5=Array[7];
    temp6=Array[8];
    temp7="-";
    temp8=Array[12];
    temp9=Array[13];
    temp10=" ";
    temp11=ui->timeEdit->text();
    temp12=":";
    temp13=ui->timeEdit_2->text();
    last="'";

    QString Data = begin+temp+temp1+temp2+temp3+temp4+temp5+temp6+temp7+temp8+temp9+temp10+temp11+temp12+temp13+last;
    QByteArray aa;
    QString val= aa.append(Data);
    QString c_option("-c");
    QString script="sudo timedatectl set-time";
    QString Command_String = script + " " + val;
    qDebug()<<"c_option"<<c_option;
    qDebug()<<"Command_Script"<<Command_String;

    QProcess *process1 = new QProcess(this);
    process1->start("sh",QStringList()<<c_option<<Command_String);
    if (!process1->waitForStarted())
    {
        qDebug() << "Error : " << process1->errorString();
    }
    process1->waitForFinished(-1);
    delete process1; // Release memory when you're done

    QDate date=QDate::currentDate();
    QString datetext= date.toString("yyyy / MM / dd");
    ui->SysDate_Lbl->setText(datetext);

    QTime time = QTime::currentTime();
    QString time_text = time.toString("hh : mm : ss");
    ui->SysTime_Lbl->setText(time_text);
    QMessageBox msg(this);
    msg.setWindowFlags(Qt::Popup);
    msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
    QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
    auto newPixmap = p.scaled(80, 80);
    msg.setIconPixmap(newPixmap);

    msg.setText("Date & time set successfully.");
    QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
    saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
    msg.setDefaultButton(saveButton);
    msg.exec();
    if (msg.clickedButton() == saveButton)
    {
        ui->Home_Btn_12->setVisible(true);
        ui->Home_Btn_17->setVisible(false);
        ui->stackedWidget->setCurrentIndex(20);
        ui->stackedWidget_4->setCurrentIndex(0);
    }
}

void MainWindow::on_Stop_Btn_2_clicked()
{
    qApp->processEvents();
    QString React ;
    QSqlQuery qy;
    qy.prepare("select rctn from test where name='"+TestName+"'");
    qy.exec();
    while(qy.next())
        React=qy.value(0).toString();

    if(React=="End point")
    {
        readtimer->stop();
        if(option==2)
        {
            // endpoint cal
            QString abs , fact ;
            QSqlQuery qy;
            qy.prepare("select fact , calibrateabs from test where name='"+TestName+"'");
            qy.exec();
            while(qy.next())
            {
                fact=qy.value(0).toString();
                abs=qy.value(1).toString();
            }
            if(fact=="")
            {
                ui->label_226->setVisible(true);
                ui->label_224->setVisible(true);
                ui->label_224->setText(abs);
                ui->label_225->setVisible(true);
                ui->label_227->setVisible(true);
                ui->label_242->setVisible(false);
                ui->label_241->setVisible(false);
            }
            else
            {
                ui->label_226->setVisible(false);
                ui->label_224->setVisible(false);
                ui->label_225->setVisible(false);
                ui->label_227->setVisible(false);
                ui->label_242->setVisible(true);
                ui->label_242->setText(fact);
                ui->label_241->setVisible(true);

            }
            endqcfinish=0;
            endsampfinish=0;
            ui->comboBox->setEnabled(true);
            ui->Retest_5->setEnabled(true);
            ui->Retest->setDisabled(true);
            ui->Retest_3->setDisabled(true);
            ui->Retest_4->setDisabled(true);
            ui->Save_Btn_5->setDisabled(true);
        }

        else if(option==12)
        {
            ui->comboBox->setEnabled(true);
            ui->Retest_5->setEnabled(true);
            ui->Retest->setDisabled(true);
            ui->Retest_3->setDisabled(true);
            ui->Retest_4->setDisabled(true);
            if(endpointsavebtn==1)
                ui->Save_Btn_5->setDisabled(true);
            else
            {    if(endruncal==1)
                {
                    if(endqcfinish==1)
                        ui->Save_Btn_5->setDisabled(false);
                    else
                    {
                        ui->Save_Btn_5->setDisabled(true);
                        endqcfinish=0;
                    }
                }
                else
                    ui->Save_Btn_5->setDisabled(false);
            }
        }
        else if(option==3)
        {
            ui->comboBox->setEnabled(true);
            ui->Retest_5->setEnabled(true);
            ui->Retest->setDisabled(true);
            ui->Retest_3->setDisabled(true);
            ui->Retest_4->setDisabled(true);

            if(endpointsavebtn==1)
                ui->Save_Btn_5->setDisabled(true);
            else
            {    if(endrunsamp==1)
                {
                    if(endsampfinish==1)
                        ui->Save_Btn_5->setDisabled(false);
                    else
                    {
                        ui->Save_Btn_5->setDisabled(true);
                        endsampfinish=0;
                    }
                }
                else
                    ui->Save_Btn_5->setDisabled(false);
            }
        }
        else if(option==6 || option==9 || option==13 || option==14)
        {
            ui->comboBox_2->setEnabled(true);
            ui->Retest_5->setEnabled(true);
        }
        ui->Stop_Btn->setDisabled(true);
        ui->Stop_Btn_2->setDisabled(true);
        ui->RunBlank_Btn->setDisabled(false);
        ui->RunCal_Btn->setDisabled(false);
        ui->RunCal_Btn_2->setDisabled(false);
        ui->RunSample_Btn->setEnabled(true);
        ui->RunSample_Btn_2->setEnabled(true);
        ui->E_QC_Check->setEnabled(true);
        ui->TP_QC_Check->setEnabled(true);
        ui->Home_Btn_3->setVisible(true);
        ui->Home_Btn_3->setEnabled(true);

        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        msg.setText("Reading has stopped.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            Obj_data=0;
            Run_Data=0;
            Pro_Code_CheckAdd();
            ui->stackedWidget->setCurrentIndex(2);
        }
    }
    else
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");

        msg.setText("Do you want to stop the reading ?");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QPushButton* saveButton = msg.addButton("Yes", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        QPushButton* dontSaveButton = msg.addButton("Back", QMessageBox::DestructiveRole);
        dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #ff5957, stop: 0.5 #ff5957, stop: 1 #ff5957);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(184, 0, 0), stop: 0.5 rgb(184, 0, 0), stop: 1 rgb(184, 0, 0)); color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {

            readtimer->stop();
            qDebug()<<"Stop : "<<option;
            if(option==5)
            {
                //twopoint cal
                FKCprintopt=0;

                QString abs , fact ;
                QSqlQuery qy;
                qy.prepare("select fact , calibrateabs from test where name='"+TestName+"'");
                qy.exec();
                while(qy.next())
                {
                    fact=qy.value(0).toString();
                    abs=qy.value(1).toString();
                }
                if(fact=="")
                {
                    ui->label_76->setVisible(false);
                    ui->label_240->setText(abs);
                    ui->label->setVisible(false);
                    ui->label_239->setVisible(true);
                    ui->label_239->setText("Abs");
                    ui->label_240->setVisible(true);
                    ui->label_34->setVisible(false);
                    ui->label_197->setVisible(false);
                    ui->label_193->setVisible(false);
                    ui->label_243->setVisible(false);
                    qDebug()<<"fact empty";
                }
                else
                {
                    ui->label_76->setVisible(false);
                    ui->label_239->setVisible(false);
                    ui->label_34->setVisible(false);
                    ui->label_197->setVisible(false);
                    ui->label_240->setVisible(true);
                    ui->label->setVisible(false);
                    ui->label_240->setText(fact);

                    ui->label_100->setVisible(false);
                    ui->label_193->setVisible(false);
                    ui->label_243->setVisible(true);
                    qDebug()<<"Fact exist";
                }
                twoqcfinish=0;
                twosampfinish=0;
                ui->comboBox_2->setEnabled(true);
                ui->Retest_5->setEnabled(true);
                ui->Save_Btn_6->setDisabled(true);
            }

            else if(option==8)
            {
                //kinetic cal

                KCprintopt=0;

                QString abs , fact ;
                QSqlQuery qy;
                qy.prepare("select fact , calibrateabs from test where name='"+TestName+"'");
                qy.exec();
                while(qy.next())
                {
                    fact=qy.value(0).toString();
                    abs=qy.value(1).toString();
                }
                if(fact=="")
                {
                    ui->label_76->setVisible(false);
                    ui->label->setVisible(false);
                    ui->label_240->setText(abs);
                    ui->label_239->setVisible(true);
                    ui->label_239->setText("Abs");
                    ui->label_240->setVisible(true);
                    ui->label_34->setVisible(false);
                    ui->label_197->setVisible(false);
                    ui->label_193->setVisible(false);
                    ui->label_243->setVisible(false);
                    qDebug()<<"Kinetic fact empty";
                }
                else
                {
                    ui->label_76->setVisible(false);
                    ui->label_239->setVisible(false);
                    ui->label->setVisible(false);
                    ui->label_34->setVisible(false);
                    ui->label_197->setVisible(false);
                    ui->label_240->setVisible(true);
                    ui->label_240->setText(fact);
                    ui->label_100->setVisible(false);
                    ui->label_193->setVisible(false);
                    ui->label_243->setVisible(true);

                }
                ui->comboBox_2->setEnabled(true);
                ui->Retest_5->setEnabled(true);

                kineticqcfinish=0;
                kineticsampfinish=0;
            }

            else if(option==6)
            {
                FKSprintopt=0;

                ui->comboBox_2->setEnabled(true);
                ui->Retest_5->setEnabled(true);
                qDebug()<<"TpSaveBTn : "<<twopointsavebtn<<" TPRunSamp : "<<tworunsamp<<" TPSampFinish : "<<twosampfinish;

                if(twopointsavebtn==1)
                    ui->Save_Btn_6->setDisabled(true);
                else
                {    if(tworunsamp==1)
                    {
                        if(twosampfinish==1)
                            ui->Save_Btn_6->setDisabled(false);
                        else
                        {
                            ui->Save_Btn_6->setDisabled(true);
                            twosampfinish=0;
                        }
                    }
                    else
                        ui->Save_Btn_6->setDisabled(false);
                }
            }

            else if(option==9)
            {
                KSprintopt=0;
                qDebug()<<"KSaveBTn : "<<kineticsavebtn<<" KRunSamp : "<<kineticrunsamp<<" KSampFinish : "<<kineticsampfinish;

                if(kineticsavebtn==1)
                    ui->Save_Btn_6->setDisabled(true);
                else
                {    if(kineticrunsamp==1)
                    {
                        if(kineticsampfinish==1)
                            ui->Save_Btn_6->setDisabled(false);
                        else
                        {
                            ui->Save_Btn_6->setDisabled(true);
                            //kineticsampfinish=0;
                        }
                    }
                    else
                        ui->Save_Btn_6->setDisabled(false);
                }
                ui->comboBox_2->setEnabled(true);
                ui->Retest_5->setEnabled(true);
            }

            else if(option==14)
            {

                KQC1printopt=0;
                KQC2printopt=0;

                ui->comboBox_2->setEnabled(true);
                ui->Retest_5->setEnabled(true);
                if(kineticsavebtn==1)
                    ui->Save_Btn_6->setDisabled(true);
                else
                {    if(kineticrunsamp==1)
                    {
                        if(kineticsampfinish==1)
                            ui->Save_Btn_6->setDisabled(false);
                        else
                        {
                            ui->Save_Btn_6->setDisabled(true);
                            //kineticsampfinish=0;
                        }
                    }
                    else
                        ui->Save_Btn_6->setDisabled(false);
                }
            }

            else if(option==13)
            {
                FKQC1printopt=0;FKQC2printopt=0;

                ui->comboBox_2->setEnabled(true);
                ui->Retest_5->setEnabled(true);
                if(twopointsavebtn==1)
                    ui->Save_Btn_6->setDisabled(true);
                else
                {    if(tworunsamp==1)
                    {
                        if(twosampfinish==1)
                            ui->Save_Btn_6->setDisabled(false);
                        else
                        {
                            ui->Save_Btn_6->setDisabled(true);
                            // twosampfinish=0;
                        }
                    }
                    else
                        ui->Save_Btn_6->setDisabled(false);
                }
            }

            else if(option==6)
            {
                FKSprintopt=0;

                ui->comboBox_2->setEnabled(true);
                ui->Retest_5->setEnabled(true);
                if(twopointsavebtn==1)
                    ui->Save_Btn_6->setDisabled(true);
                else
                {    if(tworunsamp==1)
                    {
                        if(twosampfinish==1)
                            ui->Save_Btn_6->setDisabled(false);
                        else
                        {
                            ui->Save_Btn_6->setDisabled(true);
                            twosampfinish=0;
                        }
                    }
                    else
                        ui->Save_Btn_6->setDisabled(false);
                }
            }

            else if(option==9)
            {
                KSprintopt=0;
                if(kineticsavebtn==1)
                    ui->Save_Btn_6->setDisabled(true);
                else
                {    if(kineticrunsamp==1)
                    {
                        if(kineticsampfinish==1)
                            ui->Save_Btn_6->setDisabled(false);
                        else
                        {
                            ui->Save_Btn_6->setDisabled(true);
                            //kineticsampfinish=0;
                        }
                    }
                    else
                        ui->Save_Btn_6->setDisabled(false);
                }
                ui->comboBox_2->setEnabled(true);
                ui->Retest_5->setEnabled(true);
            }


            ui->Stop_Btn->setDisabled(true);
            ui->Stop_Btn_2->setDisabled(true);
            ui->RunBlank_Btn->setDisabled(false);
            ui->RunCal_Btn->setDisabled(false);
            ui->RunCal_Btn_2->setDisabled(false);
            ui->RunSample_Btn->setEnabled(true);
            ui->RunSample_Btn_2->setEnabled(true);
            ui->E_QC_Check->setEnabled(true);
            ui->TP_QC_Check->setEnabled(true);
            ui->Home_Btn_3->setVisible(true);
            ui->Home_Btn_3->setEnabled(true);
            if(Calreteststop==1)
            {
                ui->Retest->setEnabled(true);
                ui->Retest_3->setDisabled(true);
                ui->Retest_4->setDisabled(true);
                Calreteststop=0;
            }
            else if(QCreteststop==1)
            {
                ui->Retest->setDisabled(true);
                ui->Retest_3->setEnabled(true);
                ui->Retest_4->setDisabled(true);
                QCreteststop=0;
            }
            else if(Samplereteststop==1)
            {
                ui->Retest->setDisabled(true);
                ui->Retest_3->setDisabled(true);
                ui->Retest_4->setEnabled(true);
                Samplereteststop=0;
            }

            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");

            msg.setText("Reading has stopped.");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {
                //Obj_data=0;
                Run_Data=0;
                Pro_Code_CheckAdd();
                ui->stackedWidget->setCurrentIndex(2);

            }
        }
        else if(msg.clickedButton() == dontSaveButton)
            ui->stackedWidget->setCurrentIndex(2);
        else
            ui->stackedWidget->setCurrentIndex(2);
    }
}

void MainWindow::on_pushButton_263_clicked()
{
    ui->pushButton_295->setVisible(true);
    ui->frame_38->setVisible(true);
    ui->Home_Btn_17->setVisible(true);
    ui->Home_Btn_12->setVisible(false);
    ui->label_427->clear();
    QTime currentTime = QTime::currentTime();
    ui->timeEdit->setDisplayFormat("hh");
    ui->timeEdit_2->setDisplayFormat("mm");
    ui->timeEdit->setTime(currentTime);
    ui->timeEdit_2->setTime(currentTime);

    qApp->processEvents();
    QString c_option("-c");
    QString script="sudo timedatectl set-ntp 0";
    QProcess *process1 = new QProcess(this);
    process1->start("sh",QStringList()<<c_option<<script);
    if (!process1->waitForStarted())
    {
        qDebug() << "Error : " << process1->errorString();
    }
    process1->waitForFinished(-1);
    delete process1; // Release memory when you're done
    ui->stackedWidget_4->setCurrentIndex(1);

}

void MainWindow::on_pushButton_264_clicked()
{
    qApp->processEvents();
    QSqlQuery qry;
    int indexval=0;
    qry.prepare("select ZoneIndex from TimeZone where sno=1");
    qry.exec();
    while(qry.next())
        indexval=qry.value(0).toInt();

    qDebug()<<"Index Val : "<<indexval;
    ui->timeZoneComboBox_2->setCurrentIndex(indexval);
    ui->timeZoneComboBox_2->view()->setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOn);
    if(Test_Type=="Biochemistry")
    {
        ui->timeZoneComboBox_2->view()->verticalScrollBar()->setStyleSheet("QScrollBar:vertical {"
                                                                           "    border: 1px solid #999999;"
                                                                           "    background:white;"
                                                                           "    width:25px;    "
                                                                           "    margin: 0px 0px 0px 0px;"
                                                                           "}"
                                                                           "QScrollBar::handle:vertical {"
                                                                           "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                                           "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145), stop:1 rgb(12, 68, 145));"
                                                                           "    min-height: 0px;"
                                                                           "}"
                                                                           "QScrollBar::add-line:vertical {"
                                                                           "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                                           "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                                           "    height: 0px;"
                                                                           "    subcontrol-position: bottom;"
                                                                           "    subcontrol-origin: margin;"
                                                                           "}"
                                                                           "QScrollBar::sub-line:vertical {"
                                                                           "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                                           "    stop: 0  rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                                           "    height: 0 px;"
                                                                           "    subcontrol-position: top;"
                                                                           "    subcontrol-origin: margin;"
                                                                           "}"
                                                                           );
    }
    else if(Test_Type=="Turbidity")
    {
        ui->timeZoneComboBox_2->view()->verticalScrollBar()->setStyleSheet("QScrollBar:vertical {"
                                                                           "    border: 1px solid #999999;"
                                                                           "    background:white;"
                                                                           "    width:25px;    "
                                                                           "    margin: 0px 0px 0px 0px;"
                                                                           "}"
                                                                           "QScrollBar::handle:vertical {"
                                                                           "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                                           "    min-height: 0px;"
                                                                           "}"
                                                                           "QScrollBar::add-line:vertical {"
                                                                           "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                                           "    height: 0px;"
                                                                           "    subcontrol-position: bottom;"
                                                                           "    subcontrol-origin: margin;"
                                                                           "}"
                                                                           "QScrollBar::sub-line:vertical {"
                                                                           "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                                           "    height: 0 px;"
                                                                           "    subcontrol-position: top;"
                                                                           "    subcontrol-origin: margin;"
                                                                           "}"
                                                                           );
    }

    ui->Home_Btn_17->setVisible(true);
    ui->Home_Btn_12->setVisible(false);

    qDebug()<<"Date & Time Auto Set...";

    QString c_option("-c");
    QString script="sudo timedatectl set-ntp 1";
    QProcess *process1 = new QProcess(this);
    process1->start("sh",QStringList()<<c_option<<script);
    if (!process1->waitForStarted())
    {
        qDebug() << "Error : " << process1->errorString();
    }
    process1->waitForFinished(-1);
    delete process1; // Release memory when you're done
    ui->stackedWidget_4->setCurrentIndex(2);

}


void MainWindow::on_Settings_Back_Btn_clicked()
{
    qDebug()<<"Settings_Btn";
    ui->label_73->setVisible(true);
    ui->label_73->setText("Settings");
    ui->pushButton_148->setVisible(true);
    ui->stackedWidget_9->setVisible(true);
    ui->stackedWidget_9->setCurrentIndex(0);

    ui->pushButton_10->setVisible(false);

    ui->pushButton_258->setVisible(false);

    ui->toolButton->setVisible(false);

    ui->pushButton_5->setVisible(false);

    ui->pushButton_134->setVisible(false);

    ui->pushButton_4->setVisible(false);

    ui->pushButton_7->setVisible(false);
    ui->pushButton_231->setVisible(false);
    ui->pushButton_228->setVisible(true);

    ui->pushButton_11->setVisible(false);

    ui->pushButton_131->setVisible(false);

    ui->label_210->setVisible(false);

    ui->label_219->setVisible(false);

    ui->toolButton_14->setVisible(true);

    ui->Settings_Back_Btn->setVisible(false);

    ui->Settings_Back_Btn_2->setVisible(false);

    ui->pushButton_227->setVisible(false);
    if(ui->label_211->text()=="Version : ")
    {

    }
    else if(ui->label_211->text()=="Status : ")
    {
        ui->label_211->setText("Version : ");
        QFile file("/home/pi/git/BCYWithTRY/README.md");
        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
            QTextStream in(&file);
            while (!in.atEnd()) {
                QString data = in.readLine();
                bool ok = false;
                double Version = data.toDouble(&ok);
                ui->label_340->setText("<font color='gray'>"+QString::number(Version)+"</font>");
                qDebug()<<Version;
            }

        }
    }
}

void MainWindow::on_toolButton_21_clicked()
{
    ui->pushButton_148->setVisible(false);
    ui->stackedWidget->setCurrentIndex(10);
    ui->comboBox_4->clear();
    ui->toolButton_15->setVisible(true);
    ui->toolButton_21->setVisible(false);
}

void MainWindow::on_radioButton_8_clicked()
{
    isConnected =false;
    QString Address1 ,  Port ;
    QSqlQuery query;
    query.prepare("select Address1,Port from LIS where sno=1");
    query.exec();
    while(query.next())
    {
        Address1 = query.value(0).toString();
        Port = query.value(1).toString();
    }
    ui->IPAddress_lineEdit->setText(Address1);
    ui->Port_lineEdit->setText(Port);
    QProcess *process = new QProcess(this);
    process->start("sh",QStringList()<<"-c"<<"sudo hostname -I");//scan list of wifi networks
    process->waitForFinished();
    QString datas = process->readAllStandardOutput();
    qDebug()<<"Data : "<<datas;
    QStringList list1 = datas.split(" ");
    QString IP = list1.at(0);
    qDebug()<<"IP : "<<IP;
    ui->label_437->setText(IP);
    delete process; // Release memory when you're done
    ui->stackedWidget_6->setCurrentIndex(1);
    //ui->label_437->setText(ui->label_416->text());
}

void MainWindow::on_radioButton_9_clicked()
{
    ui->stackedWidget->setCurrentIndex(10);
    isConnected =false;
}

void MainWindow::on_pushButton_279_clicked()
{
    LIS_connect_data=0;
    QString Data = ui->comboBox_9->currentText();

    if(Data=="Send individual results")
        LIS_Sending_Data=1;
    else if(Data=="Send all results")
        LIS_Sending_Data=2;
    QSqlQuery qry;
    qry.prepare("update LIS set Sending_Results='"+QString::number(LIS_Sending_Data)+"' where sno=1");
    qry.exec();
    QString IPAdd1,Port;
    IPAdd1 = ui->IPAddress_lineEdit->text();
    Port = ui->Port_lineEdit->text();
    if(IPAdd1=="")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif ;");
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setText("The server ip-address field is empty !");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
        }

    }
    else if(Port=="")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif ;");
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setText("The server port number field is empty !");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {

        }
    }
    else {
        if(sock)
        {
            delete sock; // Clean up the dynamically allocated object
            sock = nullptr;
            qDebug()<<"Enter sock";
        }else
        {

        }
        QSqlQuery query;
        query.prepare("update LIS set Address1 ='"+IPAdd1+"' , Port ='"+Port+"' where sno=1");
        if(query.exec())
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif ;");
            QFont font;
            font.setBold(true);
            msg.setFont(font);
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("Do you want to connect the LIS server ?");
            QPushButton* saveButton = msg.addButton("Yes", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            QPushButton* dontSaveButton = msg.addButton("Back", QMessageBox::DestructiveRole);
            dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #ff5957, stop: 0.5 #ff5957, stop: 1 #ff5957);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(184, 0, 0), stop: 0.5 rgb(184, 0, 0), stop: 1 rgb(184, 0, 0)); color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {
                QString IPAdd1 = ui->IPAddress_lineEdit->text();
                QString Port = ui->Port_lineEdit->text();
                std::string IPAddress = IPAdd1.toStdString();
                std::string PortNumber = Port.toStdString();

                // Initial message box for "connecting" status
                QMessageBox *connectingMsg = new QMessageBox(this);
                connectingMsg->setWindowFlags(Qt::Popup);
                connectingMsg->setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif;");
                QFont font;
                font.setBold(true);
                connectingMsg->setFont(font);
                QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
                auto newPixmap = p.scaled(80, 80);
                connectingMsg->setIconPixmap(newPixmap);
                connectingMsg->setText("LIS server is connecting, please don't touch the display.");
                connectingMsg->setStandardButtons(QMessageBox::NoButton);

                connect(connectingMsg, &QMessageBox::finished, connectingMsg, &QObject::deleteLater);
                connectingMsg->show();

                QTimer *autoCloseTimer = new QTimer(this);
                autoCloseTimer->setSingleShot(true);
                connect(autoCloseTimer, &QTimer::timeout, connectingMsg, &QMessageBox::accept);
                autoCloseTimer->start(500); // 2000 milliseconds = 2 seconds

                qApp->processEvents(); // Ensure UI updates

                if (!sock) {
                    sock = new HL7MLLP(IPAddress, PortNumber, ui);
                    isConnected = sock->isConnectedd();
                    if (isConnected)
                    {
                        qDebug() << "Finally connected";

                        // New message box for "connected" status
                        QMessageBox connectedMsg(this);
                        connectedMsg.setWindowFlags(Qt::Popup);
                        connectedMsg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif;");
                        connectedMsg.setFont(font);
                        QPixmap successPixmap("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
                        auto successNewPixmap = successPixmap.scaled(80, 80);
                        connectedMsg.setIconPixmap(successNewPixmap);
                        connectedMsg.setText("The LIS server is connected.");
                        QPushButton* saveButton = connectedMsg.addButton("Ok", QMessageBox::AcceptRole);
                        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                        connectedMsg.setDefaultButton(saveButton);
                        connectedMsg.exec();
                        if (connectedMsg.clickedButton() == saveButton)
                        {
                            LIS_connect_data=1;
                            ui->stackedWidget->setCurrentIndex(19);
                            ui->stackedWidget_6->setCurrentIndex(1);
                        }
                        else {
                            ui->stackedWidget->setCurrentIndex(19);
                            ui->stackedWidget_6->setCurrentIndex(1);
                        }
                    } else {
                        qDebug() << "Finally disconnected";

                        // New message box for "not connected" status
                        QMessageBox disconnectedMsg(this);
                        disconnectedMsg.setWindowFlags(Qt::Popup);
                        disconnectedMsg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif;");
                        disconnectedMsg.setFont(font);
                        QPixmap failurePixmap("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
                        auto failureNewPixmap = failurePixmap.scaled(80, 80);
                        disconnectedMsg.setIconPixmap(failureNewPixmap);
                        disconnectedMsg.setText("The LIS server is not connected!");
                        QPushButton* saveButton = disconnectedMsg.addButton("Ok", QMessageBox::AcceptRole);
                        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                        disconnectedMsg.setDefaultButton(saveButton);
                        disconnectedMsg.exec();
                        if (disconnectedMsg.clickedButton() == saveButton)
                        {
                            LIS_connect_data=0;
                            ui->stackedWidget->setCurrentIndex(19);
                            ui->stackedWidget_6->setCurrentIndex(1);
                        }
                        else {
                            ui->stackedWidget->setCurrentIndex(19);
                            ui->stackedWidget_6->setCurrentIndex(1);
                        }
                        delete sock;
                        sock = nullptr;
                        isConnected = false;
                        ui->pushButton_17->setEnabled(false);

                    }
                }
                else
                {
                    QMessageBox msg(this);
                    msg.setWindowFlags(Qt::Popup);
                    msg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif;");
                    QFont font;
                    font.setBold(true);
                    msg.setFont(font);
                    QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
                    auto newPixmap = p.scaled(80, 80);
                    msg.setIconPixmap(newPixmap);
                    msg.setText("The LIS server is already connected!");
                    msg.setStandardButtons(QMessageBox::Ok);
                    QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                    saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                    msg.setDefaultButton(saveButton);
                    msg.exec();
                    if (msg.clickedButton() == saveButton){
                        ui->stackedWidget->setCurrentIndex(19);
                        ui->stackedWidget_6->setCurrentIndex(1);
                    }
                    else {
                        ui->stackedWidget->setCurrentIndex(19);
                        ui->stackedWidget_6->setCurrentIndex(1);
                    }
                    return;
                }
            }
            else
            {
                ui->stackedWidget->setCurrentIndex(19);
                ui->stackedWidget_6->setCurrentIndex(1);
            }
        }
    }
}

void MainWindow::TestCode_Checker1()
{
    QString Data = ui->lineEdit_42->text();
    QSqlQuery query;
    bool ok;
    QSqlQuery q;
    ok = q.exec("select * from test where Pro_Code='"+Data+"'");
    if (ok && q.next())
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        msg.setText("Testcode : '"+Data+"' already exists, Kindly enter correct one.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->pushButton_196->setVisible(true);
            ui->lineEdit_42->setStyleSheet("background-color:white;border: none");
            ui->lineEdit_42->clear();
            ui->stackedWidget->setCurrentIndex(4);
        }
        else
        {
            ui->lineEdit_42->setStyleSheet("border: 1px solid red");
            ui->lineEdit_42->clear();
            ui->pushButton_196->setVisible(true);
            ui->stackedWidget->setCurrentIndex(4);
        }
    }
    else
    {
        ui->stackedWidget->setCurrentIndex(4);
        ui->pushButton_196->setVisible(true);
        ui->lineEdit_42->setStyleSheet("background-color:white;border: none");
    }
}

void MainWindow::TestCode_Checker2()
{
    QString Data = ui->label_441->text();
    QSqlQuery query;
    bool ok;
    QSqlQuery q;
    ok = q.exec("select * from test where Pro_Code='"+Data+"'");
    if (ok && q.next())
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        msg.setText("Testcode : '"+Data+"' already exists, Kindly enter correct one.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->label_441->setStyleSheet("background-color:white;border: none");
            ui->label_441->clear();
            ui->stackedWidget->setCurrentIndex(6);
        }
        else
        {
            ui->label_441->setStyleSheet("border: 1px solid red");
            ui->label_441->clear();
            ui->stackedWidget->setCurrentIndex(6);
        }
    }
    else
    {
        ui->stackedWidget->setCurrentIndex(6);
        ui->label_441->setStyleSheet("background-color:white;border: none");
    }
}


int MainWindow::on_lineEdit_42_textChanged(const QString &arg1)
{
    Q_UNUSED(arg1);
    QString Val = ui->lineEdit_42->text().toLocal8Bit().constData();

    if(Val==" ")
        qDebug()<<"lineedit_42 is Empty...";
    else
        qDebug()<<"Else part";
    return 0;

}
void MainWindow::on_EndPoint_Save_Btn_clicked()
{
    QString PID= ui->PatientInfo_LineEdit->text();
    QString PName= ui->Patient_Name->text();
    QString PAge= ui->Patient_Age->text();

    QString  PaID,Date , Time  , PaName , PGender , Unit,PaAge; //PID, , ANrmlRang , BNrmlRang , ODVal , ResultOD ,  ;
    QString LIS_Check = "0";
    int  date = 0 ,time=0;
    double  ANrmlRang=0 , BNrmlRang=0  ,ODVal=0 , ResultOD =0;
    Date = char (date);
    Time = char (time);
    PID = ui->PatientInfo_LineEdit->text();
    ODVal = ui->label_119->text().toDouble();
    ResultOD = ui->label_33->text().toDouble();
    Date= ui->SysDate_Lbl->text();
    Time =ui->SysTime_Lbl->text();
    ui->RunSample_Btn_2->setEnabled(true);
    ui->EndPoint_Save_Btn->setDisabled(true);
    ui->EndPoint_Print_Btn->setDisabled(true);
    Unit = ui->label_272->text();
    QSqlQuery query;
    query.prepare("select normax,normin from test where name ='"+TestName+"'");
    query.exec();
    while(query.next())
    {
        ANrmlRang = query.value(0).toDouble();
        BNrmlRang = query.value(1).toDouble();
    }
    if(PID=="")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        msg.setText("Please enter patient ID.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/info.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->stackedWidget->setCurrentIndex(17);
            ui->EndPoint_Print_Btn->setDisabled(false);
            ui->EndPoint_Save_Btn->setDisabled(false);
            ui->Patient_Name_Btn->setDisabled(false);
            ui->Patient_Age_Btn->setDisabled(false);
            ui->pushButton_117->setDisabled(false);
            check_saveBtn=0;
            endsavebtn=0;

        }
        else
            ui->stackedWidget->setCurrentIndex(17);

    }
    else
    {
        PaID = ui->PatientInfo_LineEdit->text();
        PaName = PName.isEmpty() ? "-" : ui->Patient_Name->text();
        PaAge = PAge.isEmpty() ? "-" : ui->Patient_Age->text();
        PGender = text.isEmpty() ? "-" : text;
        Unit = ui->label_272->text();
        // QString TestName1=TestName;
        // TestName1=ParameterNameToShow(TestName);
        qDebug()<<"TestName : "<<TestName;
        query.prepare("insert into Reports(PID, PName, PAge, PGender, TName, ANrmlRang, BNrmlRang, ODVal, ResultOD, Unit, Date, Time, LIS_Check) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
        query.addBindValue(PaID);
        query.addBindValue(PaName);
        query.addBindValue(PaAge);
        query.addBindValue(PGender);
        query.addBindValue(TestName);
        query.addBindValue(ANrmlRang);
        query.addBindValue(BNrmlRang);
        query.addBindValue(ODVal);
        query.addBindValue(ResultOD);
        query.addBindValue(Unit);
        query.addBindValue(Date);
        query.addBindValue(Time);
        query.addBindValue(LIS_Check);
        query.exec();

        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap pii("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
        auto newPixmap = pii.scaled(65, 65);
        msg.setIconPixmap(newPixmap);
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("Data saved.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->RunSample_Btn_2->setEnabled(true);
            ui->EndPoint_Print_Btn->setEnabled(true);
            ui->pushButton_117->setDisabled(true);
            ui->Patient_Name_Btn->setDisabled(true);
            ui->Patient_Age_Btn->setDisabled(true);
            ui->radioButton_5->setDisabled(true);
            ui->radioButton_6->setDisabled(true);
            ui->radioButton_7->setDisabled(true);
            ui->EndPoint_Save_Btn->setDisabled(true);
            check_saveBtn=1;
            endsavebtn=1;
            ui->stackedWidget->setCurrentIndex(17);
        }
        else
            ui->stackedWidget->setCurrentIndex(17);
    }
}

void MainWindow::on_pushButton_328_clicked()
{
    qApp->processEvents();
    QString Lot = ui->comboBox_15->currentText();
    QString ctrl1min , ctrl1max , ctrl1bno,unit;
    ui->customPlot_3->xAxis->setTicks(true);
    ui->customPlot_3->yAxis->setTicks(true);
    QList<double> list;
    QList<double> lis;
    QList<double> listed , listt;
    QSqlQueryModel * modal = new QSqlQueryModel();
    QSqlQuery *query = new QSqlQuery (mydb) ;
    QString TesName,mainval,QCMini, QCMaxi ;
    QSqlQuery qq;
    QString fDate , fMonth , fYear , tDate , tMonth , tYear , slash;
    slash = "/";
    QString fdateString = ui->label_425->text();
    QString tdateString = ui->label_426->text();
    Fromdt=fdateString;
    Todt=tdateString;
    QString lotn, ltn;
    QSqlQuery qury;
    QList<QString> datefmt;
    QList<QString> timefmt;
    QString date;
    QString time;
    int count=0;
    QC1_loop();
    qq.prepare("SELECT * FROM "+QC1_Testname+" WHERE LotNo ='"+Lot+"'  AND Date BETWEEN '"+fdateString+"' AND '"+tdateString+"'");
    qq.exec();
    while(qq.next())
    {
        TesName=qq.value(1).toString();
        QCMini=qq.value(6).toString();
        QCMaxi=qq.value(7).toString();
        mainval=qq.value(3).toString();
        listed.append(qq.value(3).toDouble());
        listt.append(qq.value(12).toInt());
        list.append(qq.value(3).toDouble());
        lis.append(qq.value(12).toInt());
        ctrl1bno=qq.value(13).toString();
        unit=qq.value(5).toString();
        date=(qq.value(8).toString());
        time=(qq.value(9).toString());
        datefmt.append(qq.value(8).toString());
        timefmt.append(qq.value(9).toString());
        arraylst[count]=date;
        count++;
    }

    QList<double> values;
    int val = 0;
    for(int i=0;i<listt.size();i++)
    {
        char Data ;
        foreach( Data , listed)
            qDebug()<<"Data : "<<Data<<"listed : "<<listed;
        val = val+10;
        values.append(val);
    }

    if(listed.isEmpty())
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        msg.setText("LotNo is empty.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->stackedWidget->setCurrentIndex(24);
            ui->stackedWidget_3->setCurrentIndex(2);
        }
        else
        {
            ui->stackedWidget->setCurrentIndex(24);
            ui->stackedWidget_3->setCurrentIndex(2);
        }
    }
    else
    {

        QByteArray arry = mainval.toLocal8Bit().constData();
        modal->setQuery(*query);
        double minval = QCMini.toDouble();
        double maxval = QCMaxi.toDouble();
        double val= minval+maxval;
        double mean= val/2;
        double diff = maxval-minval;
        double SD=diff/5;
        QString frtt = "50.2";
        QString snd = "3.6";
        double sd1pos = mean+SD;
        double sd1neg = mean-SD;
        double sd2pos = mean+(SD*2);
        double sd2neg = mean-(SD*2);
        double sd3pos = mean+(SD*3);
        double sd3neg = mean-(SD*3);
        QString frt = QString::number(sd3neg);
        QString sec = QString::number(sd2neg);
        QString thi = QString::number(sd1neg);
        QString mid = QString::number(mean);
        QString fou = QString::number(sd1pos);
        QString fif = QString::number(sd2pos);
        QString six = QString::number(sd3pos);
        QByteArray aa;
        aa.append(frt);
        aa.append(sec);
        aa.append(thi);
        aa.append(mid);
        aa.append(fou);
        aa.append(fif);
        aa.append(six);
        QVector<double> xv1(2);
        QVector<double> yv1(2);
        QVector<double> yv2(2);
        QVector<double> yv3(2);
        QVector<double> yv4(2);
        QVector<double> yv5(2);
        QVector<double> yv6(2);
        QVector<double> yv7(2);
        QVector<double> yv8(2);
        QVector<double> xv4(2);
        yv1[0]=yv1[1]=sd3neg;
        yv2[0]=yv2[1]=sd2neg;
        yv3[0]=yv3[1]=sd1neg;
        yv4[0]=yv4[1]=mean;
        yv5[0]=yv5[1]=sd1pos;
        yv6[0]=yv6[1]=sd2pos;
        yv7[0]=yv7[1]=sd3pos;
        xv1[0]=xv1[1]=25;
        yv8[0]=yv8[1]=30;
        QVector<double> x1 , y1 , fx;
        x1=listed.toVector();
        y1=values.toVector();
        fx=listt.toVector();
        ui->customPlot_3->addGraph();
        ui->customPlot_3->replot();
        ui->customPlot_3->update();
        ui->customPlot_3->graph(0)->setData(y1, x1);
        ui->customPlot_3->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
        ui->customPlot_3->graph(0)->setLineStyle(QCPGraph::lsLine);
        ui->customPlot_3->graph(0)->setPen(QPen(Qt::blue,1));
        ui->customPlot_3->graph(0)->selectionDecorator()->setPen(QPen(Qt::green));
        ui->customPlot_3->xAxis->setLabel("x");
        ui->customPlot_3->yAxis->setLabel("y");
        QSharedPointer<QCPAxisTickerText> textTicker(new QCPAxisTickerText);
        textTicker->addTick(sd3neg, "-3SD");
        textTicker->addTick(sd2neg, "-2SD");
        textTicker->addTick(sd1neg, "-1SD");
        textTicker->addTick(mean, "X");
        textTicker->addTick(sd1pos, "1SD");
        textTicker->addTick(sd2pos, "2SD");
        textTicker->addTick(sd3pos, "3SD");
        int count1=0;
        int value = datefmt.size();

        QString d1,t1;
        QSharedPointer<QCPAxisTickerText> textTicker1(new QCPAxisTickerText);
        ui->customPlot_3->xAxis->setTickLabelRotation(45);

        for (int i=0;i< value;i++ )
        {
            d1=datefmt[i].toLatin1().data();      // d2=date[1].toLatin1().data();
            t1=timefmt[i].toLatin1().data();
            count1 = count1+10;
            textTicker1->addTick(count1, d1+"\n"+t1);
        }
        ui->customPlot_3->xAxis->setTicker(textTicker1);
        ui->customPlot_3->yAxis->setTicker(textTicker);
        ui->customPlot_3->xAxis->setRange(values.first(), values.last()+5);
        ui->customPlot_3->yAxis->setRange(sd3neg,sd3pos);
        ui->customPlot_3->replot();
        ui->customPlot_3->update();

    }
    ui->pushButton_331->setEnabled(true);
}

void MainWindow::Blankstopbtnfunc()
{
    readtimer->stop();
    ui->Stop_Btn->setDisabled(true);
    ui->RunBlank_Btn->setDisabled(false);
    ui->RunCal_Btn->setDisabled(false);
    ui->RunCal_Btn_2->setDisabled(false);
    ui->RunSample_Btn->setEnabled(true);
    ui->RunSample_Btn_2->setEnabled(true);
    ui->E_QC_Check->setEnabled(true);
    ui->TP_QC_Check->setEnabled(true);
}

void MainWindow::Countstopbtnfunc()
{
    readtimer->stop();
    ui->Stop_Btn->setDisabled(true);
    ui->Stop_Btn_2->setDisabled(true);
    ui->RunBlank_Btn->setDisabled(false);
    ui->RunCal_Btn->setDisabled(false);
    ui->RunCal_Btn_2->setDisabled(false);
    ui->RunSample_Btn->setEnabled(true);
    ui->RunSample_Btn_2->setEnabled(true);
    ui->E_QC_Check->setEnabled(true);
    ui->TP_QC_Check->setEnabled(true);
    Pro_Code_CheckAdd();
}

void MainWindow::on_pushButton_297_clicked()
{
    QString password = ui->lineEdit_96->text();

    if(password == "PassDV3")
    {
        ui->stackedWidget->setCurrentIndex(21);
        ui->stackedWidget_7->setCurrentIndex(1);
        QString Code;
        QSqlQuery qy;
        qy.prepare("select Distributor_code from Distributor where sno=1");
        qy.exec();
        while(qy.next())
        {
            Code = qy.value(0).toString();
        }
        ui->lineEdit_97->setText(Code);
    }
    else
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        msg.setDetailedText("ACCESS DENIED");

        msg.setText("Password is incorrect.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->stackedWidget->setCurrentIndex(21);
            ui->stackedWidget_7->setCurrentIndex(0);
        }
        else
        {
            ui->stackedWidget->setCurrentIndex(21);
            ui->stackedWidget_7->setCurrentIndex(0);
        }
    }
}


void MainWindow::on_Retest_5_clicked()
{
    qApp->processEvents();
    QMessageBox msg(this);
    msg.setWindowFlags(Qt::Popup);
    msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");

    msg.setText("Do you want to scan new kit ?");
    QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
    auto newPixmap = p.scaled(80, 80);
    msg.setIconPixmap(newPixmap);
    QPushButton* saveButton = msg.addButton("Yes", QMessageBox::AcceptRole);
    saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
    QPushButton* dontSaveButton = msg.addButton("Back", QMessageBox::DestructiveRole);
    dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #ff5957, stop: 0.5 #ff5957, stop: 1 #ff5957);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(184, 0, 0), stop: 0.5 rgb(184, 0, 0), stop: 1 rgb(184, 0, 0)); color:white;}");
    msg.setDefaultButton(saveButton);
    msg.exec();
    if (msg.clickedButton() == saveButton)
    {
        ui->Home_Btn_13->setVisible(false);
        ui->Home_Btn_23->setVisible(true);
        // QString TestName1=TestName;
        // TestName1=ParameterNameToShow(TestName);
        ui->label_215->setText("Test Name : "+TestName+"");

        ui->lineEdit_13->clear();
        ui->label_270->clear();
        ui->label_271->clear();
        ui->lineEdit_17->clear();
        ui->lineEdit_15->clear();
        ui->lineEdit_13->setFocus();
        ui->lineEdit_13->installEventFilter(this);
        this->installEventFilter(this);
        QDate Current_Year=QDate::currentDate();
        QDate Current_Month=QDate::currentDate();
        ui->dateEdit->setDisplayFormat("MM");
        ui->dateEdit->setDate(Current_Month);
        ui->dateEdit_2->setDisplayFormat("yyyy");
        ui->dateEdit_2->setDate(Current_Year);
        ui->stackedWidget->setCurrentIndex(22);

    }
    else if(msg.clickedButton() == dontSaveButton)
        ui->stackedWidget->setCurrentIndex(2);
    else
        ui->stackedWidget->setCurrentIndex(9);
}

void MainWindow::on_pushButton_299_clicked()
{
    QString Dist_Code = ui->lineEdit_97->text();
    QSqlQuery query;
    query.prepare("update Distributor set Distributor_code ='"+Dist_Code+"' where sno=1");
    if(query.exec())
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        msg.setStyleSheet("background-color: rgb(206, 230, 255);font:16pt Arial;");
        msg.setText("Distributor code set successfully.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->stackedWidget->setCurrentIndex(21);
            ui->stackedWidget_7->setCurrentIndex(1);
        }
        else
        {
            ui->stackedWidget->setCurrentIndex(21);
            ui->stackedWidget_7->setCurrentIndex(1);
        }
    }
    else
    {
    }

}

void MainWindow::on_Home_Btn_21_clicked()
{
    ui->pushButton_148->setVisible(false);
    ui->stackedWidget->setCurrentIndex(10);
    ui->stackedWidget_7->setCurrentIndex(0);
}


void MainWindow::on_Home_Btn_20_clicked()
{
    ui->label_219->setText("Service Team");
    ui->label_219->setVisible(true);
    ui->pushButton_10->setVisible(false);
    ui->pushButton_134->setVisible(false);
    ui->pushButton_4->setVisible(false);
    ui->pushButton_5->setVisible(false);
    ui->toolButton->setVisible(false);
    ui->pushButton_7->setVisible(true);
    ui->pushButton_231->setVisible(true);
    ui->pushButton_228->setVisible(true);
    ui->pushButton_11->setVisible(true);
    ui->pushButton_131->setVisible(false);
    ui->label_210->setVisible(false);
    ui->pushButton_227->setVisible(true);
    ui->stackedWidget->setCurrentIndex(10);
}

void MainWindow::on_tableView_2_clicked(const QModelIndex &index)
{
    if (!index.isValid())
    {
        qDebug() << "Invalid index passed!";
        return;
    }
    ui->pushButton_254->setEnabled(true);
    QSqlQuery * qry=new QSqlQuery(mydb);
    QSqlQueryModel * model = new QSqlQueryModel();
    model->setQuery(*qry);
    QString  PName , PAge , PGender , TName , ANrml , BNrml , ODVal , ResultOD ,Unit, Date , Time;
    QModelIndexList indexList = ui->tableView_2->selectionModel()->selectedIndexes();
    foreach (const QModelIndex &index, indexList)
    {
        New_row = index.row();
    }
    qDebug()<<"index row "<<New_row;
    clickval0 = ui->tableView_2->model()->index(New_row , 0).data().toString();
    clickval1 = ui->tableView_2->model()->index(New_row , 1).data().toString();
    clickval4 = ui->tableView_2->model()->index(New_row , 2).data().toString();
    clickval10 = ui->tableView_2->model()->index(New_row , 3).data().toString();
    clickval11 = ui->tableView_2->model()->index(New_row , 4).data().toString();
    QSqlQuery query;
    query.prepare("select PAge,PGender,ANrmlRang,BNrmlRang,ODVal,ResultOD,Unit from Reports where PID='"+clickval0+"'");
    query.exec();
    while(query.next())
    {
        clickval2 = query.value(0).toString();
        clickval3 = query.value(1).toString();
        clickval5 = query.value(2).toString();
        clickval6 = query.value(3).toString();
        clickval7 = query.value(4).toString();
        clickval8 = query.value(5).toString();
        clickval9 = query.value(6).toString();
    }
    qry->prepare("select * from Reports where PID ='"+clickval0+"' or PName ='"+clickval1+"' or PAge ='"+clickval2+"' or PGender ='"+clickval3+"' or TName ='"+clickval4+"' or ANrmlRang ='"+clickval5+"' or BNrmlRang ='"+clickval6+"' or ODVal ='"+clickval7+"' or ResultOD ='"+clickval8+"' or Unit ='"+clickval9+"' or Date ='"+clickval10+"' or Time ='"+clickval11+"'");
    qry->exec();
    while(qry->next())
    {
    }
    if(clickval0=="")
        Printopt1=1;
    else {
        Printopt2=2;
    }
    qDebug()<<"Data : "<<clickval0<<clickval1<<clickval2<<clickval3<<clickval4<<clickval5<<clickval6<<clickval7<<clickval8<<clickval9<<clickval10<<clickval11;
    ui->label_44->setText(clickval0);
    ui->PName_lineEdit->setText(clickval1);
    ui->PAge_lineEdit->setText(clickval2);
    ui->label_86->setText(clickval3);
    ui->label_58->setText(clickval4);
    ui->A_Rang->setText(clickval5);
    ui->B_Rang->setText(clickval6);
    ui->label_69->setText(clickval7);
    ui->label_70->setText(clickval8);
    ui->Unit_LE->setText(clickval9);
    ui->His_Date_lbl->setText(clickval10);
    ui->His_Time_lbl->setText(clickval11);
}

void MainWindow::on_pushButton_327_clicked()
{
    ui->lineEdit_96->setEchoMode(QLineEdit::Normal);
    ui->pushButton_327->hide();
    ui->pushButton_324->show();
}

void MainWindow::on_pushButton_324_clicked()
{
    ui->lineEdit_96->setEchoMode(QLineEdit::Password);
    ui->pushButton_324->hide();
    ui->pushButton_327->show();
}

void MainWindow::on_pushButton_329_clicked()
{
    qApp->processEvents();
    QString Lot = ui->comboBox_16->currentText();
    ui->customPlot_3->xAxis->setTicks(true);
    ui->customPlot_3->yAxis->setTicks(true);
    QString ctrl1min , ctrl1max , ctrl1bno,unit;
    QList<double> list;
    QList<double> lis;
    QList<double> listed , listt;
    QList<QString> datefmt;
    QList<QString> timefmt;
    QString date;
    QString time;
    QSqlQuery qury;
    int count=0;
    QString TesName,mainval,QCMini, QCMaxi ;
    QSqlQueryModel * modal = new QSqlQueryModel();
    QSqlQuery *query = new QSqlQuery (mydb) ;
    QSqlQuery qq;
    QString fdateString = ui->label_425->text();
    QString tdateString = ui->label_426->text();
    QC2_loop();

    qq.prepare("SELECT * FROM "+QC2_Testname+" WHERE LotNo ='"+Lot+"' AND Date BETWEEN '"+fdateString+"' AND '"+tdateString+"'");
    qq.exec();
    while(qq.next())
    {
        TesName=qq.value(1).toString();
        QCMini=qq.value(6).toString();
        QCMaxi=qq.value(7).toString();
        mainval=qq.value(3).toString();
        listed.append(qq.value(3).toDouble());
        listt.append(qq.value(12).toInt());
        list.append(qq.value(3).toDouble());
        lis.append(qq.value(12).toInt());
        ctrl1bno=qq.value(13).toString();
        unit=qq.value(5).toString();
        date=(qq.value(8).toString());
        time=(qq.value(9).toString());
        datefmt.append(qq.value(8).toString());
        timefmt.append(qq.value(9).toString());
        arraylst[count]=date;
        count++;
    }

    QList<double> values;
    int val = 0;
    for(int i=0;i<listt.size();i++)
    {
        val = val+10;
        values.append(val);
    }
    qDebug()<<"exit";
    if(listed.isEmpty())
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        msg.setText("LotNo is empty.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->stackedWidget->setCurrentIndex(24);
            ui->stackedWidget_3->setCurrentIndex(2);
        }
        else
        {
            ui->stackedWidget->setCurrentIndex(24);
            ui->stackedWidget_3->setCurrentIndex(2);
        }
    }
    else
    {
        QByteArray arry = mainval.toLocal8Bit().constData();
        modal->setQuery(*query);
        float vl = ui->label_273->text().toFloat();
        float min = ui->label_274->text().toFloat();
        float max = ui->label_275->text().toFloat();
        if(vl<=max && vl>=min)
        {
            ui->pushButton_189->setVisible(true);
            ui->pushButton_190->setVisible(false);
        }
        else
        {
            ui->pushButton_189->setVisible(false);
            ui->pushButton_190->setVisible(true);
        }

        double minval = QCMini.toInt();
        double maxval = QCMaxi.toInt();
        double val= minval+maxval;
        double mean= val/2;
        double diff = maxval-minval;
        double SD=diff/5;
        double sd1pos = mean+SD;
        double sd1neg = mean-SD;
        double sd2pos = mean+(SD*2);
        double sd2neg = mean-(SD*2);
        double sd3pos = mean+(SD*3);
        double sd3neg = mean-(SD*3);
        QString frt = QString::number(sd3neg);
        QString sec = QString::number(sd2neg);
        QString thi = QString::number(sd1neg);
        QString mid = QString::number(mean);
        QString fou = QString::number(sd1pos);
        QString fif = QString::number(sd2pos);
        QString six = QString::number(sd3pos);
        QByteArray aa;
        aa.append(frt);
        aa.append(sec);
        aa.append(thi);
        aa.append(mid);
        aa.append(fou);
        aa.append(fif);
        aa.append(six);
        QVector<double> xv1(2);
        QVector<double> yv1(2);
        QVector<double> yv2(2);
        QVector<double> yv3(2);
        QVector<double> yv4(2);
        QVector<double> yv5(2);
        QVector<double> yv6(2);
        QVector<double> yv7(2);
        QVector<double> yv8(2);
        QVector<double> xv4(2);
        yv1[0]=yv1[1]=sd3neg;
        yv2[0]=yv2[1]=sd2neg;
        yv3[0]=yv3[1]=sd1neg;
        yv4[0]=yv4[1]=mean;
        yv5[0]=yv5[1]=sd1pos;
        yv6[0]=yv6[1]=sd2pos;
        yv7[0]=yv7[1]=sd3pos;
        xv1[0]=xv1[1]=25;
        yv8[0]=yv8[1]=30;
        QVector<double> x1 , y1 , fx;
        x1=listed.toVector();
        y1=values.toVector();
        fx=listt.toVector();
        ui->customPlot_3->addGraph();
        ui->customPlot_3->replot();
        ui->customPlot_3->update();
        ui->customPlot_3->graph(0)->setData(y1, x1);
        ui->customPlot_3->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
        ui->customPlot_3->graph(0)->setLineStyle(QCPGraph::lsLine);
        ui->customPlot_3->graph(0)->setPen(QPen(Qt::blue,1));
        ui->customPlot_3->graph(0)->selectionDecorator()->setPen(QPen(Qt::green));
        ui->customPlot_3->xAxis->setLabel("x");
        ui->customPlot_3->yAxis->setLabel("y");
        QSharedPointer<QCPAxisTickerText> textTicker(new QCPAxisTickerText);
        textTicker->addTick(sd3neg, "-3SD");
        textTicker->addTick(sd2neg, "-2SD");
        textTicker->addTick(sd1neg, "-1SD");
        textTicker->addTick(mean, "X");
        textTicker->addTick(sd1pos, "1SD");
        textTicker->addTick(sd2pos, "2SD");
        textTicker->addTick(sd3pos, "3SD");
        int count1=0;
        int value = datefmt.size();
        QString d1,t1;
        QSharedPointer<QCPAxisTickerText> textTicker1(new QCPAxisTickerText);
        ui->customPlot_3->xAxis->setTickLabelRotation(45);

        for (int i=0;i< value;i++ )
        {
            d1=datefmt[i].toLatin1().data();      // d2=date[1].toLatin1().data();
            t1=timefmt[i].toLatin1().data();
            count1 = count1+10;
            textTicker1->addTick(count1, d1+"\n"+t1);
        }
        ui->customPlot_3->xAxis->setTicker(textTicker1);
        ui->customPlot_3->yAxis->setTicker(textTicker);
        ui->customPlot_3->xAxis->setRange(values.first(), values.last()+10);
        ui->customPlot_3->yAxis->setRange(sd3neg-25,sd3pos+25);
        ui->customPlot_3->replot();
        ui->customPlot_3->update();
    }
    ui->pushButton_331->setEnabled(true);
}

void MainWindow::on_pushButton_290_clicked()
{
    dateformat=2;
    ui->stackedWidget->setCurrentIndex(26);
}


void MainWindow::on_pushButton_293_clicked()
{
    dateformat=7;
    ui->stackedWidget->setCurrentIndex(26);
}


void MainWindow::on_pushButton_291_clicked()
{
    comboclear();
    dateformat=3;
    ui->stackedWidget->setCurrentIndex(26);
}

void MainWindow::on_pushButton_292_clicked()
{
    dateformat=4;
    ui->stackedWidget->setCurrentIndex(26);
}

void MainWindow::on_pushButton_295_clicked()
{
    dateformat=1;
    ui->stackedWidget->setCurrentIndex(26);
}
void MainWindow::on_pushButton_294_clicked()
{
    dateformat=6;
    ui->stackedWidget->setCurrentIndex(26);
}

void MainWindow::on_toolButton_4_clicked()
{
    if(dateformat==1)
    {
        ui->stackedWidget->setCurrentIndex(20);
        ui->stackedWidget_4->setCurrentIndex(1);
        ui->label_427->setText(ui->calendarWidget->selectedDate().toString("yyyy / MM / dd"));
    }
    else if(dateformat==2)
    {
        ui->label_425->setText(ui->calendarWidget->selectedDate().toString("yyyy / MM / dd"));
        QString fcdate = ui->SysDate_Lbl->text();
        QString fcdate_check = ui->calendarWidget->selectedDate().toString("yyyy / MM / dd");
        if(fcdate_check<=fcdate)
        {
            ui->stackedWidget->setCurrentIndex(24);
            ui->stackedWidget_3->setCurrentIndex(2);
        }
        else
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QFont font;
            font.setBold(true);
            msg.setFont(font);
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("The date must be the current date or an earlier date.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
                ui->label_425->clear();
            else
                ui->label_425->clear();
            clearGraph_QC();
        }

    }
    else if(dateformat==3)
    {

        ui->label_426->setText(ui->calendarWidget->selectedDate().toString("yyyy / MM / dd"));
        QString Fcdate = ui->label_425->text();
        if(Fcdate==" ")
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QFont font;
            font.setBold(true);
            msg.setFont(font);
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("Please enter the from date.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
                ui->label_426->clear();
            else
                ui->label_426->clear();
        }
        QString Tcdate_check = ui->calendarWidget->selectedDate().toString("yyyy / MM / dd");
        if(Tcdate_check>=Fcdate)
        {
            ui->stackedWidget->setCurrentIndex(24);
            ui->stackedWidget_3->setCurrentIndex(2);
        }
        else
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QFont font;
            font.setBold(true);
            msg.setFont(font);
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("The date must be today or next days.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
                ui->label_426->clear();
            else
                ui->label_426->clear();
            clearGraph_QC();
        }

    }
    else if(dateformat==4)
    {

        ui->label_430->setText(ui->calendarWidget->selectedDate().toString("yyyy / MM / dd"));
        QString fcdate = ui->SysDate_Lbl->text();
        QString fcdate_check = ui->calendarWidget->selectedDate().toString("yyyy / MM / dd");
        if(fcdate_check<=fcdate)
        {
            ui->stackedWidget->setCurrentIndex(24);
            ui->stackedWidget_3->setCurrentIndex(1);
        }
        else
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QFont font;
            font.setBold(true);
            msg.setFont(font);
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("The date must be the current date or an earlier date.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
                ui->label_430->clear();
            else
                ui->label_430->clear();
            clearGraph_QC();
        }
    }
    else if(dateformat==5)
    {
        ui->label_440->setText(ui->calendarWidget->selectedDate().toString("yyyy / MM / dd"));
        QString Fcdate = ui->label_430->text();
        if(Fcdate==" ")
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QFont font;
            font.setBold(true);
            msg.setFont(font);
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("Please enter the from date.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
                ui->label_440->clear();
            else
                ui->label_440->clear();
        }
        QString Tcdate_check = ui->calendarWidget->selectedDate().toString("yyyy / MM / dd");
        if(Tcdate_check>=Fcdate)
        {
            ui->stackedWidget->setCurrentIndex(24);
            ui->stackedWidget_3->setCurrentIndex(1);
        }
        else
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QFont font;
            font.setBold(true);
            msg.setFont(font);
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("The date must be today or next days.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
                ui->label_440->clear();
            else
                ui->label_440->clear();
            clearGraph_QC();
        }
    }
    else if(dateformat==6)
    {

        ui->label_431->setText(ui->calendarWidget->selectedDate().toString("yyyy / MM / dd"));
        QString fcdate = ui->SysDate_Lbl->text();
        QString fcdate_check = ui->calendarWidget->selectedDate().toString("yyyy / MM / dd");
        if(fcdate_check<=fcdate)
            ui->stackedWidget->setCurrentIndex(9);
        else
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QFont font;
            font.setBold(true);
            msg.setFont(font);
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("The date must be the current date or an earlier date.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
                ui->label_431->clear();
            else
                ui->label_431->clear();
        }
    }
    else if(dateformat==7)
    {
        ui->label_433->setText(ui->calendarWidget->selectedDate().toString("yyyy / MM / dd"));
        QString Fcdate = ui->label_431->text();
        if(Fcdate==" ")
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QFont font;
            font.setBold(true);
            msg.setFont(font);
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("Please enter the from date.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
                ui->label_433->clear();
            else
                ui->label_433->clear();
        }

        QString Tcdate_check = ui->calendarWidget->selectedDate().toString("yyyy / MM / dd");
        if(Tcdate_check>=Fcdate)
        {
            QSqlQueryModel * model = new QSqlQueryModel();
            QSqlQuery *query = new QSqlQuery (mydb) ;

            if(Test_Type=="Biochemistry")
                query->prepare("select PID,PName,TName,Date,Time from Reports WHERE Date BETWEEN '"+Fcdate+"' AND '"+Tcdate_check+"'");
            else if(Test_Type=="Turbidity")
                query->prepare("select PID,PName,TName,Date,Time from Turbidity_Result WHERE Date BETWEEN '"+Fcdate+"' AND '"+Tcdate_check+"'");

            query->exec();
            model->setQuery(*query);
            model->setHeaderData( 0, Qt::Horizontal, QObject::tr("Patient ID") );
            model->setHeaderData( 1, Qt::Horizontal, QObject::tr("Name") );
            model->setHeaderData( 2, Qt::Horizontal, QObject::tr("Parameter name") );
            model->setHeaderData( 3, Qt::Horizontal, QObject::tr("Date") );
            model->setHeaderData( 4, Qt::Horizontal, QObject::tr("Time") );

            ui->tableView_2->setModel(model);

            QSqlQueryModel * modall = new QSqlQueryModel();
            QSqlQuery* qury=new QSqlQuery(mydb);
            if(Test_Type=="Biochemistry")
                qury->prepare("select PID,PName,PAge,PGender,TName,ANrmlRang,BNrmlRang,ODVal,ResultOD,Unit,Date,Time from Reports WHERE Date BETWEEN '"+Fcdate+"' AND '"+Tcdate_check+"'");
            else if(Test_Type=="Turbidity")
                qury->prepare("select PID,PName,PAge,PGender,TName,ANrmlRang,BNrmlRang,ODVal,ResultOD,Unit,Date,Time from Turbidity_Result WHERE Date BETWEEN '"+Fcdate+"' AND '"+Tcdate_check+"'");


            qury->exec();
            modall->setQuery(*qury);
            modall->setHeaderData( 0, Qt::Horizontal, QObject::tr("Patient ID") );
            modall->setHeaderData( 1, Qt::Horizontal, QObject::tr("Name") );
            modall->setHeaderData( 2, Qt::Horizontal, QObject::tr("Age") );
            modall->setHeaderData( 3, Qt::Horizontal, QObject::tr("Gender") );
            modall->setHeaderData( 4, Qt::Horizontal, QObject::tr("Parameter name") );
            modall->setHeaderData( 5, Qt::Horizontal, QObject::tr("Normal range(Max)") );
            modall->setHeaderData( 6, Qt::Horizontal, QObject::tr("Normal range(Min)") );
            modall->setHeaderData( 7, Qt::Horizontal, QObject::tr("OD value") );
            modall->setHeaderData( 8, Qt::Horizontal, QObject::tr("Result OD") );
            modall->setHeaderData( 9, Qt::Horizontal, QObject::tr("Unit") );
            modall->setHeaderData( 10, Qt::Horizontal, QObject::tr("Date") );
            modall->setHeaderData( 11, Qt::Horizontal, QObject::tr("Time") );
            ui->tableView_5->setModel(modall);
            ui->tableView_2->resizeColumnsToContents() ;
            ui->tableView_5->resizeColumnsToContents();

            ui->stackedWidget->setCurrentIndex(9);
        }
        else
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QFont font;
            font.setBold(true);
            msg.setFont(font);
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("The date must be today or next days.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
                ui->label_433->clear();
            else
                ui->label_433->clear();
        }
    }
}

void MainWindow::on_pushButton_338_clicked()
{
    dateformat=5;
    ui->stackedWidget->setCurrentIndex(26);
}

void MainWindow::on_Home_Btn_17_clicked()
{
    ui->pushButton_148->setVisible(false);
    ui->stackedWidget->setCurrentIndex(10);
    ui->stackedWidget_4->setCurrentIndex(0);
    ui->Home_Btn_12->setVisible(true);
    ui->Home_Btn_17->setVisible(false);
}

void MainWindow::on_pushButton_258_clicked()
{
    ui->horizontalSlider->setRange(20,255);

    int Brightness_val=0;
    QSqlQuery qy;
    qy.prepare("select Brightness from Brightness where sno=1");
    qy.exec();
    while(qy.next())
        Brightness_val=qy.value(0).toInt();

    // Set the initial value of the slider

    ui->horizontalSlider->setValue(Brightness_val);
    ui->label_54->setText(QString::number(Brightness_val));
    ui->stackedWidget->setCurrentIndex(27);
}

void MainWindow::on_Home_Btn_22_clicked()
{
    ui->pushButton_148->setVisible(false);
    ui->stackedWidget->setCurrentIndex(10);
}

void MainWindow::on_horizontalSlider_valueChanged(int value)
{
    ui->label_54->setText(QString::number(value));
}

void MainWindow::on_toolButton_5_clicked()
{
    int brightness = ui->label_54->text().toInt();
    QSqlQuery query;
    QString Bright = QString::number(brightness);
    query.prepare("update Brightness set Brightness ='"+Bright+"' where sno=1");
    if(query.exec())
        qDebug()<<"Brightness set sucess..";
    else
        qDebug()<<"Brightness set failed..";
    QFile brightnessFile(BACKLIGHT_DIR "/brightness");
    if (!brightnessFile.open(QIODevice::WriteOnly | QIODevice::Text))
    {
        qDebug() << "Failed to open backlight brightness file";
        return;
    }
    QString brightnessValue = QString::number(brightness);
    brightnessFile.write(brightnessValue.toUtf8());
    brightnessFile.close();
}

void MainWindow::on_Home_Btn_23_clicked()
{
    ui->stackedWidget->setCurrentIndex(2);
    ui->stackedWidget_11->setVisible(false);
}

void MainWindow::on_toolButton_10_clicked()
{
    ui->stackedWidget_2->setCurrentIndex(0);
    ui->label_30->setVisible(true);
    ui->label_30->setText("Printer Setup");
    ui->toolButton_2->setVisible(false);
    ui->radioButton_3->setVisible(true);
    ui->radioButton_4->setVisible(true);
    ui->radioButton_3->setChecked(false);
    ui->radioButton_4->setChecked(false);
    ui->toolButton_11->setVisible(false);
    ui->toolButton_27->setVisible(false);
    ui->Lab_name->setVisible(false);
    ui->Lab_address->setVisible(false);
    ui->pushButton_121->setVisible(false);
    ui->pushButton_136->setVisible(false);
    ui->Patient_Info_Lbl_5->setVisible(false);
    ui->Patient_Info_Lbl_6->setVisible(false);
}

void MainWindow::on_toolButton_25_clicked()
{
    ui->stackedWidget_2->setCurrentIndex(0);
    ui->label_30->setVisible(true);
    ui->label_30->setText("Lab details");
    ui->radioButton_3->setVisible(false);
    ui->radioButton_4->setVisible(false);
    ui->toolButton_2->setVisible(false);
    ui->toolButton_11->setVisible(true);
    ui->toolButton_27->setVisible(true);
    ui->Lab_name->setVisible(true);
    ui->Lab_address->setVisible(true);
    ui->pushButton_121->setVisible(true);
    ui->pushButton_136->setVisible(true);
    ui->Patient_Info_Lbl_5->setVisible(true);
    ui->Patient_Info_Lbl_6->setVisible(true);

    QString lab_name , lab_address;
    QSqlQuery qry;
    qry.prepare("select Lab_name,Lab_address from Lab_details where sno=1");
    qry.exec();
    while(qry.next())
    {
        lab_name = qry.value(0).toString();
        lab_address = qry.value(1).toString();
    }
    ui->Lab_name->setText(lab_name);
    ui->Lab_address->setText(lab_address);
}

void MainWindow::on_toolButton_11_clicked()
{
    Pdefault=1;
    QString lab_name , lab_address,Data;
    lab_name = ui->Lab_name->text();
    lab_address = ui->Lab_address->text();
    Data="1";
    QSqlQuery qry;
    qry.prepare("update Lab_details set Lab_name ='"+lab_name+"' , Lab_address ='"+lab_address+"', Data ='"+Data+"' where sno=1");
    if(qry.exec())
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("Data updated.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
            qDebug()<<"Data";
        else
            qDebug()<<"Data";
    }
}

void MainWindow::on_toolButton_27_clicked()
{
    QString Data ;
    Data="2";
    QString Lab_name= "MCA-11";
    QSqlQuery qry;
    qry.prepare("update Lab_details set Lab_name='"+Lab_name+"' , Data ='"+Data+"' where sno=1");
    if(qry.exec())
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("Data updated.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
            qDebug()<<"Data";
        else
            qDebug()<<"Data";
    }
}

void MainWindow::on_ReactionType_Combo_currentTextChanged(const QString &arg1)
{
    Q_UNUSED(arg1);
    QString cmbo = ui->ReactionType_Combo->currentText();
    if(cmbo=="End point")
    {
        ui->lineEdit_7->setDisabled(true);
        ui->lineEdit_8->setDisabled(true);
        ui->label_420->clear();
        // ui->lineEdit_22->setDisabled(true);
    }
    else if(cmbo=="Fixed Kinetic")
    {
        ui->lineEdit_7->setDisabled(false);
        ui->lineEdit_8->setDisabled(false);
        ui->label_420->clear();

    }
    else if(cmbo=="Kinetic")
    {
        ui->lineEdit_7->setDisabled(false);
        ui->lineEdit_8->setDisabled(false);
        QString Data = ui->lineEdit_8->text();
        if(Data=="120")
            ui->label_420->setText("2");
        else if(Data=="180")
            ui->label_420->setText("3");
    }
}
void MainWindow::clearGridLayout(QGridLayout* layout) {
    // Iterate through all items in the layout
    while (QLayoutItem* item = layout->takeAt(0)) {
        // Check if the item is a widget, and delete it
        if (QWidget* widget = item->widget()) {
            delete widget;
        }

        // Delete the layout item
        delete item;
    }
}
void MainWindow::on_pushButton_139_clicked()
{
    clearGridLayout(ui->gridLayout_2);
    ui->pushButton_139->setStyleSheet("QPushButton {border: 2px solid green;border-top-left-radius:40px;border-top-right-radius:40px;background-color: white;padding: 10px;}");
    ui->pushButton_6->setStyleSheet("QPushButton {border: 2px solid black;border-top-left-radius:40px;border-top-right-radius:40px;background-color: #d0d5d6;padding: 10px;}");
    if(Test_Type=="Biochemistry")
    {
        ui->scrollArea_7->verticalScrollBar()->setStyleSheet("QScrollBar:vertical {"
                                                             "    border: 1px solid #999999;"
                                                             "    background:white;"
                                                             "    width:25px;    "
                                                             "    margin: 0px 0px 0px 0px;"
                                                             "}"
                                                             "QScrollBar::handle:vertical {"
                                                             "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                             "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145), stop:1 rgb(12, 68, 145));"
                                                             "    min-height: 0px;"
                                                             "}"
                                                             "QScrollBar::add-line:vertical {"
                                                             "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                             "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                             "    height: 0px;"
                                                             "    subcontrol-position: bottom;"
                                                             "    subcontrol-origin: margin;"
                                                             "}"
                                                             "QScrollBar::sub-line:vertical {"
                                                             "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                             "    stop: 0  rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                             "    height: 0 px;"
                                                             "    subcontrol-position: top;"
                                                             "    subcontrol-origin: margin;"
                                                             "}"
                                                             );
        ui->scrollArea_7->horizontalScrollBar()->setStyleSheet( "QScrollBar:horizontal { "
                                                                "    border: 1px solid #999999;"
                                                                "    background:white;"
                                                                "    height:25px;    "
                                                                "    margin: 0px 0px 0px 0px;"
                                                                "}"
                                                                "QScrollBar::handle:horizontal {"
                                                                "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                                "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145), stop:1 rgb(12, 68, 145));"
                                                                "    min-height: 0px;"
                                                                "}"
                                                                "QScrollBar::add-line:horizontal {"
                                                                "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                                "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                                "    height: 0px;"
                                                                "    subcontrol-position: bottom;"
                                                                "    subcontrol-origin: margin;"
                                                                "}"
                                                                "QScrollBar::sub-line:horizontal {"
                                                                "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                                "    stop: 0  rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                                "    height: 0 px;"
                                                                "    subcontrol-position: top;"
                                                                "    subcontrol-origin: margin;"
                                                                "}");

        ui->gridLayout_2->update();
    }
    else if(Test_Type=="Turbidity")
    {
        ui->scrollArea_7->verticalScrollBar()->setStyleSheet("QScrollBar:vertical {"
                                                             "    border: 1px solid #999999;"
                                                             "    background:white;"
                                                             "    width:25px;    "
                                                             "    margin: 0px 0px 0px 0px;"
                                                             "}"
                                                             "QScrollBar::handle:vertical {"
                                                             "   background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                             "    min-height: 0px;"
                                                             "}"
                                                             "QScrollBar::add-line:vertical {"
                                                             "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                             "    height: 0px;"
                                                             "    subcontrol-position: bottom;"
                                                             "    subcontrol-origin: margin;"
                                                             "}"
                                                             "QScrollBar::sub-line:vertical {"
                                                             "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                             "    height: 0 px;"
                                                             "    subcontrol-position: top;"
                                                             "    subcontrol-origin: margin;"
                                                             "}"
                                                             );
        ui->scrollArea_7->horizontalScrollBar()->setStyleSheet( "QScrollBar:horizontal { "
                                                                "    border: 1px solid #999999;"
                                                                "    background:white;"
                                                                "    height:25px;    "
                                                                "    margin: 0px 0px 0px 0px;"
                                                                "}"
                                                                "QScrollBar::handle:horizontal {"
                                                                "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                                "    min-height: 0px;"
                                                                "}"
                                                                "QScrollBar::add-line:horizontal {"
                                                                "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                                "    height: 0px;"
                                                                "    subcontrol-position: bottom;"
                                                                "    subcontrol-origin: margin;"
                                                                "}"
                                                                "QScrollBar::sub-line:horizontal {"
                                                                "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                                "    height: 0 px;"
                                                                "    subcontrol-position: top;"
                                                                "    subcontrol-origin: margin;"
                                                                "}");

        ui->gridLayout_2->update();
    }
    int count =0;
    int count1=0;
    QString val1;
    QSqlQuery query;
    if(Test_Type=="Biochemistry")
        query.prepare("SELECT RecentCNT , name FROM test ORDER BY RecentCNT DESC;");
    else if(Test_Type=="Turbidity")
        query.prepare("SELECT RecentCNT , TestName FROM Turbidity_test ORDER BY RecentCNT DESC;");

    query.exec();
    while(query.next())
    {
        int val=query.value(0).toInt();
        if(val==0000000)
        {
        }
        else
        {
            val1 = QString::number(val);
            QString s=query.value(1).toString();
            arraylst[count]=s;
            array1[count]=val1;
            count++;
        }
    }
    bool shouldBreak = false;
    const QSize btnSize = QSize(150, 50);
    for (int i=0;i<15 ;i++ )
    {
        for (int j=0;j<5 ;j++ )
        {
            if(count1==count)
            {
                shouldBreak = true;
                break;
            }
            else
            {
                if (array1[count1] != "0000000")
                {
                    QPushButton *button = new QPushButton(arraylst[count1]);
                    if(Test_Type=="Biochemistry")
                    {
                        button->setStyleSheet(
                                    "QPushButton {"
                                    "  background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                    "  color: white;"
                                    "}"
                                    "QPushButton:hover {"
                                    "  background-color: qlineargradient(spread:pad, x1:0, y1:0.0913636, x2:0.944, y2:0.392, stop:0.0969388 rgba(22, 123, 200, 255), stop:1 rgba(20, 113, 180, 255));""}"
                                    "QPushButton:disabled {"
                                    "  background: rgb(170, 170, 127);"
                                    "  color: black;"
                                    "}"
                                    "QPushButton:pressed {"
                                    " background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                    "margin-top: 2px;"
                                    "margin-bottom: -4px;"
                                    "color: white;"
                                    "}"
                                    );
                    }
                    else if(Test_Type=="Turbidity")
                    {
                        button->setStyleSheet(
                                    "QPushButton {"
                                    "  background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                    "  color: white;"
                                    "}"
                                    "QPushButton:hover {"
                                    "  background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 214, 157, 255), stop:1 rgba(0, 214, 157, 255));}"
                                    "QPushButton:disabled {"
                                    "  background: rgb(170, 170, 127);"
                                    "  color: black;"
                                    "}"
                                    "QPushButton:pressed {"
                                    " background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                    "margin-top: 2px;"
                                    "margin-bottom: -4px;"
                                    "color: white;"
                                    "}"
                                    );
                    }
                    QFont font = button->font();
                    font.setBold(true);
                    button->setFont(font);
                    button->setFixedSize(btnSize);
                    button->setObjectName(arraylst[count1]);
                    connect(button, &QPushButton::clicked, this, &MainWindow::cald);
                    ui->gridLayout_2->addWidget(button, i, j);
                }
                count1++;
            }
        }
        qDebug()<<"loop out ";
        if (shouldBreak)
            break; // Break the outer loop
    }
    ui->stackedWidget->setCurrentIndex(1);

}

void MainWindow::on_pushButton_6_clicked()
{
    if(Test_Type=="Biochemistry")
    {
        clearGridLayout(ui->gridLayout_2);
        ui->Home_Lbl_2->setText("Select parameter to test");
        ui->pushButton_6->setStyleSheet("QPushButton {border: 2px solid green;border-top-left-radius:40px;border-top-right-radius:40px;background-color: white;padding: 10px;}");
        ui->pushButton_139->setStyleSheet("QPushButton {border: 2px solid black;border-top-left-radius:40px;border-top-right-radius:40px;background-color: #d0d5d6;padding: 10px;}");
        ui->scrollArea_7->verticalScrollBar()->setStyleSheet("QScrollBar:vertical {"
                                                             "    border: 1px solid #999999;"
                                                             "    background:white;"
                                                             "    width:25px;    "
                                                             "    margin: 0px 0px 0px 0px;"
                                                             "}"
                                                             "QScrollBar::handle:vertical {"
                                                             "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                             "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145), stop:1 rgb(12, 68, 145));"
                                                             "    min-height: 0px;"
                                                             "}"
                                                             "QScrollBar::add-line:vertical {"
                                                             "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                             "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                             "    height: 0px;"
                                                             "    subcontrol-position: bottom;"
                                                             "    subcontrol-origin: margin;"
                                                             "}"
                                                             "QScrollBar::sub-line:vertical {"
                                                             "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                             "    stop: 0  rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                             "    height: 0 px;"
                                                             "    subcontrol-position: top;"
                                                             "    subcontrol-origin: margin;"
                                                             "}"
                                                             );
        ui->scrollArea_7->horizontalScrollBar()->setStyleSheet( "QScrollBar:horizontal { "
                                                                "    border: 1px solid #999999;"
                                                                "    background:white;"
                                                                "    height:25px;    "
                                                                "    margin: 0px 0px 0px 0px;"
                                                                "}"
                                                                "QScrollBar::handle:horizontal {"
                                                                "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                                "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145), stop:1 rgb(12, 68, 145));"
                                                                "    min-height: 0px;"
                                                                "}"
                                                                "QScrollBar::add-line:horizontal {"
                                                                "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                                "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                                "    height: 0px;"
                                                                "    subcontrol-position: bottom;"
                                                                "    subcontrol-origin: margin;"
                                                                "}"
                                                                "QScrollBar::sub-line:horizontal {"
                                                                "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                                "    stop: 0  rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                                "    height: 0 px;"
                                                                "    subcontrol-position: top;"
                                                                "    subcontrol-origin: margin;"
                                                                "}");

        ui->gridLayout_2->update();

        QSqlQuery query;

        query.prepare("SELECT name FROM test ORDER BY name ASC;");
        query.exec();
        int count=0;
        while(query.next())
        {
            QString s=query.value(0).toString();
            arraylst[count]=s;
            count++;
        }
        int count1=0;
        qDebug()<<"Objdel : "<<Objdel;
        const QSize btnSize = QSize(150, 50);
        for (int i=0;i<15 ;i++ )
        {
            for (int j=0;j<5 ;j++ )
            {
                if(count1==count)
                    break;
                else
                {
                    QPushButton *button = new QPushButton(arraylst[count1]);
                    button->setStyleSheet("QPushButton {"
                                          "  background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                          "  color: white;"
                                          "}"
                                          "QPushButton:hover {"
                                          "  background-color: qlineargradient(spread:pad, x1:0, y1:0.0913636, x2:0.944, y2:0.392, stop:0.0969388 rgba(22, 123, 200, 255), stop:1 rgba(20, 113, 180, 255));""}"
                                          "QPushButton:disabled {"
                                          "  background: rgb(170, 170, 127);"
                                          "  color: black;"
                                          "}"
                                          "QPushButton:pressed {"
                                          " background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                          "margin-top: 2px;"
                                          "margin-bottom: -4px;"
                                          "color: white;"
                                          "}"
                                          );
                    QFont font = button->font();
                    font.setBold(true);
                    button->setFont(font);
                    button->setFixedSize(btnSize);
                    button->setObjectName(arraylst[count1]);
                    connect(button, &QPushButton::clicked, this,&MainWindow::cald);
                    ui->gridLayout_2->addWidget(button,i,j);
                    count1++;
                }
            }
        }

        ui->stackedWidget->setCurrentIndex(1);
    }
    else if(Test_Type=="Turbidity")
        Listout_Turbidity_Parameter();

}

void MainWindow::on_pushButton_148_clicked()
{
    ui->label_211->setText("Status : ");
    ui->label_340->clear();
    QDir pathDir("/home/pi/Biochemistry_Versions");
    if (pathDir.exists())
    {
        QDir directory("/home/pi/Biochemistry_Versions");
        directory.removeRecursively();
        Check_for_Updates();
    }
    else
        Check_for_Updates();
}

int MainWindow::Check_for_Updates()
{
    qApp->processEvents();
    QProcess *myprocess = new QProcess(this);
    myprocess->setWorkingDirectory("/home/pi/");

    // Check if the directory already exists and if so, pull the latest changes
    QDir dir("/home/pi/Biochemistry_Versions");
    if (dir.exists()) {
        myprocess->start("git -C /home/pi/Biochemistry_Versions pull");
    } else {
        myprocess->start("git clone https://github.com/Instruments04/Biochemistry_Versions.git");
    }

    if (!myprocess->waitForStarted()) {
        handleProcessError1(myprocess, "The process was stopped due to a poor WiFi signal.");
        delete myprocess; // Release memory when you're done
        return 1;
    }

    if (!myprocess->waitForFinished(-1)) {
        handleProcessError1(myprocess, "The process was stopped due to a poor WiFi signal.");
        delete myprocess; // Release memory when you're done
        return 0;
    } else {
        if (myprocess->exitCode() == 0) {
            QFile file("/home/pi/Biochemistry_Versions/README.md");
            if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
                QTextStream in(&file);
                while (!in.atEnd()) {
                    QString data = in.readLine();
                    bool ok = false;
                    double Version = data.toDouble(&ok);
                    if (ok) {
                        double old_version = ui->label_31->text().toDouble();
                        if (Version > old_version) {
                            ui->label_211->setText("Status : ");
                            ui->label_340->setText("<font color='green'>The new version of the software is now available, kindly upgrade to it.</font>");
                        } else {
                            ui->label_211->setText("Status : ");
                            ui->label_340->setText("<font color='blue'>The software has already been updated to the latest version.</font>");
                        }
                    }
                }
                file.close();
            } else
            {
                qDebug() << "File Not Found";
                ui->label_211->setText("Status : ");
                ui->label_340->setText("<font color='red'>README.md file not found.</font>");
            }
        } else if (myprocess->exitCode() == 128) {
            handleProcessError1(myprocess, "The process was stopped due to a poor WiFi signal.");
        } else {
            handleProcessError1(myprocess, "An unknown error occurred while updating.");
        }
    }

    delete myprocess; // Release memory when you're done
    return 0;
}

void MainWindow::handleProcessError1(QProcess *process, const QString &errorMessage)
{
    ui->label_211->setText("Status : ");
    ui->label_340->setText("<font color='red'>" + errorMessage + "</font>");
    qDebug() << "Error : " << process->errorString();
}


void MainWindow::on_pushButton_149_clicked()
{
    QString Printer_Name = ui->comboBox_10->currentText();
    QString Type = ui->comboBox_12->currentText();
    QString Paper_Size = ui->comboBox_13->currentText();
    QSqlQuery qry;
    qry.prepare("update Printer set Name='"+Printer_Name+"' , Type='"+Type+"' , Papersize = '"+Paper_Size+"' where sno=1");
    if(qry.exec())
    {
        ui->Load_Btn_2->setVisible(true);
        ui->toolButton_2->setEnabled(false);
        ui->toolButton_2->setVisible(false);
        ui->pushButton_276->setEnabled(true);
        ui->pushButton_16->setEnabled(true);
        External=2;
        Internal=1;
        Cdefault=1;

        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        msg.setText("You have selected an external printer.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
            ui->stackedWidget->setCurrentIndex(14);
        else
            ui->stackedWidget->setCurrentIndex(14);
    }
    else
    {

    }

}

void MainWindow::on_toolButton_28_clicked()
{
    QString Title;
    QSqlQuery qry;
    qry.prepare("select Lab_name from Lab_details where sno=1");
    qry.exec();
    while(qry.next())
        Title=qry.value(0).toString();

    const QString format("<td style=\"text-align: center;\">%1</td>");
    QString html =
            "<div align=right>"
            "Date: "+ui->SysDate_Lbl->text()+"<br>"
                                             "Time: "+ui->SysTime_Lbl->text()+"<br>"
                                                                              "</div>"
                                                                              "<h3 style=\"text-align: center;\">" + Title + " Test Report</h3><br>"
                                                                                                                             "<p align=justify>"
                                                                                                                             "document content document content document content document content document content document content document content document content document content document content "
                                                                                                                             "document content document content document content document content document content document content document content document content document content document content "
                                                                                                                             "</p>"
                                                                                                                             "<div align=right>sincerly</div>";

    QTextDocument document;
    document.setHtml(html);
    QPrinter printer;
    QString Printername,Type,Papersize;
    QSqlQuery qy;
    qy.prepare("select Name,Type,Papersize from Printer where sno=1");
    qy.exec();
    while(qy.next())
    {
        Printername= qy.value(0).toString();
        Type= qy.value(1).toString();
        Papersize=qy.value(2).toString();
    }
    printer.setPrinterName(Printername);
    if(Papersize == "A3 (29.7cm x 42.0cm)")
        printer.setPaperSize(QPrinter::A3);
    else if(Papersize == "A4 (21.0cm x 29.7cm)")
        printer.setPaperSize(QPrinter::A4);
    else if(Papersize == "A5 (14.8cm x 21.0cm)")
        printer.setPaperSize(QPrinter::A5);
    else if(Papersize == "A6 (10.5cm x 14.8cm)")
        printer.setPaperSize(QPrinter::A6);
    else if(Papersize == "Letter ( 21.59cm x 27.94cm)")
        printer.setPaperSize(QPrinter::Letter);
    else if(Papersize == "Legal (21.59cm x 35.56cm)")
        printer.setPaperSize(QPrinter::Legal);
    printer.setResolution(300);
    if(Type == "Portrait")
        printer.setOrientation(QPrinter::Portrait);
    else if(Type == "Landscape")
        printer.setOrientation(QPrinter::Landscape);
    if (printer.isValid()) {
        document.print(&printer);
    }
    else
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);

        msg.setText("Printer is unavailable or invalid.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
            qDebug()<<"Data";
        else
            qDebug()<<"Data";
    }
}

int MainWindow::on_toolButton_24_clicked()
{
    ui->label_344->setText("Status : ");
    ui->label_343->setText("Upgrading software. Please wait...");

    // Use QTimer instead of QThread::msleep for better responsiveness
    QTimer::singleShot(500, this, &MainWindow::startUpdateProcess);

    return 0;
}

void MainWindow::startUpdateProcess()
{
    qApp->processEvents();

    QString repoUrl = "https://github.com/Instruments04/BCYWithTRY.git";
    QString repoDir = "/home/pi/BCYWithTRY";

    // Clean up old directory if it exists
    QDir dir(repoDir);
    if (dir.exists()) {
        if (!dir.removeRecursively()) {
            qDebug() << "Failed to remove old directory";
            handleProcessError("Failed to remove old directory.");
            return;
        }
    }

    QProcess *myprocess = new QProcess(this);
    myprocess->setWorkingDirectory("/home/pi/");
    myprocess->start("git clone "+repoUrl+"");

    if (!myprocess->waitForStarted()) {
        handleProcessError(myprocess, "The process was stopped due to a poor WiFi signal.");
        delete myprocess;
        return;
    }

    if (!myprocess->waitForFinished(-1)) {
        handleProcessError(myprocess, "The process was stopped due to a poor WiFi signal.");
        delete myprocess;
        return;
    }

    // Check for README.md file and version update
    QFile file(repoDir + "/README.md");
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        handleProcessError("README.md file not found.");
        return;
    }
    QTextStream in(&file);
    bool updated = false;
    while (!in.atEnd()) {
        QString data = in.readLine().trimmed();
        bool ok = false;
        double version = data.toDouble(&ok);
        if (ok) {
            double oldVersion = ui->label_31->text().toDouble(); // Replace with your actual version retrieval logic
            if (version > oldVersion) {
                updated = true;
                QDir targetDir("/home/pi/git/BCYWithTRY");
                if (targetDir.exists() && !targetDir.removeRecursively()) {
                    handleProcessError("Failed to remove target directory.");
                    return;
                }
                if (QFile::rename(repoDir, "/home/pi/git/BCYWithTRY")) {
                    qDebug() << "Files moved successfully.";

                    // Additional checks or actions for specific directories
                    QDir specificDir("/home/pi/git/BCYWithTRY/BCYWithTRY");
                    if (specificDir.exists()) {
                        // Perform specific checks or actions
                    }

                    // Make executable and prepare for reboot
                    makeExecutable("/home/pi/git/BCYWithTRY/build-BCYWithTRY-Desktop-Release/BCYWithTRY");
                    uiUpdateSuccess("Upgrade completed, system is preparing to reboot; please wait.");
                } else {
                    handleProcessError("Failed to move new version files.");
                }
            } else {
                uiUpdateAlreadyLatest("The software has already been updated to the latest version.");
            }
        }
    }
    file.close();

    if (!updated) {
        handleProcessError("No valid version found in README.md.");
    }

    delete myprocess;
}

void MainWindow::handleProcessError(const QString &errorMessage)
{
    ui->label_344->setText("Status : ");
    ui->label_343->setText("<font color='red'>" + errorMessage + "</font>");
    // Implement your error handling logic here, e.g., update UI
}

void MainWindow::makeExecutable(const QString &filePath)
{
    QProcess *makeExecutableProcess = new QProcess(this);
    makeExecutableProcess->start("sudo", QStringList() << "chmod" << "+x" <<filePath);
    makeExecutableProcess->waitForFinished(-1);
    delete makeExecutableProcess;
}

void MainWindow::scheduleReboot()
{
    QProcess *restartProcess = new QProcess(this);
    restartProcess->start("sudo", QStringList() << "shutdown" << "-r" << "+1");
    restartProcess->waitForFinished(-1);
    delete restartProcess;
    // Handle error checking and logging if needed
}

void MainWindow::uiUpdateSuccess(const QString &errorMessage)
{
    // Update UI for successful update
    ui->label_344->setText("Status : ");
    ui->label_343->setText("<font color='green'>" + errorMessage + "</font>");
    scheduleReboot();
}

void MainWindow::uiUpdateAlreadyLatest(const QString &errorMessage)
{
    // Update UI if already at latest version
    ui->label_344->setText("Status : ");
    ui->label_343->setText("<font color='blue'>" + errorMessage + "</font>");
}

void MainWindow::handleProcessError(QProcess *process, const QString &errorMessage)
{
    ui->label_344->setText("Status : ");
    ui->label_343->setText("<font color='red'>" + errorMessage + "</font>");
}

void MainWindow::on_toolButton_29_clicked()
{
    ui->stackedWidget->setCurrentIndex(10);
}

void MainWindow::on_Home_Btn_24_clicked()
{
    ui->stackedWidget->setCurrentIndex(10);
    ui->pushButton_148->setVisible(false);
}

void MainWindow::Calibration_Histry_Update()
{
    Cal_His_Val=1;
    QSqlQuery query1,query2,query3,query4,query5,query6,query7,query8,query9,query10;
    QString Tname1,Tname2,Tname3,Tname4,Tname5,Tname6,Tname7,Tname8,Tname9,Tname10;
    QString Batch1,Batch2,Batch3,Batch4,Batch5,Batch6,Batch7,Batch8,Batch9,Batch10;
    QString concend1,concend2,concend3,concend4,concend5,concend6,concend7,concend8,concend9,concend10;
    QString asbso1,asbso2,asbso3,asbso4,asbso5,asbso6,asbso7,asbso8,asbso9,asbso10;
    QString facto1,facto2,facto3,facto4,facto5,facto6,facto7,facto8,facto9,facto10;
    QString dattte1,dattte2,dattte3,dattte4,dattte5,dattte6,dattte7,dattte8,dattte9,dattte10;

    QSqlQuery query;

    query1.prepare("select * from "+Calibration_Histry_TestName+" where sno=1");
    query1.exec();
    while(query1.next())
    {
        Tname1=query1.value(1).toString();
        Batch1=query1.value(2).toString();
        concend1=query1.value(3).toString();
        asbso1=query1.value(4).toString();
        facto1=query1.value(5).toString();
        dattte1=query1.value(6).toString();
    }
    query2.prepare("select * from "+Calibration_Histry_TestName+" where sno=2");
    query2.exec();
    while(query2.next())
    {
        Tname2=query2.value(1).toString();
        Batch2=query2.value(2).toString();
        concend2=query2.value(3).toString();
        asbso2=query2.value(4).toString();
        facto2=query2.value(5).toString();
        dattte2=query2.value(6).toString();
    }
    query3.prepare("select * from "+Calibration_Histry_TestName+" where sno=3");
    query3.exec();
    while(query3.next())
    {
        Tname3=query3.value(1).toString();
        Batch3=query3.value(2).toString();
        concend3=query3.value(3).toString();
        asbso3=query3.value(4).toString();
        facto3=query3.value(5).toString();
        dattte3=query3.value(6).toString();
    }
    query4.prepare("select * from "+Calibration_Histry_TestName+" where sno=4");
    query4.exec();
    while(query4.next())
    {
        Tname4=query4.value(1).toString();
        Batch4=query4.value(2).toString();
        concend4=query4.value(3).toString();
        asbso4=query4.value(4).toString();
        facto4=query4.value(5).toString();
        dattte4=query4.value(6).toString();
    }
    query5.prepare("select * from "+Calibration_Histry_TestName+" where sno=5");
    query5.exec();
    while(query5.next())
    {
        Tname5=query5.value(1).toString();
        Batch5=query5.value(2).toString();
        concend5=query5.value(3).toString();
        asbso5=query5.value(4).toString();
        facto5=query5.value(5).toString();
        dattte5=query5.value(6).toString();
    }
    query6.prepare("select * from "+Calibration_Histry_TestName+" where sno=6");
    query6.exec();
    while(query6.next())
    {
        Tname6=query6.value(1).toString();
        Batch6=query6.value(2).toString();
        concend6=query6.value(3).toString();
        asbso6=query6.value(4).toString();
        facto6=query6.value(5).toString();
        dattte6=query6.value(6).toString();
    }
    query7.prepare("select * from "+Calibration_Histry_TestName+" where sno=7");
    query7.exec();
    while(query7.next())
    {
        Tname7=query7.value(1).toString();
        Batch7=query7.value(2).toString();
        concend7=query7.value(3).toString();
        asbso7=query7.value(4).toString();
        facto7=query7.value(5).toString();
        dattte7=query7.value(6).toString();
    }
    query8.prepare("select * from "+Calibration_Histry_TestName+" where sno=8");
    query8.exec();
    while(query8.next())
    {
        Tname8=query8.value(1).toString();
        Batch8=query8.value(2).toString();
        concend8=query8.value(3).toString();
        asbso8=query8.value(4).toString();
        facto8=query8.value(5).toString();
        dattte8=query8.value(6).toString();
    }
    query9.prepare("select * from "+Calibration_Histry_TestName+" where sno=9");
    query9.exec();
    while(query9.next())
    {
        Tname9=query9.value(1).toString();
        Batch9=query9.value(2).toString();
        concend9=query9.value(3).toString();
        asbso9=query9.value(4).toString();
        facto9=query9.value(5).toString();
        dattte9=query9.value(6).toString();
    }
    query10.prepare("select * from "+Calibration_Histry_TestName+" where sno=10");
    query10.exec();
    while(query10.next())
    {
        Tname10=query10.value(1).toString();
        Batch10=query10.value(2).toString();
        concend10=query10.value(3).toString();
        asbso10=query10.value(4).toString();
        facto10=query10.value(5).toString();
        dattte10=query10.value(6).toString();
    }
    qDebug()<<"Looping...";
    QString data="";
    QSqlQuery qu1,qu2,qu3,qu4,qu5,qu6,qu7,qu8,qu9,qu10;
    qu1.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+Tname2+"' ,bno = '"+Batch2+"' , conc='"+concend2+"' , abs='"+asbso2+"' , fact='"+facto2+"',date='"+dattte2+"' where sno=1");
    qu1.exec();
    qu2.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+Tname3+"' ,bno = '"+Batch3+"' , conc='"+concend3+"' , abs='"+asbso3+"' , fact='"+facto3+"',date='"+dattte3+"' where sno=2");
    qu2.exec();
    qu3.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+Tname4+"' ,bno = '"+Batch4+"' , conc='"+concend4+"' , abs='"+asbso4+"' , fact='"+facto4+"',date='"+dattte4+"' where sno=3");
    qu3.exec();
    qu4.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+Tname5+"' ,bno = '"+Batch5+"' , conc='"+concend5+"' , abs='"+asbso5+"' , fact='"+facto5+"',date='"+dattte5+"' where sno=4");
    qu4.exec();
    qu5.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+Tname6+"' ,bno = '"+Batch6+"' , conc='"+concend6+"' , abs='"+asbso6+"' , fact='"+facto6+"',date='"+dattte6+"' where sno=5");
    qu5.exec();
    qu6.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+Tname7+"' ,bno = '"+Batch7+"' , conc='"+concend7+"' , abs='"+asbso7+"' , fact='"+facto7+"',date='"+dattte7+"' where sno=6");
    qu6.exec();
    qu7.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+Tname8+"' ,bno = '"+Batch8+"' , conc='"+concend8+"' , abs='"+asbso8+"' , fact='"+facto8+"',date='"+dattte8+"' where sno=7");
    qu7.exec();
    qu8.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+Tname9+"' ,bno = '"+Batch9+"' , conc='"+concend9+"' , abs='"+asbso9+"' , fact='"+facto9+"',date='"+dattte9+"' where sno=8");
    qu8.exec();
    qu9.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+Tname10+"' ,bno = '"+Batch10+"' , conc='"+concend10+"' , abs='"+asbso10+"' , fact='"+facto10+"',date='"+dattte10+"' where sno=9");
    qu9.exec();
    qu10.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+data+"' ,bno = '"+data+"' , conc='"+data+"' , abs='"+data+"' , fact='"+data+"',date='"+data+"' where sno=10");
    qu10.exec();
    Calibration_Histry_All();
}

void MainWindow::Calibration_Histry_All()
{
    date=ui->SysDate_Lbl->text();
    QSqlQuery query1,query2,query3,query4,query5,query6,query7,query8,query9,query10;
    QSqlQuery query;
    QSqlQuery qry;
    qry.prepare("select Batch_No,con1,Pro_Code from test where name='"+TestName+"'");
    qry.exec();
    while(qry.next())
    {
        bno=qry.value(0).toString();
        conc=qry.value(1).toString();
        procode=qry.value(2).toString();
    }
    if(Prod_Code=="MB1011")
        Calibration_Histry_TestName="Cal_His_Glucose";
    else if(Prod_Code=="MB1021")
        Calibration_Histry_TestName="Cal_His_Glucose_HK";
    else if(Prod_Code=="MB1031")
        Calibration_Histry_TestName="Cal_His_ADA";
    else if(Prod_Code=="MB1041")
        Calibration_Histry_TestName="Cal_His_Albumin";
    else if(Prod_Code=="MB1051")
        Calibration_Histry_TestName="Cal_His_ALP";
    else if(Prod_Code=="MB1061")
        Calibration_Histry_TestName="Cal_His_Amylase";
    else if(Prod_Code=="MB1071")
        Calibration_Histry_TestName="Cal_His_Ammonia";
    else if(Prod_Code=="MB1081")
        Calibration_Histry_TestName="Cal_His_ASO";
    else if(Prod_Code=="MB1091")
        Calibration_Histry_TestName="Cal_His_ACE";
    else if(Prod_Code=="MB1101")
        Calibration_Histry_TestName="Cal_His_Bicarbonate";
    else if(Prod_Code=="MB1111")
        Calibration_Histry_TestName="Cal_His_BDirect";
    else if(Prod_Code=="MB1121")
        Calibration_Histry_TestName="Cal_His_BTotal";
    else if(Prod_Code=="MB1131")
        Calibration_Histry_TestName="Cal_His_Calcium";
    else if(Prod_Code=="MB1141")
        Calibration_Histry_TestName="Cal_His_Chloride";
    else if(Prod_Code=="MB1151")
        Calibration_Histry_TestName="Cal_His_CK_MB";
    else if(Prod_Code=="MB1161")
        Calibration_Histry_TestName="Cal_His_CK_NAC";
    else if(Prod_Code=="MB1171")
        Calibration_Histry_TestName="Cal_His_Crea_Enzy";
    else if(Prod_Code=="MB1181")
        Calibration_Histry_TestName="Cal_His_Crea_Kine";
    else if(Prod_Code=="MB1191")
        Calibration_Histry_TestName="Cal_His_Ethyl_Alco";
    else if(Prod_Code=="MB1201")
        Calibration_Histry_TestName="Cal_His_GGT";
    else if(Prod_Code=="MB1211")
        Calibration_Histry_TestName="Cal_His_AST";
    else if(Prod_Code=="MB1221")
        Calibration_Histry_TestName="Cal_His_ALT";
    else if(Prod_Code=="MB1231")
        Calibration_Histry_TestName="Cal_His_HDL_Choles";
    else if(Prod_Code=="MB1241")
        Calibration_Histry_TestName="Cal_His_Hemoglobin";
    else if(Prod_Code=="MB1251")
        Calibration_Histry_TestName="Cal_His_HCY";
    else if(Prod_Code=="MB1261")
        Calibration_Histry_TestName="Cal_His_Iron";
    else if(Prod_Code=="MB1271")
        Calibration_Histry_TestName="Cal_His_Lactate";
    else if(Prod_Code=="MB1281")
        Calibration_Histry_TestName="Cal_His_LDH";
    else if(Prod_Code=="MB1291")
        Calibration_Histry_TestName="Cal_His_LDL_Choles";
    else if(Prod_Code=="MB1301")
        Calibration_Histry_TestName="Cal_His_Lipase";
    else if(Prod_Code=="MB1311")
        Calibration_Histry_TestName="Cal_His_Magnesium";
    else if(Prod_Code=="MB1321")
        Calibration_Histry_TestName="Cal_His_Microalbumin";
    else if(Prod_Code=="MB1331")
        Calibration_Histry_TestName="Cal_His_Phospholipids";
    else if(Prod_Code=="MB1341")
        Calibration_Histry_TestName="Cal_His_Phos_UV";
    else if(Prod_Code=="MB1351")
        Calibration_Histry_TestName="Cal_His_Phos_C";
    else if(Prod_Code=="MB1361")
        Calibration_Histry_TestName="Cal_His_Potassium";
    else if(Prod_Code=="MB1371")
        Calibration_Histry_TestName="Cal_His_RF";
    else if(Prod_Code=="MB1381")
        Calibration_Histry_TestName="Cal_His_Sodium";
    else if(Prod_Code=="MB1391")
        Calibration_Histry_TestName="Cal_His_TC";
    else if(Prod_Code=="MB1401")
        Calibration_Histry_TestName="Cal_His_TP";
    else if(Prod_Code=="MB1411")
        Calibration_Histry_TestName="Cal_His_TPU_CSF";
    else if(Prod_Code=="MB1421")
        Calibration_Histry_TestName="Cal_His_TIBC";
    else if(Prod_Code=="MB1431")
        Calibration_Histry_TestName="Cal_His_Trigly";
    else if(Prod_Code=="MB1441")
        Calibration_Histry_TestName="Cal_His_Urea";
    else if(Prod_Code=="MB1451")
        Calibration_Histry_TestName="Cal_His_Uric_Acid";
    else if(Prod_Code=="MB1461")
        Calibration_Histry_TestName="Cal_His_Zinc";
    else if(Prod_Code=="MB1471")
        Calibration_Histry_TestName="Cal_His_Cholin";
    else if(Prod_Code=="MB1481")
        Calibration_Histry_TestName="Cal_His_Copper";
    else if(Prod_Code=="MB1491")
        Calibration_Histry_TestName="Cal_His_Lithium";
    else if(Prod_Code=="MB1501")
        Calibration_Histry_TestName="Cal_His_TBA";
    else if(Prod_Code=="MB1511")
        Calibration_Histry_TestName="Cal_His_UIBC";
    else if(Prod_Code=="MB1521")
        Calibration_Histry_TestName="Cal_His_GD";
    else if(Prod_Code=="MB1462")
        Calibration_Histry_TestName="Cal_His_ZINC_S";
    else if(Prod_Code=="MB1651")
        Calibration_Histry_TestName="Cal_His_MAGNESIUM_C";
    else if(Prod_Code=="MB1212")
        Calibration_Histry_TestName="Cal_His_AST_S";
    else if(Prod_Code=="MB1222")
        Calibration_Histry_TestName="Cal_His_ALT_S";
    else if(Prod_Code=="MB1052")
        Calibration_Histry_TestName="Cal_His_ALP_S";
    else if(Prod_Code=="MB1122")
        Calibration_Histry_TestName="Cal_His_BTOTAL_S";
    else if(Prod_Code=="MB1182")
        Calibration_Histry_TestName="Cal_His_CREATININE_S";


    qDebug()<<"Test Name : "<<TestName<<"Batch No : "<<bno<<"Concentration : "<<conc<<"ABS : "<<CalibrateAbs<<"Factor : "<<Fact<<"Date : "<<date<<"Product Code : "<<Prod_Code<<"Calibration_Histry_TestName : "<<Calibration_Histry_TestName;

    query1.prepare("select abs from "+Calibration_Histry_TestName+" where sno=1");
    query1.exec();
    while(query1.next())
        Cal_Abs1=query1.value(0).toString();
    query2.prepare("select abs from "+Calibration_Histry_TestName+" where sno=2");
    query2.exec();
    while(query2.next())
        Cal_Abs2=query2.value(0).toString();
    query3.prepare("select abs from "+Calibration_Histry_TestName+" where sno=3");
    query3.exec();
    while(query3.next())
        Cal_Abs3=query3.value(0).toString();
    query4.prepare("select abs from "+Calibration_Histry_TestName+" where sno=4");
    query4.exec();
    while(query4.next())
        Cal_Abs4=query4.value(0).toString();
    query5.prepare("select abs from "+Calibration_Histry_TestName+" where sno=5");
    query5.exec();
    while(query5.next())
        Cal_Abs5=query5.value(0).toString();
    query6.prepare("select abs from "+Calibration_Histry_TestName+" where sno=6");
    query6.exec();
    while(query6.next())
        Cal_Abs6=query6.value(0).toString();
    query7.prepare("select abs from "+Calibration_Histry_TestName+" where sno=7");
    query7.exec();
    while(query7.next())
        Cal_Abs7=query7.value(0).toString();
    query8.prepare("select abs from "+Calibration_Histry_TestName+" where sno=8");
    query8.exec();
    while(query8.next())
        Cal_Abs8=query8.value(0).toString();
    query9.prepare("select abs from "+Calibration_Histry_TestName+" where sno=9");
    query9.exec();
    while(query9.next())
        Cal_Abs9=query9.value(0).toString();
    query10.prepare("select abs from "+Calibration_Histry_TestName+" where sno=10");
    query10.exec();
    while(query10.next())
        Cal_Abs10=query10.value(0).toString();
    qDebug()<<"Cal val : "<<Cal_Abs1<<Cal_Abs2<<Cal_Abs3<<Cal_Abs4<<Cal_Abs5<<Cal_Abs6<<Cal_Abs7<<Cal_Abs8<<Cal_Abs9<<Cal_Abs10;
    qDebug()<<"TestName : "<<Calibration_Histry_TestName;
    QSqlQuery qu;
    if(Cal_Abs1=="")
        qu.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+TestName+"' ,bno = '"+bno+"' , conc='"+conc+"' , abs='"+CalibrateAbs+"' , fact='"+Fact+"',date='"+date+"' where sno=1");
    else if (Cal_Abs2=="")
        qu.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+TestName+"' ,bno = '"+bno+"' , conc='"+conc+"' , abs='"+CalibrateAbs+"' , fact='"+Fact+"',date='"+date+"' where sno=2");
    else if (Cal_Abs3=="")
        qu.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+TestName+"' ,bno = '"+bno+"' , conc='"+conc+"' , abs='"+CalibrateAbs+"' , fact='"+Fact+"',date='"+date+"' where sno=3");
    else if (Cal_Abs4=="")
        qu.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+TestName+"' ,bno = '"+bno+"' , conc='"+conc+"' , abs='"+CalibrateAbs+"' , fact='"+Fact+"',date='"+date+"' where sno=4");
    else if (Cal_Abs5=="")
        qu.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+TestName+"' ,bno = '"+bno+"' , conc='"+conc+"' , abs='"+CalibrateAbs+"' , fact='"+Fact+"',date='"+date+"' where sno=5");
    else if (Cal_Abs6=="")
        qu.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+TestName+"' ,bno = '"+bno+"' , conc='"+conc+"' , abs='"+CalibrateAbs+"' , fact='"+Fact+"',date='"+date+"' where sno=6");
    else if (Cal_Abs7=="")
        qu.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+TestName+"' ,bno = '"+bno+"' , conc='"+conc+"' , abs='"+CalibrateAbs+"' , fact='"+Fact+"',date='"+date+"' where sno=7");
    else if (Cal_Abs8=="")
        qu.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+TestName+"' ,bno = '"+bno+"' , conc='"+conc+"' , abs='"+CalibrateAbs+"' , fact='"+Fact+"',date='"+date+"' where sno=8");
    else if (Cal_Abs9=="")
        qu.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+TestName+"' ,bno = '"+bno+"' , conc='"+conc+"' , abs='"+CalibrateAbs+"' , fact='"+Fact+"',date='"+date+"' where sno=9");
    else if (Cal_Abs10=="")
        qu.prepare("update "+Calibration_Histry_TestName+" set Tname = '"+TestName+"' ,bno = '"+bno+"' , conc='"+conc+"' , abs='"+CalibrateAbs+"' , fact='"+Fact+"',date='"+date+"' where sno=10");
    qu.exec();

    if(!Cal_Abs10.isEmpty())
    {
        if(Cal_His_Val==1)
            qDebug()<<"loop exit ";
        else
            Calibration_Histry_Update();
    }

    query.prepare("update test set calibrateabs='"+CalibrateAbs+"' , fact='"+Fact+"' where name='"+TestName+"'");
    if(query.exec())
    {
        qDebug()<<"Update Done";
        ui->RunSample_Btn->setEnabled(true);
        ui->RunSample_Btn_2->setEnabled(true);
    }
    else
    {
        qDebug()<<"Error";
    }
}


int MainWindow::on_pushButton_331_clicked()
{
    // Create directory if it doesn't exist
    ui->pushButton_333->setEnabled(true);
    QString directoryPath = "/home/pi/PDF_files";
    QDir directory(directoryPath);
    if (!directory.exists())
    {
        if (!directory.mkpath(".")) {
            qWarning("Failed to create directory.");
            return -1;
        }
    }

    QDateTime currentDateTime = QDateTime::currentDateTime();
    QString date_text = currentDateTime.toString("ddMMyyhhmmss");
    QPixmap pixmap = ui->customPlot_3->grab();
    pixmap.save("/home/pi/PDF_files/"+TestName+""+date_text+".png");
    QString imagePath = "/home/pi/PDF_files/"+TestName+""+date_text+".png";
    QImage image(imagePath);
    if (image.isNull()) {
        qWarning("Failed to load the image.");
        return -1;
    }

    // Get the filename without the path
    QString imageName = imagePath.section('/', -1);
    // Create the PDF path within the PDF_files directory
    QString pdfPath = directoryPath + "/" + imageName.left(imageName.lastIndexOf(".")) + ".pdf";

    // Create a QPdfWriter object with the PDF path
    QPdfWriter pdfWriter(pdfPath);

    pdfWriter.setPageSize(QPageSize(QPageSize::A4));
    pdfWriter.setPageMargins(QMarginsF(0, 0, 0, 0)); // Optional: Set page margins

    // Get the page rect from the QPageLayout
    QPageLayout pageLayout = pdfWriter.pageLayout();
    QRectF pageRect = pageLayout.paintRectPixels(pdfWriter.resolution());

    // Create a QPainter to draw on the PDF
    QPainter painter(&pdfWriter);

    // Add text above the image
    QString text = ui->label_48->text();
    QFont font = painter.font();
    font.setPointSize(16); // Set the font size
    painter.setFont(font);
    // Define the position and size for the text rectangle
    QRectF textRect(0, 0, pageRect.width(), 5000); // Adjust the height (50) and other parameters as needed

    // You can adjust the y-coordinate to change the vertical position of the text
    // For example, to move the text down by 20 pixels, you can set the y-coordinate to 20
    textRect.moveTop(20);

    // Draw the text on the PDF using the painter
    painter.drawText(textRect, Qt::AlignCenter, text);

    // Padding between text and image
    int padding = 1; // Adjust the padding as needed

    // Calculate the position and size for the image below the text
    QSize imageSize = image.size();
    imageSize.scale(pageRect.width(), pageRect.height() - textRect.height() - padding, Qt::KeepAspectRatio);

    QPointF center((pageRect.width() - imageSize.width()) / 2, textRect.height() + padding + (pageRect.height() - textRect.height() - padding - imageSize.height()) / 2);
    QRectF targetRect(center, imageSize);

    // Draw the image on the PDF
    painter.drawImage(targetRect, image);

    // Finish the painting
    painter.end();
    QMessageBox msg(this);
    msg.setWindowFlags(Qt::Popup);
    msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
    QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
    auto newPixmap = p.scaled(80, 80);
    msg.setIconPixmap(newPixmap);
    QFont fontt;
    fontt.setBold(true);
    msg.setFont(fontt);
    msg.setText("Data Exported.");
    QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
    saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
    msg.setDefaultButton(saveButton);
    msg.exec();
    if (msg.clickedButton() == saveButton)
    {
        ui->stackedWidget->setCurrentIndex(24) ;
        ui->stackedWidget_3->setCurrentIndex(2);
        ui->pushButton_331->setEnabled(false);
    }
    else
    {
        ui->stackedWidget->setCurrentIndex(24) ;
        ui->stackedWidget_3->setCurrentIndex(2);
        ui->pushButton_331->setEnabled(false);
    }
    return 0; // Return 0 for success

}

void MainWindow::on_toolButton_30_clicked()
{
    ui->stackedWidget->setCurrentIndex(10);
    ui->label_73->setVisible(true);
    ui->pushButton_148->setVisible(true);
    ui->stackedWidget_9->setVisible(true);
    ui->stackedWidget_9->setCurrentIndex(0);

    ui->pushButton_10->setVisible(false);

    ui->pushButton_258->setVisible(false);

    ui->toolButton->setVisible(false);

    ui->pushButton_5->setVisible(false);

    ui->pushButton_134->setVisible(false);

    ui->pushButton_4->setVisible(false);

    ui->pushButton_7->setVisible(false);

    ui->pushButton_231->setVisible(false);

    ui->pushButton_228->setVisible(true);

    ui->pushButton_11->setVisible(false);

    ui->pushButton_131->setVisible(false);

    ui->label_210->setVisible(false);

    ui->label_219->setVisible(false);

    ui->toolButton_14->setVisible(true);

    ui->Settings_Back_Btn->setVisible(false);

    ui->Settings_Back_Btn_2->setVisible(false);

    ui->pushButton_227->setVisible(false);
    if(ui->label_211->text()=="Version : ")
    {

    }
    else if(ui->label_211->text()=="Status : ")
    {
        ui->label_211->setText("Version : ");
        QFile file("/home/pi/git/BCYWithTRY/README.md");
        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
            QTextStream in(&file);
            while (!in.atEnd()) {
                QString data = in.readLine();
                bool ok = false;
                double Version = data.toDouble(&ok);
                ui->label_340->setText("<font color='gray'>"+QString::number(Version)+"</font>");
                qDebug()<<Version;
            }

        }
    }
}

void MainWindow::on_pushButton_228_clicked()
{
    deleteindex="";
    ui->tableView_4->verticalScrollBar()->setStyleSheet("QScrollBar:vertical {"
                                                        "    border: 1px solid #999999;"
                                                        "    background:white;"
                                                        "    width:25px;    "
                                                        "    margin: 0px 0px 0px 0px;"
                                                        "}"
                                                        "QScrollBar::handle:vertical {"
                                                        "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                        "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145), stop:1 rgb(12, 68, 145));"
                                                        "    min-height: 0px;"
                                                        "}"
                                                        "QScrollBar::add-line:vertical {"
                                                        "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                        "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                        "    height: 0px;"
                                                        "    subcontrol-position: bottom;"
                                                        "    subcontrol-origin: margin;"
                                                        "}"
                                                        "QScrollBar::sub-line:vertical {"
                                                        "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                        "    stop: 0  rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                        "    height: 0 px;"
                                                        "    subcontrol-position: top;"
                                                        "    subcontrol-origin: margin;"
                                                        "}"
                                                        );
    ui->tableView_4->horizontalScrollBar()->setStyleSheet(
                "QScrollBar:horizontal { ""    border: 1px solid #999999;"
                "    background:white;"
                "    height:25px;    "
                "    margin: 0px 0px 0px 0px;"
                "}"
                "QScrollBar::handle:horizontal {"
                "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145), stop:1 rgb(12, 68, 145));"
                "    min-height: 0px;"
                "}"
                "QScrollBar::add-line:horizontal {"
                "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                "    height: 0px;"
                "    subcontrol-position: bottom;"
                "    subcontrol-origin: margin;"
                "}"
                "QScrollBar::sub-line:horizontal {"
                "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                "    stop: 0  rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                "    height: 0 px;"
                "    subcontrol-position: top;"
                "    subcontrol-origin: margin;"
                "}");

    ui->tableView_4->setModel(nullptr);

    QSqlQueryModel * modall = new QSqlQueryModel();
    QSqlQuery* query=new QSqlQuery(mydb);
    query->prepare("select PID,PName,PAge,PGender,TName,ANrmlRang,BNrmlRang,ODVal,ResultOD,Unit,Date,Time from Reports");
    query->exec();
    modall->setQuery(*query);
    modall->setHeaderData( 0, Qt::Horizontal, QObject::tr("Patient ID") );
    modall->setHeaderData( 1, Qt::Horizontal, QObject::tr("Name") );
    modall->setHeaderData( 2, Qt::Horizontal, QObject::tr("Age") );
    modall->setHeaderData( 3, Qt::Horizontal, QObject::tr("Gender") );
    modall->setHeaderData( 4, Qt::Horizontal, QObject::tr("Parameter name") );
    modall->setHeaderData( 5, Qt::Horizontal, QObject::tr("Normal range(Max)") );
    modall->setHeaderData( 6, Qt::Horizontal, QObject::tr("Normal range(Min)") );
    modall->setHeaderData( 7, Qt::Horizontal, QObject::tr("OD Value") );
    modall->setHeaderData( 8, Qt::Horizontal, QObject::tr("Result OD") );
    modall->setHeaderData( 9, Qt::Horizontal, QObject::tr("Unit") );
    modall->setHeaderData( 10, Qt::Horizontal, QObject::tr("Date") );
    modall->setHeaderData( 11, Qt::Horizontal, QObject::tr("Time") );
    ui->tableView_4->setModel(modall);
    ui->stackedWidget_8->setCurrentIndex(1);
    ui->stackedWidget->setCurrentIndex(29);
}

void MainWindow::on_tableView_4_clicked(const QModelIndex &index)
{
    Q_UNUSED(index);
    QSqlQuery * qry=new QSqlQuery(mydb);
    QSqlQueryModel * model = new QSqlQueryModel();
    model->setQuery(*qry);
    QString  PName , PAge , PGender , TName , ANrml , BNrml , ODVal , ResultOD ,Unit, Date , Time;
    QModelIndexList indexList = ui->tableView_4->selectionModel()->selectedIndexes();
    int row=0;
    foreach (QModelIndex index, indexList)
    {
        row = index.row();
    }
    QString clickval0 = ui->tableView_4->model()->index(row , 0).data().toString();
    QString clickval1 = ui->tableView_4->model()->index(row , 1).data().toString();
    QString clickval2 = ui->tableView_4->model()->index(row , 2).data().toString();
    QString clickval3 = ui->tableView_4->model()->index(row , 3).data().toString();
    QString clickval4 = ui->tableView_4->model()->index(row , 4).data().toString();
    QString clickval5 = ui->tableView_4->model()->index(row , 5).data().toString();
    QString clickval6 = ui->tableView_4->model()->index(row , 6).data().toString();
    QString clickval7 = ui->tableView_4->model()->index(row , 7).data().toString();
    QString clickval8 = ui->tableView_4->model()->index(row , 8).data().toString();
    QString clickval9 = ui->tableView_4->model()->index(row , 9).data().toString();
    QString clickval10 = ui->tableView_4->model()->index(row , 10).data().toString();
    QString clickval11 = ui->tableView_4->model()->index(row , 11).data().toString();
    QString clickval12 = ui->tableView_4->model()->index(row , 12).data().toString();
    qry->prepare("select * from Reports where PID ='"+clickval0+"' or PName ='"+clickval1+"' or PAge ='"+clickval2+"' or PGender ='"+clickval3+"' or TName ='"+clickval4+"' or ANrmlRang ='"+clickval5+"' or BNrmlRang ='"+clickval6+"' or ODVal ='"+clickval7+"' or ResultOD ='"+clickval8+"' or Unit ='"+clickval9+"' or Date ='"+clickval10+"' or Time ='"+clickval11+"'");
    qry->exec();
    deleteindex=clickval0;
}
void MainWindow::on_Data_select_delete_DB_clicked()
{
    if(deleteindex.isEmpty())
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setText("You have not selected any data, Please select the data and delete.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
            ui->stackedWidget->setCurrentIndex(29);
        else
            ui->stackedWidget->setCurrentIndex(29);
    }
    else
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("Do you want to delete the data ?");
        QPushButton* saveButton = msg.addButton("Yes", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        QPushButton* dontSaveButton = msg.addButton("No", QMessageBox::DestructiveRole);
        dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #ff5957, stop: 0.5 #ff5957, stop: 1 #ff5957);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(184, 0, 0), stop: 0.5 rgb(184, 0, 0), stop: 1 rgb(184, 0, 0)); color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            QSqlQuery query;
            query.prepare("DELETE FROM Reports WHERE PID=:pid");
            query.bindValue(":pid", deleteindex);
            if(query.exec())
            {
                QStandardItemModel *model = qobject_cast<QStandardItemModel*>(ui->tableView_4->model());
                if(model)
                {
                    model->clear(); // Clear all data from the model
                }
                QSqlQueryModel * modall = new QSqlQueryModel();
                QSqlQuery* query=new QSqlQuery(mydb);
                query->prepare("select PID,PName,PAge,PGender,TName,ANrmlRang,BNrmlRang,ODVal,ResultOD,Unit,Date,Time from Reports");
                query->exec();
                modall->setQuery(*query);
                modall->setHeaderData( 0, Qt::Horizontal, QObject::tr("Patient ID") );
                modall->setHeaderData( 1, Qt::Horizontal, QObject::tr("Name") );
                modall->setHeaderData( 2, Qt::Horizontal, QObject::tr("Age") );
                modall->setHeaderData( 3, Qt::Horizontal, QObject::tr("Gender") );
                modall->setHeaderData( 4, Qt::Horizontal, QObject::tr("Parameter name") );
                modall->setHeaderData( 5, Qt::Horizontal, QObject::tr("Normal range(Max)") );
                modall->setHeaderData( 6, Qt::Horizontal, QObject::tr("Normal range(Min)") );
                modall->setHeaderData( 7, Qt::Horizontal, QObject::tr("OD Value") );
                modall->setHeaderData( 8, Qt::Horizontal, QObject::tr("Result OD") );
                modall->setHeaderData( 9, Qt::Horizontal, QObject::tr("Unit") );
                modall->setHeaderData( 10, Qt::Horizontal, QObject::tr("Date") );
                modall->setHeaderData( 11, Qt::Horizontal, QObject::tr("Time") );
                ui->tableView_4->setModel(modall);
                QMessageBox msg(this);
                msg.setWindowFlags(Qt::Popup);
                msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
                QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
                auto newPixmap = p.scaled(80, 80);
                msg.setIconPixmap(newPixmap);

                QFont font;
                font.setBold(true);
                msg.setFont(font);
                msg.setText("Data deleted.");
                QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                msg.setDefaultButton(saveButton);
                msg.exec();
                if (msg.clickedButton() == saveButton)
                    ui->stackedWidget->setCurrentIndex(29);
                else
                    ui->stackedWidget->setCurrentIndex(29);
            }
            else
            {
                qDebug() << "Failed to cast model to QSqlQueryModel";
                // Handle error
            }

        }
        else if(msg.clickedButton() == dontSaveButton)
            ui->stackedWidget->setCurrentIndex(29);
        else
            ui->stackedWidget->setCurrentIndex(29);
    }
}

void MainWindow::on_Data_select_delete_DB_2_clicked()
{
    ui->label_359->setVisible(true);
    ui->label_360->clear();
    ui->stackedWidget->setCurrentIndex(29);
    ui->stackedWidget_8->setCurrentIndex(2);
}

void MainWindow::on_pushButton_251_clicked()
{
    ui->pushButton_148->setVisible(false);
    ui->stackedWidget_9->setVisible(false);
    ui->label_219->setText("USER");
    ui->label_219->setVisible(true);
    ui->pushButton_10->setVisible(true);
    ui->pushButton_258->setVisible(true);
    ui->pushButton_134->setVisible(true);
    ui->pushButton_4->setVisible(true);
    ui->pushButton_5->setVisible(true);
    ui->toolButton->setVisible(true);
    ui->pushButton_7->setVisible(false);
    ui->pushButton_231->setVisible(false);
    ui->pushButton_228->setVisible(false);
    ui->pushButton_11->setVisible(false);
    ui->pushButton_131->setVisible(false);
    ui->label_210->setVisible(false);
    ui->Settings_Back_Btn->setVisible(true);
    ui->toolButton_14->setVisible(false);
    ui->label_73->setVisible(false);
    if(ui->label_211->text()=="Version : ")
    {

    }
    else if(ui->label_211->text()=="Status : ")
    {
        ui->label_211->setText("Version : ");
        QFile file("/home/pi/git/BCYWithTRY/README.md");
        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
            QTextStream in(&file);
            while (!in.atEnd()) {
                QString data = in.readLine();
                bool ok = false;
                double Version = data.toDouble(&ok);
                ui->label_340->setText("<font color='gray'>"+QString::number(Version)+"</font>");
                qDebug()<<Version;
            }

        }
    }
}

void MainWindow::on_pushButton_239_clicked()
{
    QString User= ui->label_349->text();
    QString Pass= ui->lineEdit_150->text();
    if(settings_mode==1)
    {
        //service
        if(User=="Service" && Pass=="Pass2025")
        {

            ui->stackedWidget_9->setVisible(false);
            ui->stackedWidget->setCurrentIndex(10);

            ui->label_219->setText("Service Team");
            ui->pushButton_10->setVisible(false);
            ui->pushButton_134->setVisible(false);
            ui->pushButton_4->setVisible(false);
            ui->pushButton_5->setVisible(false);
            ui->toolButton->setVisible(false);
            ui->pushButton_7->setVisible(true);
            ui->pushButton_231->setVisible(true);
            ui->pushButton_228->setVisible(true);
            ui->pushButton_11->setVisible(true);
            ui->pushButton_131->setVisible(false);

            ui->label_210->setVisible(false);
            ui->label_219->setVisible(true);
            ui->toolButton_14->setVisible(false);
            ui->Settings_Back_Btn_2->setVisible(true);
            ui->pushButton_227->setVisible(true);

        }
        else
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            msg.setDetailedText("ACCESS DENIED");

            msg.setText("Password is incorrect.");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {
                ui->stackedWidget->setCurrentIndex(10);
                ui->stackedWidget_9->setCurrentIndex(1);
            }
        }
    }
    else if (settings_mode==2)
    {
        //Admin
        if(User=="Maintainer" && Pass=="PassV104")
        {
            ui->stackedWidget->setCurrentIndex(29);
            ui->stackedWidget_8->setCurrentIndex(0);
            ui->pushButton_228->setVisible(false);
        }
        else
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            msg.setDetailedText("ACCESS DENIED");

            msg.setText("Password is incorrect.");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/cancel.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {
                ui->stackedWidget->setCurrentIndex(10);
                ui->stackedWidget_9->setCurrentIndex(1);
            }
        }
    }
}

void MainWindow::on_pushButton_252_clicked()
{
    settings_mode=1;
    ui->stackedWidget_9->setCurrentIndex(1);
    ui->lineEdit_150->clear();
    ui->label_350->setText("Service Login");
    ui->label_349->setText("Service");


}

void MainWindow::on_pushButton_253_clicked()
{
    settings_mode=2;
    ui->stackedWidget_9->setCurrentIndex(1);
    ui->lineEdit_150->clear();
    ui->label_350->setText("Maintainer Login");
    ui->label_349->setText("Maintainer");
}

void MainWindow::on_Data_select_delete_DB_3_clicked()
{
    ui->label_360->setText("<font color='Red'>Loading, Please wait...</font>");
    qApp->processEvents();
    clearAllData();
    QString directoryPath = "/home/pi/PDF_files";
    clearDirectory(directoryPath);
    ui->label_359->setVisible(false);
    ui->label_360->clear();
    QMessageBox msg(this);
    msg.setWindowFlags(Qt::Popup);
    msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
    QFont font;
    font.setBold(true);
    msg.setFont(font);
    QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
    auto newPixmap = p.scaled(80, 80);
    msg.setIconPixmap(newPixmap);
    msg.setText("The data cleared successfully.");
    QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
    saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
    msg.setDefaultButton(saveButton);
    msg.exec();
    if (msg.clickedButton() == saveButton)
    {
        ui->stackedWidget->setCurrentIndex(29);
        ui->stackedWidget_8->setCurrentIndex(0);
    }
    else
    {
        ui->stackedWidget_8->setCurrentIndex(4);
        ui->stackedWidget->setCurrentIndex(2);
    }
}

void MainWindow::backupDatabase() {
    QString source = "/home/pi/Fresh_DB/Bar_Data.db";
    QString backup = "/home/pi/git/Bar_Data.db";

    if (QFile::exists(backup)) {
        QFile::remove(backup);  // Remove old backup
    }
    if (QFile::copy(source, backup)) {
        qDebug() << "Database backup created successfully!";
        connectToDatabase();
    } else {
        qDebug() << "Failed to create database backup!";
    }
}

void MainWindow::clearAllData()
{
    // Backup before deletion
    // backupDatabase();
    QSqlQuery qry;
    qry.prepare("select Distributor_code from Distributor where sno=1");
    qry.exec();
    while(qry.next())
    {
        Restore_DC = qry.value(0).toString();
    }
    qDebug()<<"Distributor_Code : "<<Restore_DC;

    backupDatabase();
    After_Clear_Data=1;
    QSqlQuery qy;
    qy.prepare("update Distributor_code="+Restore_DC+" from Distributor where sno=1");
    if(qy.exec())
        qDebug()<<"Updated Code : "<<Restore_DC;
    else
        qDebug()<<"Error :: ";

    qDebug()<<"Distributor_Code : "<<Restore_DC;
    createTable_withQCHis();
}
/*  QSqlQuery query;

    // Begin transaction for safe execution
    if (!query.exec("BEGIN TRANSACTION;")) {
        qDebug() << "Failed to begin transaction:" << query.lastError().text();
        return;
    }

    // Disable foreign key constraints to prevent errors
    query.exec("PRAGMA foreign_keys = OFF;");

    QStringList tables = {"Reports", "Cal_His_Glucose","Cal_His_Glucose_HK","Cal_His_ADA","Cal_His_Albumin","Cal_His_ALP","Cal_His_Amylase","Cal_His_Ammonia","Cal_His_ASO","Cal_His_ACE","Cal_His_Bicarbonate",
                          "Cal_His_BDirect","Cal_His_BTotal","Cal_His_Calcium","Cal_His_Chloride","Cal_His_CK_MB","Cal_His_CK_NAC","Cal_His_Crea_Enzy","Cal_His_Crea_Kine","Cal_His_Ethyl_Alco","Cal_His_GGT",
                          "Cal_His_AST","Cal_His_ALT","Cal_His_HDL_Choles","Cal_His_Hemoglobin","Cal_His_HCY","Cal_His_Iron","Cal_His_Lactate","Cal_His_LDH","Cal_His_LDL_Choles","Cal_His_Lipase",
                          "Cal_His_Magnesium","Cal_His_Microalbumin","Cal_His_Phospholipids","Cal_His_Phos_UV","Cal_His_Phos_C","Cal_His_Potassium","Cal_His_RF","Cal_His_Sodium","Cal_His_TC","Cal_His_TP",
                          "Cal_His_TPU_CSF","Cal_His_TIBC","Cal_His_Trigly","Cal_His_Urea","Cal_His_Uric_Acid","Cal_His_Zinc","Cal_His_Cholin","Cal_His_Copper","Cal_His_Lithium","Cal_His_TBA","Cal_His_UIBC","Cal_His_GD",
                          "Cal_His_ZINC_S","Cal_His_MAGNESIUM_C","Cal_His_AST_S","Cal_His_ALT_S","Cal_His_ALP_S","Cal_His_BTOTAL_S","Cal_His_CREATININE_S",

                          "Glucose_QC1", "Glucose_HTP_QC1", "ADA_QC1", "Albumin_QC1", "Amylase_QC1",
                          "ALP_QC1", "Ammonia_QC1", "ASO_QC1", "ACE_QC1", "Bicarbonate_QC1", "BDirect_QC1",
                          "BTotal_QC1", "Calcium_QC1", "Chloride_QC1", "CK_MB_QC1", "CK_NAC_QC1", "Crea_Enzy_QC1",
                          "Crea_Kine_QC1", "Ethyl_Alco_QC1", "GGT_QC1", "AST_QC1", "ALT_QC1", "HDL_QC1",
                          "Hemoglobin_QC1", "Hcy_QC1", "Iron_QC1", "Lactate_QC1", "LDH_QC1", "LDL_QC1",
                          "Lipase_QC1", "Magnesium_QC1", "Micro_QC1", "Phos_QC1", "Phos_UV_QC1", "Phos_C_QC1",
                          "Potassium_QC1", "RF_QC1", "Sodium_QC1", "TC_QC1", "TP_QC1", "TPU_QC1", "TIBC_QC1",
                          "Trigly_QC1", "Urea_QC1", "UA_QC1", "Zinc_QC1", "Cholin_QC1", "Copper_QC1",
                          "Lithium_QC1", "TBA_QC1", "UIBC_QC1", "GD_QC1", "ZINC_S_QC1", "MAGNESIUM_C_QC1",
                          "AST_S_QC1", "ALT_S_QC1", "ALP_S_QC1", "BTOTAL_S_QC1", "CREATININE_S_QC1",

                          "Glucose_QC2", "Glucose_HTP_QC2", "ADA_QC2", "Albumin_QC2", "Amylase_QC2", "ALP_QC2",
                          "Ammonia_QC2", "ASO_QC2", "ACE_QC2", "Bicarbonate_QC2", "BDirect_QC2", "BTotal_QC2",
                          "Calcium_QC2", "Chloride_QC2", "CK_MB_QC2", "CK_NAC_QC2", "Crea_Enzy_QC2",
                          "Crea_Kine_QC2", "Ethyl_Alco_QC2", "GGT_QC2", "AST_QC2", "ALT_QC2", "HDL_QC2",
                          "Hemoglobin_QC2", "Hcy_QC2", "Iron_QC2", "Lactate_QC2", "LDH_QC2", "LDL_QC2",
                          "Lipase_QC2", "Magnesium_QC2", "Micro_QC2", "Phos_QC2", "Phos_UV_QC2", "Phos_C_QC2",
                          "Potassium_QC2", "RF_QC2", "Sodium_QC2", "TC_QC2", "TP_QC2", "TPU_QC2", "TIBC_QC2",
                          "Trigly_QC2", "Urea_QC2", "UA_QC2", "Zinc_QC2", "Cholin_QC2", "Copper_QC2",
                          "Lithium_QC2", "TBA_QC2", "UIBC_QC2", "GD_QC2", "ZINC_S_QC2", "MAGNESIUM_C_QC2",
                          "AST_S_QC2", "ALT_S_QC2", "ALP_S_QC2", "BTOTAL_S_QC2", "CREATININE_S_QC2"};

    for (const QString &table : tables) {
        clearTable(table);
    }

    // Re-enable foreign keys
    query.exec("PRAGMA foreign_keys = ON;");

    // Commit transaction
    if (!query.exec("COMMIT;"))
    {
        qDebug() << "Failed to commit transaction:" << query.lastError().text();
        query.exec("ROLLBACK;"); // Rollback changes on failure

    } else
    {
        qDebug() << "All data cleared successfully!";
        Clear_Calibration_Histry();
    }
}

void MainWindow::clearTable(const QString &tableName) {
    QSqlQuery query;

    QString sql = QString("DELETE FROM %1;").arg(tableName);
    if (!query.exec(sql)) {
        qDebug() << "Failed to clear data from" << tableName << ":" << query.lastError().text();
    } else {
        qDebug() << "Data cleared from" << tableName;
    }

    // Reset auto-increment safely
    resetAutoIncrement(tableName);
}

void MainWindow::resetAutoIncrement(const QString &tableName) {
    QSqlQuery query;
    QString sql = QString("DELETE FROM sqlite_sequence WHERE name='%1';").arg(tableName);

    if (!query.exec(sql)) {
        qDebug() << "Failed to reset auto-increment for" << tableName << ":" << query.lastError().text();
    } else {
        qDebug() << "Auto-increment reset for" << tableName;
    }
}


void MainWindow::Clear_Calibration_Histry()
{
    qApp->processEvents();
    QStringList Table_Data = {"Cal_His_Glucose","Cal_His_Glucose_HK","Cal_His_ADA","Cal_His_Albumin","Cal_His_ALP","Cal_His_Amylase","Cal_His_Ammonia","Cal_His_ASO","Cal_His_ACE","Cal_His_Bicarbonate",
                              "Cal_His_BDirect","Cal_His_BTotal","Cal_His_Calcium","Cal_His_Chloride","Cal_His_CK_MB","Cal_His_CK_NAC","Cal_His_Crea_Enzy","Cal_His_Crea_Kine","Cal_His_Ethyl_Alco","Cal_His_GGT",
                              "Cal_His_AST","Cal_His_ALT","Cal_His_HDL_Choles","Cal_His_Hemoglobin","Cal_His_HCY","Cal_His_Iron","Cal_His_Lactate","Cal_His_LDH","Cal_His_LDL_Choles","Cal_His_Lipase",
                              "Cal_His_Magnesium","Cal_His_Microalbumin","Cal_His_Phospholipids","Cal_His_Phos_UV","Cal_His_Phos_C","Cal_His_Potassium","Cal_His_RF","Cal_His_Sodium","Cal_His_TC","Cal_His_TP",
                              "Cal_His_TPU_CSF","Cal_His_TIBC","Cal_His_Trigly","Cal_His_Urea","Cal_His_Uric_Acid","Cal_His_Zinc","Cal_His_Cholin","Cal_His_Copper","Cal_His_Lithium","Cal_His_TBA","Cal_His_UIBC","Cal_His_GD",
                              "Cal_His_ZINC_S","Cal_His_MAGNESIUM_C","Cal_His_AST_S","Cal_His_ALT_S","Cal_His_ALP_S","Cal_His_BTOTAL_S","Cal_His_CREATININE_S"};
    for (const QString &table : Table_Data) {
        QSqlQuery query;
        query.prepare(QString("INSERT INTO %1 (sno) VALUES (?)").arg(table));

        QVariantList snoValues;
        for (int j = 1; j <= 10; j++) {
            snoValues.append(j);
        }

        query.addBindValue(snoValues);
        if (query.execBatch()) {
            qDebug() << "Inserted 10 records into" << table;
        } else {
            qDebug() << "Error inserting into" << table << ":" << query.lastError().text();
        }
    }
}
*/

void MainWindow::clearDirectory(const QString &path) {
    QDir dir(path);
    if (!dir.exists()) return;

    for (const QFileInfo &fileInfo : dir.entryInfoList(QDir::Files | QDir::NoDotAndDotDot)) {
        QFile::remove(fileInfo.absoluteFilePath());
    }
    for (const QFileInfo &subDir : dir.entryInfoList(QDir::Dirs | QDir::NoDotAndDotDot)) {
        QDir(subDir.absoluteFilePath()).removeRecursively();
    }
}

void MainWindow::on_pushButton_14_clicked()
{
    ui->lineEdit_150->setEchoMode(QLineEdit::Normal);
    ui->pushButton_14->setVisible(false);
    ui->pushButton_13->setVisible(true);
}

void MainWindow::on_pushButton_13_clicked()
{
    ui->lineEdit_150->setEchoMode(QLineEdit::Password);
    ui->pushButton_14->setVisible(true);
    ui->pushButton_13->setVisible(false);
}

void MainWindow::on_toolButton_32_clicked()
{
    ui->stackedWidget->setCurrentIndex(29);
    ui->stackedWidget_8->setCurrentIndex(4);
    ui->lineEdit_52->clear();
}

int MainWindow::on_pushButton_332_clicked()
{
    QString name = ui->lineEdit_52->text();
    if(name == "")
    {
        QMessageBox msg;
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif ;");
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/info.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setText("The file name is not entered.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
            qDebug()<<"Data";
        else
            qDebug()<<"Data";
    }
    else
    {
        QString filters("All files (*.*)");//;All files (*.*)");
        QString defaultFilter("All files (*.*)");
        QString folderPath = "/home/pi/Export_files/"; // Replace with the path to your folder
        QDir directory(folderPath);

        QDateTime currentDateTime = QDateTime::currentDateTime();
        QString date_text = currentDateTime.toString("ddMMyyhhmmss");
        QString name = ui->lineEdit_52->text() + date_text;
        QString fileName = "/home/pi/Export_files/" + name + ".csv"; // Constructing the file name directly
        QFile file(fileName);
        QAbstractItemModel *model = ui->tableView_5->model();
        if (file.open(QFile::WriteOnly | QFile::Truncate)) {
            QTextStream data(&file);
            QStringList strList;
            for (int i = 0; i < model->columnCount(); i++) {
                if (model->headerData(i, Qt::Horizontal, Qt::DisplayRole).toString().length() > 0)
                    strList.append("\"" + model->headerData(i, Qt::Horizontal, Qt::DisplayRole).toString() + "\"");
                else
                    strList.append("");
            }
            data << strList.join(",") << "\n";
            for (int i = 0; i < model->rowCount(); i++) {
                strList.clear();
                for (int j = 0; j < model->columnCount(); j++) {
                    if (model->data(model->index(i, j)).toString().length() > 0)
                        strList.append("\"" + model->data(model->index(i, j)).toString() + "\"");
                    else
                        strList.append("");
                }
                data << strList.join(",") + "\n";
            }
        }
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setText("Data Exported.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->stackedWidget->setCurrentIndex(29);
            ui->stackedWidget_8->setCurrentIndex(4);
        }
        else
        {
            ui->stackedWidget_8->setCurrentIndex(4);
            ui->stackedWidget->setCurrentIndex(29);
        }
        file.close();
        ui->stackedWidget->setCurrentIndex(29);
        ui->stackedWidget_8->setCurrentIndex(4);

    }
    return 0;
}


void MainWindow::on_toolButton_33_clicked()
{
    ui->stackedWidget->setCurrentIndex(29);
    ui->stackedWidget_8->setCurrentIndex(5);
    calibration_check=1;
}

void MainWindow::on_toolButton_34_clicked()
{
    ui->stackedWidget->setCurrentIndex(29);
    ui->stackedWidget_8->setCurrentIndex(5);
    calibration_check=2;
}

void MainWindow::on_toolButton_35_clicked()
{
    exptopn=1;

    clearGridLayout(ui->gridLayout_2);
    ui->pushButton_6->setVisible(false);
    ui->pushButton_139->setVisible(false);
    ui->pushButton_142->setVisible(true);
    ui->pushButton_142->setStyleSheet("QPushButton {border: 2px solid green;border-top-left-radius:40px;border-top-right-radius:40px;background-color: white;padding: 10px;}");

    ui->scrollArea_7->verticalScrollBar()->setStyleSheet("QScrollBar:vertical {"
                                                         "    border: 1px solid #999999;"
                                                         "    background:white;"
                                                         "    width:25px;    "
                                                         "    margin: 0px 0px 0px 0px;"
                                                         "}"
                                                         "QScrollBar::handle:vertical {"
                                                         "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                         "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145), stop:1 rgb(12, 68, 145));"
                                                         "    min-height: 0px;"
                                                         "}"
                                                         "QScrollBar::add-line:vertical {"
                                                         "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                         "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                         "    height: 0px;"
                                                         "    subcontrol-position: bottom;"
                                                         "    subcontrol-origin: margin;"
                                                         "}"
                                                         "QScrollBar::sub-line:vertical {"
                                                         "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                         "    stop: 0  rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                         "    height: 0 px;"
                                                         "    subcontrol-position: top;"
                                                         "    subcontrol-origin: margin;"
                                                         "}"
                                                         );
    ui->scrollArea_7->horizontalScrollBar()->setStyleSheet( "QScrollBar:horizontal { "
                                                            "    border: 1px solid #999999;"
                                                            "    background:white;"
                                                            "    height:25px;    "
                                                            "    margin: 0px 0px 0px 0px;"
                                                            "}"
                                                            "QScrollBar::handle:horizontal {"
                                                            "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                            "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145), stop:1 rgb(12, 68, 145));"
                                                            "    min-height: 0px;"
                                                            "}"
                                                            "QScrollBar::add-line:horizontal {"
                                                            "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                            "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                            "    height: 0px;"
                                                            "    subcontrol-position: bottom;"
                                                            "    subcontrol-origin: margin;"
                                                            "}"
                                                            "QScrollBar::sub-line:horizontal {"
                                                            "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                            "    stop: 0  rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                            "    height: 0 px;"
                                                            "    subcontrol-position: top;"
                                                            "    subcontrol-origin: margin;"
                                                            "}");



    QSqlQuery query;
    query.prepare("SELECT name FROM test ORDER BY name ASC;");
    query.exec();
    int count=0;
    while(query.next())
    {
        QString s=query.value(0).toString();
        arraylst[count]=s;
        count++;
        qDebug()<<s;
    }
    int count1=0;
    const QSize btnSize = QSize(150, 50);
    for (int i=0;i<15 ;i++ )
    {
        for (int j=0;j<5 ;j++ )
        {
            if(count1==count)
                break;
            else
            {
                QPushButton *button = new QPushButton(arraylst[count1]);
                button->setStyleSheet(
                            "QPushButton {"
                            "  background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                            "  color: white;"
                            "}"
                            "QPushButton:hover {"
                            "  background-color: qlineargradient(spread:pad, x1:0, y1:0.0913636, x2:0.944, y2:0.392, stop:0.0969388 rgba(22, 123, 200, 255), stop:1 rgba(20, 113, 180, 255));""}"
                            "QPushButton:pressed {"
                            " background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                            "margin-top: 2px;"
                            "margin-bottom: -4px;"
                            "color: white;"
                            "}"
                            );
                QFont font = button->font();
                font.setBold(true);
                button->setFont(font);
                button->setFixedSize(btnSize);
                button->setObjectName(arraylst[count1]);
                connect(button, &QPushButton::clicked, this, &MainWindow::Export_files);
                ui->gridLayout_2->addWidget(button,i,j);
            }
            count1++;
        }
    }
    ui->stackedWidget->setCurrentIndex(1);
}

void MainWindow::Export_files()
{
    QObject *senderObj = sender(); // This will give Sender object
    QString senderObjName = senderObj->objectName();
    TestName=senderObjName;
    qDebug()<<"TestName"<<TestName;
    ui->label_354->setText(TestName);
    ui->stackedWidget_8->setCurrentIndex(6);
    ui->stackedWidget->setCurrentIndex(29);
}

void MainWindow::on_toolButton_36_clicked()
{
    qApp->processEvents();
    if(calibration_check==1)
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("Do you want to export all calibration data ?");
        QPushButton* saveButton = msg.addButton("Yes", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        QPushButton* dontSaveButton = msg.addButton("No", QMessageBox::DestructiveRole);
        dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #ff5957, stop: 0.5 #ff5957, stop: 1 #ff5957);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(184, 0, 0), stop: 0.5 rgb(184, 0, 0), stop: 1 rgb(184, 0, 0)); color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            QStringList Table_Data = {"Cal_His_Glucose","Cal_His_Albumin","Cal_His_ALP","Cal_His_Amylase","Cal_His_BDirect",
                                      "Cal_His_BTotal","Cal_His_Calcium","Cal_His_Crea_Kine","Cal_His_GGT", "Cal_His_AST",
                                      "Cal_His_ALT","Cal_His_HDL_Choles","Cal_His_LDH","Cal_His_LDL_Choles","Cal_His_Phos_UV",
                                      "Cal_His_TC","Cal_His_TP","Cal_His_Trigly","Cal_His_Urea","Cal_His_Uric_Acid"};

            QString parameter_table_list;
            QSqlQuery qy;
            for (int i=0;i<Table_Data.size();i++)
            {
                parameter_table_list=Table_Data[i];
                qy.prepare("SELECT * FROM '"+parameter_table_list+"'");
                if (!qy.exec()) {
                    qDebug() << "Error executing query:" << qy.lastError().text();
                    //return -1;
                }
                QDateTime currentDateTime = QDateTime::currentDateTime();
                QString date_text = currentDateTime.toString("ddMMyyhhmmss");

                // Create a CSV file to write the data
                QFile file("/home/pi/Export_files/"+parameter_table_list+""+date_text+".csv");
                if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
                    qDebug() << "Error: unable to open file" << file.errorString();
                    // return -1;
                }

                // Write data to the CSV file
                QTextStream out(&file);
                // Write header row
                QSqlRecord rec = qy.record();
                for (int i = 0; i < rec.count(); ++i) {
                    out << rec.fieldName(i);
                    if (i < rec.count() - 1)
                        out << ",";
                }
                out << "\n";

                // Write data rows
                while (qy.next()) {
                    for (int i = 0; i < rec.count(); ++i) {
                        out << qy.value(i).toString();
                        if (i < rec.count() - 1)
                            out << ",";
                    }
                    out << "\n";
                }

                // Close the file and database connection
                file.close();
            }
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QFont font;
            font.setBold(true);
            msg.setFont(font);
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("Data Exported.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {
                ui->stackedWidget->setCurrentIndex(29);
                ui->stackedWidget_8->setCurrentIndex(5);
            }
            else
            {
                ui->stackedWidget->setCurrentIndex(29);
                ui->stackedWidget_8->setCurrentIndex(5);
            }
        }
        else if(msg.clickedButton() == dontSaveButton)
        {
            ui->stackedWidget->setCurrentIndex(29);
            ui->stackedWidget_8->setCurrentIndex(5);
        }
        else
        {
            ui->stackedWidget->setCurrentIndex(29);
            ui->stackedWidget_8->setCurrentIndex(5);
            qDebug()<<"Out";
        }
    }
    else if(calibration_check==2)
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("Do you want to export all qc data ?");
        QPushButton* saveButton = msg.addButton("Yes", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        QPushButton* dontSaveButton = msg.addButton("No", QMessageBox::DestructiveRole);
        dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #ff5957, stop: 0.5 #ff5957, stop: 1 #ff5957);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(184, 0, 0), stop: 0.5 rgb(184, 0, 0), stop: 1 rgb(184, 0, 0)); color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            QStringList Table_Data = {"Glucose_QC1","Albumin_QC1","Amylase_QC1","ALP_QC1","AST_QC1",
                                      "BDirect_QC1","BTotal_QC1","Calcium_QC1","Crea_Kine_QC1","GGT_QC1",
                                      "ALT_QC1","HDL_QC1","LDH_QC1","LDL_QC1","Phos_UV_QC1",
                                      "TC_QC1","TP_QC1","Trigly_QC1","Urea_QC1","UA_QC1","Glucose_QC2","Albumin_QC2","Amylase_QC2","ALP_QC2","BDirect_QC2",
                                      "BTotal_QC2","Calcium_QC2","Crea_Kine_QC2","GGT_QC2","AST_QC2",
                                      "ALT_QC2","HDL_QC2","LDH_QC2","LDL_QC2","Phos_UV_QC2",
                                      "TC_QC2","TP_QC2","Trigly_QC2","Urea_QC2","UA_QC2"};

            QString parameter_table_list;
            QSqlQuery qy;
            for (int i=0;i<Table_Data.size();i++)
            {
                parameter_table_list=Table_Data[i];
                QSqlQuery qury;
                qury.prepare("SELECT * FROM '"+parameter_table_list+"'");
                if (!qury.exec()) {
                    qDebug() << "Error executing query:" << qury.lastError().text();
                    //return -1;
                }
                QDateTime currentDateTime = QDateTime::currentDateTime();
                QString date_text = currentDateTime.toString("ddMMyyhhmmss");

                // Create a CSV file to write the data
                QFile file("/home/pi/Export_files/"+parameter_table_list+""+date_text+".csv");
                if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
                    qDebug() << "Error: unable to open file" << file.errorString();
                    //return -1;
                }

                // Write data to the CSV file
                QTextStream out(&file);
                // Write header row
                QSqlRecord rec = qury.record();
                for (int i = 0; i < rec.count(); ++i) {
                    out << rec.fieldName(i);
                    if (i < rec.count() - 1)
                        out << ",";
                }
                out << "\n";

                // Write data rows
                while (qury.next()) {
                    for (int i = 0; i < rec.count(); ++i) {
                        out << qury.value(i).toString();
                        if (i < rec.count() - 1)
                            out << ",";
                    }
                    out << "\n";
                }
                file.close();

            }
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QFont font;
            font.setBold(true);
            msg.setFont(font);
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("Data Exported.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {
                ui->stackedWidget->setCurrentIndex(29);
                ui->stackedWidget_8->setCurrentIndex(5);
            }
            else
            {
                ui->stackedWidget->setCurrentIndex(29);
                ui->stackedWidget_8->setCurrentIndex(5);
            }
        }
        else if(msg.clickedButton() == dontSaveButton)
        {
            ui->stackedWidget->setCurrentIndex(29);
            ui->stackedWidget_8->setCurrentIndex(5);
        }
        else
        {
            ui->stackedWidget->setCurrentIndex(29);
            ui->stackedWidget_8->setCurrentIndex(5);
        }
    }
    //return 0;
}

int MainWindow::on_toolButton_37_clicked()
{
    qApp->processEvents();
    if(calibration_check==1)
    {
        //cal_his
        QString test_code;
        // Execute a query to select data from the table
        QSqlQuery query;
        query.prepare("select Pro_Code from test where name='"+TestName+"'");
        query.exec();
        while(query.next())
            Prod_Code = query.value(0).toString();

        qDebug()<<"Tool : "<<Prod_Code;
        if(Prod_Code=="MB1011")
            Calibration_Histry_TestName="Cal_His_Glucose";
        else if(Prod_Code=="MB1021")
            Calibration_Histry_TestName="Cal_His_Glucose_HK";
        else if(Prod_Code=="MB1031")
            Calibration_Histry_TestName="Cal_His_ADA";
        else if(Prod_Code=="MB1041")
            Calibration_Histry_TestName="Cal_His_Albumin";
        else if(Prod_Code=="MB1051")
            Calibration_Histry_TestName="Cal_His_ALP";
        else if(Prod_Code=="MB1061")
            Calibration_Histry_TestName="Cal_His_Amylase";
        else if(Prod_Code=="MB1071")
            Calibration_Histry_TestName="Cal_His_Ammonia";
        else if(Prod_Code=="MB1081")
            Calibration_Histry_TestName="Cal_His_ASO";
        else if(Prod_Code=="MB1091")
            Calibration_Histry_TestName="Cal_His_ACE";
        else if(Prod_Code=="MB1101")
            Calibration_Histry_TestName="Cal_His_Bicarbonate";
        else if(Prod_Code=="MB1111")
            Calibration_Histry_TestName="Cal_His_BDirect";
        else if(Prod_Code=="MB1121")
            Calibration_Histry_TestName="Cal_His_BTotal";
        else if(Prod_Code=="MB1131")
            Calibration_Histry_TestName="Cal_His_Calcium";
        else if(Prod_Code=="MB1141")
            Calibration_Histry_TestName="Cal_His_Chloride";
        else if(Prod_Code=="MB1151")
            Calibration_Histry_TestName="Cal_His_CK_MB";
        else if(Prod_Code=="MB1161")
            Calibration_Histry_TestName="Cal_His_CK_NAC";
        else if(Prod_Code=="MB1171")
            Calibration_Histry_TestName="Cal_His_Crea_Enzy";
        else if(Prod_Code=="MB1181")
            Calibration_Histry_TestName="Cal_His_Crea_Kine";
        else if(Prod_Code=="MB1191")
            Calibration_Histry_TestName="Cal_His_Ethyl_Alco";
        else if(Prod_Code=="MB1201")
            Calibration_Histry_TestName="Cal_His_GGT";
        else if(Prod_Code=="MB1211")
            Calibration_Histry_TestName="Cal_His_AST";
        else if(Prod_Code=="MB1221")
            Calibration_Histry_TestName="Cal_His_ALT";
        else if(Prod_Code=="MB1231")
            Calibration_Histry_TestName="Cal_His_HDL_Choles";
        else if(Prod_Code=="MB1241")
            Calibration_Histry_TestName="Cal_His_Hemoglobin";
        else if(Prod_Code=="MB1251")
            Calibration_Histry_TestName="Cal_His_HCY";
        else if(Prod_Code=="MB1261")
            Calibration_Histry_TestName="Cal_His_Iron";
        else if(Prod_Code=="MB1271")
            Calibration_Histry_TestName="Cal_His_Lactate";
        else if(Prod_Code=="MB1281")
            Calibration_Histry_TestName="Cal_His_LDH";
        else if(Prod_Code=="MB1291")
            Calibration_Histry_TestName="Cal_His_LDL_Choles";
        else if(Prod_Code=="MB1301")
            Calibration_Histry_TestName="Cal_His_Lipase";
        else if(Prod_Code=="MB1311")
            Calibration_Histry_TestName="Cal_His_Magnesium";
        else if(Prod_Code=="MB1321")
            Calibration_Histry_TestName="Cal_His_Microalbumin";
        else if(Prod_Code=="MB1331")
            Calibration_Histry_TestName="Cal_His_Phospholipids";
        else if(Prod_Code=="MB1341")
            Calibration_Histry_TestName="Cal_His_Phos_UV";
        else if(Prod_Code=="MB1351")
            Calibration_Histry_TestName="Cal_His_Phos_C";
        else if(Prod_Code=="MB1361")
            Calibration_Histry_TestName="Cal_His_Potassium";
        else if(Prod_Code=="MB1371")
            Calibration_Histry_TestName="Cal_His_RF";
        else if(Prod_Code=="MB1381")
            Calibration_Histry_TestName="Cal_His_Sodium";
        else if(Prod_Code=="MB1391")
            Calibration_Histry_TestName="Cal_His_TC";
        else if(Prod_Code=="MB1401")
            Calibration_Histry_TestName="Cal_His_TP";
        else if(Prod_Code=="MB1411")
            Calibration_Histry_TestName="Cal_His_TPU_CSF";
        else if(Prod_Code=="MB1421")
            Calibration_Histry_TestName="Cal_His_TIBC";
        else if(Prod_Code=="MB1431")
            Calibration_Histry_TestName="Cal_His_Trigly";
        else if(Prod_Code=="MB1441")
            Calibration_Histry_TestName="Cal_His_Urea";
        else if(Prod_Code=="MB1451")
            Calibration_Histry_TestName="Cal_His_Uric_Acid";
        else if(Prod_Code=="MB1461")
            Calibration_Histry_TestName="Cal_His_Zinc";
        else if(Prod_Code=="MB1471")
            Calibration_Histry_TestName="Cal_His_Cholin";
        else if(Prod_Code=="MB1481")
            Calibration_Histry_TestName="Cal_His_Copper";
        else if(Prod_Code=="MB1491")
            Calibration_Histry_TestName="Cal_His_Lithium";
        else if(Prod_Code=="MB1501")
            Calibration_Histry_TestName="Cal_His_TBA";
        else if(Prod_Code=="MB1511")
            Calibration_Histry_TestName="Cal_His_UIBC";
        else if(Prod_Code=="MB1521")
            Calibration_Histry_TestName="Cal_His_GD";
        else if(Prod_Code=="MB1462")
            Calibration_Histry_TestName="Cal_His_ZINC_S";
        else if(Prod_Code=="MB1651")
            Calibration_Histry_TestName="Cal_His_MAGNESIUM_C";
        else if(Prod_Code=="MB1212")
            Calibration_Histry_TestName="Cal_His_AST_S";
        else if(Prod_Code=="MB1222")
            Calibration_Histry_TestName="Cal_His_ALT_S";
        else if(Prod_Code=="MB1052")
            Calibration_Histry_TestName="Cal_His_ALP_S";
        else if(Prod_Code=="MB1122")
            Calibration_Histry_TestName="Cal_His_BTOTAL_S";
        else if(Prod_Code=="MB1182")
            Calibration_Histry_TestName="Cal_His_CREATININE_S";


        query.prepare("SELECT * FROM '"+Calibration_Histry_TestName+"'");
        if (!query.exec()) {
            qDebug() << "Error executing query:" << query.lastError().text();
            return -1;
        }
        QDateTime currentDateTime = QDateTime::currentDateTime();
        QString date_text = currentDateTime.toString("ddMMyyhhmmss");

        // Create a CSV file to write the data
        QFile file("/home/pi/Export_files/"+TestName+""+date_text+".csv");
        if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
            qDebug() << "Error: unable to open file" << file.errorString();
            return -1;
        }

        // Write data to the CSV file
        QTextStream out(&file);
        // Write header row
        QSqlRecord rec = query.record();
        for (int i = 0; i < rec.count(); ++i) {
            out << rec.fieldName(i);
            if (i < rec.count() - 1)
                out << ",";
        }
        out << "\n";

        // Write data rows
        while (query.next()) {
            for (int i = 0; i < rec.count(); ++i) {
                out << query.value(i).toString();
                if (i < rec.count() - 1)
                    out << ",";
            }
            out << "\n";
        }

        // Close the file and database connection
        file.close();
    }
    else if(calibration_check==2)
    {
        QString test_code;
        // Execute a query to select data from the table
        QSqlQuery query;
        query.prepare("select Pro_Code from test where name='"+TestName+"'");
        query.exec();
        while(query.next())
            Prod_Code = query.value(0).toString();
        QC1_loop();
        QC1_Export_func();
        QC2_loop();
        QC2_Export_func();

        qDebug()<<" data : "<<QC1_Testname<<QC2_Testname<<Prod_Code<<TestName;
    }
    QMessageBox msg(this);
    msg.setWindowFlags(Qt::Popup);
    msg.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;");
    QFont font;
    font.setBold(true);
    msg.setFont(font);
    QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
    auto newPixmap = p.scaled(80, 80);
    msg.setIconPixmap(newPixmap);
    msg.setText("Data Exported.");
    QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
    saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
    msg.setDefaultButton(saveButton);
    msg.exec();
    if (msg.clickedButton() == saveButton)
    {
        ui->stackedWidget->setCurrentIndex(29);
        ui->stackedWidget_8->setCurrentIndex(6);
    }
    else
    {
        ui->stackedWidget->setCurrentIndex(29);
        ui->stackedWidget_8->setCurrentIndex(6);
    }
    return 0;
}

int MainWindow::QC1_Export_func()
{
    qApp->processEvents();
    qDebug()<<"Enter qc1_export";
    QSqlQuery qury;
    qury.prepare("SELECT * FROM '"+QC1_Testname+"'");
    if (!qury.exec()) {
        qDebug() << "Error executing query:" << qury.lastError().text();
        return -1;
    }
    QDateTime currentDateTime = QDateTime::currentDateTime();
    QString date_text = currentDateTime.toString("ddMMyyhhmmss");

    // Create a CSV file to write the data
    QFile file("/home/pi/Export_files/"+TestName+"_QC1_"+date_text+".csv");
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
        qDebug() << "Error: unable to open file" << file.errorString();
        return -1;
    }

    // Write data to the CSV file
    QTextStream out(&file);
    // Write header row
    QSqlRecord rec = qury.record();
    for (int i = 0; i < rec.count(); ++i) {
        out << rec.fieldName(i);
        if (i < rec.count() - 1)
            out << ",";
    }
    out << "\n";

    // Write data rows
    while (qury.next()) {
        for (int i = 0; i < rec.count(); ++i) {
            out << qury.value(i).toString();
            if (i < rec.count() - 1)
                out << ",";
        }
        out << "\n";
    }

    // Close the file and database connection
    file.close();

    return 0;
}

int MainWindow::QC2_Export_func()
{
    qApp->processEvents();
    qDebug()<<"Enter qc2_export";
    QSqlQuery qury;
    qury.prepare("SELECT * FROM '"+QC2_Testname+"'");
    if (!qury.exec()) {
        qDebug() << "Error executing query:" << qury.lastError().text();
        return -1;
    }
    QDateTime currentDateTime = QDateTime::currentDateTime();
    QString date_text = currentDateTime.toString("ddMMyyhhmmss");

    // Create a CSV file to write the data
    QFile file("/home/pi/Export_files/"+TestName+"_QC2_"+date_text+".csv");
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
        qDebug() << "Error: unable to open file" << file.errorString();
        return -1;
    }

    // Write data to the CSV file
    QTextStream out(&file);
    // Write header row
    QSqlRecord rec = qury.record();
    for (int i = 0; i < rec.count(); ++i) {
        out << rec.fieldName(i);
        if (i < rec.count() - 1)
            out << ",";
    }
    out << "\n";

    // Write data rows
    while (qury.next()) {
        for (int i = 0; i < rec.count(); ++i) {
            out << qury.value(i).toString();
            if (i < rec.count() - 1)
                out << ",";
        }
        out << "\n";
    }

    // Close the file and database connection
    file.close();
    return 0;
}

void MainWindow::on_toolButton_31_clicked()
{
    ui->stackedWidget->setCurrentIndex(29);
    ui->stackedWidget_8->setCurrentIndex(0);
}

void MainWindow::on_toolButton_38_clicked()
{
    ui->stackedWidget->setCurrentIndex(29);
    ui->stackedWidget_8->setCurrentIndex(0);
}

void MainWindow::on_toolButton_39_clicked()
{
    ui->stackedWidget->setCurrentIndex(9);
}

void MainWindow::on_toolButton_40_clicked()
{
    ui->stackedWidget->setCurrentIndex(29);
    ui->stackedWidget_8->setCurrentIndex(3);
}

void MainWindow::on_toolButton_41_clicked()
{
    ui->stackedWidget->setCurrentIndex(29);
    ui->stackedWidget_8->setCurrentIndex(3);
}

void MainWindow::on_toolButton_42_clicked()
{
    ui->stackedWidget->setCurrentIndex(29);
    ui->stackedWidget_8->setCurrentIndex(3);
}

int MainWindow::on_toolButton_47_clicked()
{
    qApp->processEvents();



    // Create source file dialog
    QFileDialog srcDialog(this, "Source file", "/home/pi/Export_files/");
    srcDialog.setFileMode(QFileDialog::ExistingFile);
    srcDialog.setNameFilter("All files (*.*)");
    srcDialog.setWindowFlags(srcDialog.windowFlags() | Qt::FramelessWindowHint);
    srcDialog.setOption(QFileDialog::DontUseNativeDialog);
    srcDialog.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;");
    srcDialog.setFixedSize(600, 400);

    if (srcDialog.exec() == QDialog::Accepted) {
        const QString srcPath = srcDialog.selectedFiles().first();
        qDebug() << "Source File Path:" << srcPath;

        if (srcPath.isEmpty()) { // Use isEmpty() instead of isNull()
            qDebug() << "Source path is empty, user canceled.";
            return false;
        }

        QFileInfo fileInfo(srcPath);
        QString fileName = fileInfo.fileName();
        qDebug() << "File Name:" << fileName;

        // Create destination file dialog
        QFileDialog dstDialog(this, "Destination file", "/media/pi/");
        dstDialog.setFileMode(QFileDialog::Directory);
        dstDialog.setOption(QFileDialog::ShowDirsOnly, true);
        dstDialog.setWindowFlags(dstDialog.windowFlags() | Qt::FramelessWindowHint);
        dstDialog.setOption(QFileDialog::DontUseNativeDialog);
        dstDialog.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;");
        dstDialog.setFixedSize(600, 400);

        if (dstDialog.exec() == QDialog::Accepted) {
            const QString dstDirPath = dstDialog.selectedFiles().first();
            qDebug() << "Destination Directory Path:" << dstDirPath;

            if (dstDirPath.isEmpty()) {
                qDebug() << "Destination path is empty, user canceled.";
                return false;
            }

            // Ensure the destination directory exists and is writable
            QDir dstDir(dstDirPath);
            if (!dstDir.exists() || !dstDir.isReadable()) {
                qDebug() << "Destination directory is not accessible.";
                return false;
            }

            QString dstPath = dstDir.filePath(fileName);

            // If the destination file already exists, remove it
            if (QFile::exists(dstPath)) {
                qDebug() << "Destination file already exists, attempting to overwrite.";
                if (!QFile::remove(dstPath)) {
                    qDebug() << "Failed to remove existing destination file.";
                    return false;
                }
            }

            if (QFile::copy(srcPath, dstPath)) {
                QFile dstFile(dstPath);
                if (dstFile.open(QIODevice::ReadWrite | QIODevice::Text)) {
                    if (dstFile.flush()) {
                        QMessageBox msg(this);
                        msg.setWindowFlags(Qt::Popup);
                        msg.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;");
                        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
                        auto newPixmap = p.scaled(80, 80);
                        msg.setIconPixmap(newPixmap);
                        msg.setText("Data transferred successfully.");
                        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                        saveButton->setStyleSheet("QPushButton{background: #34ba91; color: black;} QPushButton:pressed {background: rgb(0, 85, 0); color: white;}");
                        msg.setDefaultButton(saveButton);
                        msg.exec();

                        ui->stackedWidget->setCurrentIndex(29);
                        ui->stackedWidget_8->setCurrentIndex(3);
                    } else {
                        qDebug() << "Failed to flush the destination file.";
                        return false;
                    }
                } else {
                    qDebug() << "Failed to open the destination file for writing.";
                    return false;
                }
            } else {
                qDebug() << "Failed to copy the source file to the destination.";
                qDebug() << "Source Path:" << srcPath;
                qDebug() << "Destination Path:" << dstPath;
                return false;
            }
        } else {
            qDebug() << "User canceled the destination file selection.";
            return false;
        }
    } else {
        qDebug() << "User canceled the source file selection.";
        return false;
    }
    return true;
}


int MainWindow::on_toolButton_48_clicked()
{
    qApp->processEvents();
    // Create source directory dialog
    QFileDialog srcDialog(this, "Select Source Folder", "/home/pi/Export_files/");
    srcDialog.setFileMode(QFileDialog::Directory);
    //srcDialog.setNameFilter("All files (*.csv)");
    srcDialog.setOption(QFileDialog::ShowDirsOnly, true);
    srcDialog.setWindowFlags(srcDialog.windowFlags() | Qt::FramelessWindowHint);
    srcDialog.setOption(QFileDialog::DontUseNativeDialog);
    srcDialog.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;");

    if (srcDialog.exec() == QDialog::Accepted) {
        const QString srcPath = srcDialog.selectedFiles().first();
        qDebug() << "Source Directory Path:" << srcPath;

        if (srcPath.isNull())
            return false;

        // Create destination directory dialog
        QFileDialog dstDialog(this, "Select Destination Folder", "/media/pi/");
        dstDialog.setFileMode(QFileDialog::Directory);
        // srcDialog.setNameFilter("All files (*.csv)");
        dstDialog.setOption(QFileDialog::ShowDirsOnly, true);
        dstDialog.setWindowFlags(dstDialog.windowFlags() | Qt::FramelessWindowHint);
        dstDialog.setOption(QFileDialog::DontUseNativeDialog);
        dstDialog.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;");

        if (dstDialog.exec() == QDialog::Accepted) {
            const QString dstPath = dstDialog.selectedFiles().first();
            qDebug() << "Destination Directory Path:" << dstPath;

            if (dstPath.isNull())
                return false;

            if (copyDirectory(srcPath, dstPath))
            {
                QMessageBox msg(this);
                msg.setWindowFlags(Qt::Popup);
                msg.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;");
                QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
                auto newPixmap = p.scaled(80, 80);
                msg.setIconPixmap(newPixmap);
                msg.setText("Data transferred successfully.");
                QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                msg.setDefaultButton(saveButton);
                msg.exec();
                if (msg.clickedButton() == saveButton)
                {
                    ui->stackedWidget->setCurrentIndex(29);
                    ui->stackedWidget_8->setCurrentIndex(3);
                }
                else
                {
                    ui->stackedWidget->setCurrentIndex(29);
                    ui->stackedWidget_8->setCurrentIndex(3);
                }
            }
            else
            {
                qDebug() << "Failed to copy the directory.";
                return false;
            }
        } else {
            return false;
        }
    } else {
        return false;
    }
    return 0;
}


bool MainWindow::copyDirectory(const QString &srcPath, const QString &dstPath)
{
    qApp->processEvents();
    QDir srcDir(srcPath);
    if (!srcDir.exists())
        return false;

    QDir dstDir(dstPath);
    if (!dstDir.exists())
    {
        if (!dstDir.mkpath(dstPath))
            return false;
    }

    QFileInfoList fileInfoList = srcDir.entryInfoList(QDir::NoDotAndDotDot | QDir::Files | QDir::Dirs);
    foreach (QFileInfo fileInfo, fileInfoList)
    {
        QString srcFilePath = fileInfo.filePath();
        QString dstFilePath = dstPath + QDir::separator() + fileInfo.fileName();

        if (fileInfo.isDir())
        {
            if (!copyDirectory(srcFilePath, dstFilePath))
                return false;
        }
        else
        {
            if (!QFile::copy(srcFilePath, dstFilePath))
                return false;
        }
    }

    return true;
}

int MainWindow::on_pushButton_333_clicked()
{
    qApp->processEvents();
    QFileDialog srcDialog(this, "Source file", "/home/pi/PDF_files/");
    srcDialog.setFileMode(QFileDialog::ExistingFile);
    srcDialog.setNameFilter("All files (*.pdf)");
    srcDialog.setWindowFlags(srcDialog.windowFlags() | Qt::FramelessWindowHint);
    srcDialog.setOption(QFileDialog::DontUseNativeDialog);
    srcDialog.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;"); // Apply the stylesheet

    if (srcDialog.exec() == QDialog::Accepted) {
        const QString srcPath = srcDialog.selectedFiles().first();
        qDebug() << "Source File Path:" << srcPath;

        if (srcPath.isNull()) {
            qDebug() << "Source path is null, user canceled.";
            return false; // QFileDialog dialogs return null if user canceled
        }

        QFileInfo fileInfo(srcPath);
        QString fileName = fileInfo.fileName();
        qDebug() << "File Name:" << fileName;

        // Create destination file dialog
        QFileDialog dstDialog(this, "Destination file", "/media/pi/");
        dstDialog.setFileMode(QFileDialog::Directory);
        dstDialog.setOption(QFileDialog::ShowDirsOnly, true);
        dstDialog.setWindowFlags(dstDialog.windowFlags() | Qt::FramelessWindowHint);
        dstDialog.setOption(QFileDialog::DontUseNativeDialog);
        dstDialog.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;"); // Apply the stylesheet

        if (dstDialog.exec() == QDialog::Accepted) {
            const QString dstDirPath = dstDialog.selectedFiles().first();
            qDebug() << "Destination Directory Path:" << dstDirPath;

            if (dstDirPath.isNull()) {
                qDebug() << "Destination path is null, user canceled.";
                return false;
            }

            // Ensure the destination directory exists and is writable
            QDir dstDir(dstDirPath);
            if (!dstDir.exists() || !dstDir.isReadable()) {
                qDebug() << "Destination directory is not accessible.";
                return false;
            }

            QString dstPath = dstDir.filePath(fileName);

            // If the destination file already exists, remove it
            if (QFile::exists(dstPath)) {
                qDebug() << "Destination file already exists, attempting to overwrite.";
                if (!QFile::remove(dstPath)) {
                    qDebug() << "Failed to remove existing destination file.";
                    return false;
                }
            }

            if (QFile::copy(srcPath, dstPath)) {
                QFile dstFile(dstPath);
                if (dstFile.open(QIODevice::ReadWrite | QIODevice::Text)) {
                    if (dstFile.flush()) {
                        QMessageBox msg(this);
                        msg.setWindowFlags(Qt::Popup);
                        msg.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;");
                        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
                        auto newPixmap = p.scaled(80, 80);
                        msg.setIconPixmap(newPixmap);
                        msg.setText("Data transferred successfully.");
                        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                        msg.setDefaultButton(saveButton);
                        msg.exec();
                        if (msg.clickedButton() == saveButton)
                        {
                            ui->stackedWidget->setCurrentIndex(24);
                            ui->stackedWidget_3->setCurrentIndex(2);
                            ui->pushButton_333->setEnabled(false);
                        }
                        else
                        {
                            ui->stackedWidget->setCurrentIndex(24);
                            ui->stackedWidget_3->setCurrentIndex(2);
                            ui->pushButton_333->setEnabled(false);
                        }
                    } else {
                        qDebug() << "Failed to flush the destination file.";
                        return false;
                    }
                } else {
                    qDebug() << "Failed to open the destination file for writing.";
                    return false;
                }
            } else {
                qDebug() << "Failed to copy the source file to the destination.";
                qDebug() << "Source Path:" << srcPath;
                qDebug() << "Destination Path:" << dstPath;
                //qDebug() << "Error:" << QFile::errorString();
                return false;
            }
        } else {
            qDebug() << "User canceled the destination file selection.";
            return false;
        }
    } else {
        qDebug() << "User canceled the source file selection.";
        return false;
    }
    return 0;
}

void MainWindow::on_toolButton_43_clicked()
{
    ui->stackedWidget->setCurrentIndex(29);
    ui->stackedWidget_8->setCurrentIndex(2);
}

QString MainWindow::findUsbDeviceNode()
{
    QProcess process;
    process.start("lsblk", QStringList() << "-ln" << "-o" << "NAME,MOUNTPOINT");
    process.waitForFinished();

    QString output = process.readAllStandardOutput();
    QStringList lines = output.split("\n");

    QString deviceNode;
    QString mountPoint;

    // Process each line to find the device node and corresponding mount point
    for (const QString &line : lines) {
        QStringList tokens = line.split(QRegularExpression("\\s+"), QString::SkipEmptyParts);
        if (tokens.size() == 2) {
            QString node = tokens[0];
            QString mount = tokens[1];

            if (mount.startsWith("/media/pi/")) {  // Adjust based on your mount point pattern
                deviceNode = "/dev/" + node;
                mountPoint = mount;
                break;  // Stop once we find the first valid USB mount point
            }
        }
    }

    if (!deviceNode.isEmpty())
    {
        qDebug() << "Found USB device node:" << deviceNode;
        qDebug() << "Mount point:" << mountPoint;
    }
    else
        qDebug() << "No USB device found.";

    return deviceNode;
}

// Method to eject USB device
bool MainWindow::EjectUsbDevice(const QString &deviceNode)
{
    // Sync the device to ensure all data is written
    QProcess syncProcess;
    syncProcess.start("sync");
    if (!syncProcess.waitForFinished()) {
        qWarning() << "Failed to sync the device:" << deviceNode;
        return false;
    }

    // Unmount the device using udisksctl
    QProcess unmountProcess;
    unmountProcess.start("sudo", QStringList() << "udisksctl" << "unmount" << "-b" << deviceNode);
    if (!unmountProcess.waitForFinished()) {
        qWarning() << "Failed to unmount the device:" << deviceNode;
        return false;
    }

    if (unmountProcess.exitCode() != 0) {
        qWarning() << "Unmount command failed with exit code" << unmountProcess.exitCode();
        qWarning() << unmountProcess.readAllStandardError();
        return false;
    }

    // Power off the device using udisksctl
    QProcess powerOffProcess;
    powerOffProcess.start("sudo", QStringList() << "udisksctl" << "power-off" << "-b" << deviceNode);
    if (!powerOffProcess.waitForFinished()) {
        qWarning() << "Failed to power off the device:" << deviceNode;
        return false;
    }

    if (powerOffProcess.exitCode() != 0) {
        qWarning() << "Power-off command failed with exit code" << powerOffProcess.exitCode();
        qWarning() << powerOffProcess.readAllStandardError();
        return false;
    }

    qDebug() << "Device" << deviceNode << "has been safely ejected.";
    return true;
}

// Slot to handle the button click
void MainWindow::on_toolButton_49_clicked()
{
    qApp->processEvents();
    QString usbDeviceNode = findUsbDeviceNode();
    if (usbDeviceNode.isEmpty()) {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setText("No USB device is currently mounted.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton) {
            ui->stackedWidget->setCurrentIndex(29);
            ui->stackedWidget_8->setCurrentIndex(3);
        }
        return;
    }

    if (EjectUsbDevice(usbDeviceNode)) {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setText("The USB device has been safely ejected. You can now remove the device.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton) {
            ui->stackedWidget->setCurrentIndex(29);
            ui->stackedWidget_8->setCurrentIndex(3);
        }
    } else {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setText("Failed to eject the USB device. Please try again.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton) {
            ui->stackedWidget->setCurrentIndex(29);
            ui->stackedWidget_8->setCurrentIndex(3);
        }
    }
}

void MainWindow::on_comboBox_9_currentTextChanged(const QString &arg1)
{
    Q_UNUSED(arg1);
    qApp->processEvents();
    QString cmbo= ui->comboBox_9->currentText();
    int one=1,two=2;
    QSqlQuery qy;
    if(cmbo=="Send individual results")
    {
        qy.prepare("update LIS set Sending_Results='"+QString::number(one)+"' where sno=1");

        ui->pushButton_17->setEnabled(true);
        ui->pushButton_261->setDisabled(true);

    }
    else if(cmbo=="Send all results")
    {
        qy.prepare("update LIS set Sending_Results='"+QString::number(two)+"' where sno=1");

        ui->pushButton_17->setEnabled(false);
        ui->pushButton_261->setDisabled(false);
    }
    qy.exec();

}

void MainWindow::createTable_withQCHis()
{
    qApp->processEvents();
    QSqlQuery query;
    QStringList tableParameter={"ZINC_S","MAGNESIUM_C","AST_S","ALT_S","ALP_S","BILIRUBINTOTAL_S","CREATININE_S"};
    QStringList Pro_Name={"ZINC-S","MAGNESIUM(C)","AST-S","ALT-S","ALP-S","BILIRUBIN TOTAL-S","CREATININE-S"};
    QStringList Pro_Code={"MB1462","MB1651","MB1212","MB1222","MB1052","MB1122","MB1182"};
    QStringList tableQC1={"ZINC_S_QC1","MAGNESIUM_C_QC1","AST_S_QC1","ALT_S_QC1","ALP_S_QC1","BTOTAL_S_QC1","CREATININE_S_QC1"};
    QStringList tableQC2={"ZINC_S_QC2","MAGNESIUM_C_QC2","AST_S_QC2","ALT_S_QC2","ALP_S_QC2","BTOTAL_S_QC2","CREATININE_S_QC2"};
    QStringList tableCalHis={"Cal_His_ZINC_S","Cal_His_MAGNESIUM_C","Cal_His_AST_S","Cal_His_ALT_S","Cal_His_ALP_S","Cal_His_BTOTAL_S","Cal_His_CREATININE_S"};
    QStringList ParameterColumnNames={"sno","Pro_Name","Pro_Code","Lot_No","Expiry","Kit_No","Dist_Code","Date","Time","Count","Temp","Data"};
    QStringList QC1ColumnNames={"sno","Tname","Procode","QC1Conc","QC1OD","Unit","QCMin","QCMax","Date","Time","xval1","xval2","xval3","LotNo"};
    QStringList QC2ColumnNames={"sno","Tname","Procode","QC2Conc","QC2OD","Unit","QCMin","QCMax","Date","Time","xval1","xval2","xval3","LotNo"};
    QStringList CalHisColumnNames={"sno","Tname","bno","conc","abs","fact","date"};
    for(int i=0; i<tableParameter.size();i++){
        if (!isTableExists(tableParameter[i])) {
            QHash<QString, QString> ParameterColumnType;
            ParameterColumnType["sno"] = "TEXT";
            ParameterColumnType["Pro_Name"] = "TEXT";
            ParameterColumnType["Pro_Code"] = "TEXT";
            ParameterColumnType["Lot_No"] = "TEXT";
            ParameterColumnType["Expiry"] = "TEXT";
            ParameterColumnType["Kit_No"] = "TEXT";
            ParameterColumnType["Dist_Code"] = "TEXT";
            ParameterColumnType["Date"] = "TEXT";
            ParameterColumnType["Time"] = "TEXT";
            ParameterColumnType["Count"] = "TEXT";
            ParameterColumnType["Temp"] = "TEXT";
            ParameterColumnType["Data"] = "TEXT";

            QString sqlQuery = QString("CREATE TABLE %1 (").arg(tableParameter[i]);

            // Add column definitions to the CREATE TABLE query
            for (int i = 0; i < ParameterColumnNames.size(); ++i) {
                if (i > 0) {
                    sqlQuery += ", ";
                }
                QString columnName = ParameterColumnNames.at(i);
                QString columnType = ParameterColumnType.value(columnName);

                if (columnName == "sno") {
                    // If the column name is "id" and the type is "INTEGER", make it PRIMARY KEY and AUTOINCREMENT
                    sqlQuery += "sno INTEGER PRIMARY KEY AUTOINCREMENT";
                }
                else{
                    sqlQuery += QString("%1 %2").arg(columnName).arg(columnType);
                }

            }

            sqlQuery += ");";

            if (query.exec(sqlQuery)) {
                qDebug() << "Table created successfully:" << tableParameter[i];
                QSqlQuery qrinserttest;
                qrinserttest.prepare("insert into '"+tableParameter[i]+"'(sno,Pro_Name,Pro_Code,Kit_No,Count,Temp,Data) values(?,?,?,?,?,?,?)");
                qrinserttest.addBindValue(1);
                qrinserttest.addBindValue(Pro_Name[i]);
                qrinserttest.addBindValue(Pro_Code[i]);
                qrinserttest.addBindValue("00000");
                qrinserttest.addBindValue("0");
                qrinserttest.addBindValue("1");
                qrinserttest.addBindValue("1");
                if(qrinserttest.exec()){

                }
                else{
                    qDebug()<<"error to insert barcode default for"<<tableParameter[i];
                }
            }
            else {
                qDebug() << "Error creating Parameter table:" << query.lastError().text();
            }
            QHash<QString, QString> QC1ColumnTypes;
            QC1ColumnTypes["sno"] = "TEXT";
            QC1ColumnTypes["Tname"] = "TEXT";
            QC1ColumnTypes["Procode"] = "TEXT";
            QC1ColumnTypes["QC1Conc"] = "TEXT";
            QC1ColumnTypes["QC1OD"] = "TEXT";
            QC1ColumnTypes["Unit"] = "TEXT";
            QC1ColumnTypes["QCMin"] = "TEXT";
            QC1ColumnTypes["QCMax"] = "TEXT";
            QC1ColumnTypes["Date"] = "TEXT";
            QC1ColumnTypes["Time"] = "TEXT";
            QC1ColumnTypes["xval1"] = "TEXT";
            QC1ColumnTypes["xval2"] = "TEXT";
            QC1ColumnTypes["xval3"] = "TEXT";
            QC1ColumnTypes["LotNo"] = "TEXT";

            QString sqlQueryQC1 = QString("CREATE TABLE %1 (").arg(tableQC1[i]);

            // Add column definitions to the CREATE TABLE query
            for (int i = 0; i < QC1ColumnNames.size(); ++i) {
                if (i > 0) {
                    sqlQueryQC1 += ", ";
                }
                QString columnName = QC1ColumnNames.at(i);
                QString columnType = QC1ColumnTypes.value(columnName);

                if (columnName == "sno") {
                    // If the column name is "id" and the type is "INTEGER", make it PRIMARY KEY and AUTOINCREMENT
                    sqlQueryQC1 += "sno INTEGER PRIMARY KEY AUTOINCREMENT";
                }
                else {
                    sqlQueryQC1 += QString("%1 %2").arg(columnName).arg(columnType);
                }
            }

            sqlQueryQC1 += ");";
            if(query.exec(sqlQueryQC1)){
                qDebug()<<"QC1 Tableadded for"<<tableQC1[i];
            }
            else {
                qDebug() << "Error creating QC1 table:" << query.lastError().text();
            }
            QHash<QString, QString> QC2ColumnTypes;
            QC2ColumnTypes["sno"] = "TEXT";
            QC2ColumnTypes["Tname"] = "TEXT";
            QC2ColumnTypes["Procode"] = "TEXT";
            QC2ColumnTypes["QC1Conc"] = "TEXT";
            QC2ColumnTypes["QC1OD"] = "TEXT";
            QC2ColumnTypes["Unit"] = "TEXT";
            QC2ColumnTypes["QCMin"] = "TEXT";
            QC2ColumnTypes["QCMax"] = "TEXT";
            QC2ColumnTypes["Date"] = "TEXT";
            QC2ColumnTypes["Time"] = "TEXT";
            QC2ColumnTypes["xval1"] = "TEXT";
            QC2ColumnTypes["xval2"] = "TEXT";
            QC2ColumnTypes["xval3"] = "TEXT";
            QC2ColumnTypes["LotNo"] = "TEXT";

            QString sqlQueryQC2 = QString("CREATE TABLE %1 (").arg(tableQC2[i]);

            // Add column definitions to the CREATE TABLE query
            for (int i = 0; i < QC2ColumnNames.size(); ++i) {
                if (i > 0) {
                    sqlQueryQC2 += ", ";
                }
                QString columnName = QC2ColumnNames.at(i);
                QString columnType = QC2ColumnTypes.value(columnName);

                if (columnName == "sno") {
                    // If the column name is "id" and the type is "INTEGER", make it PRIMARY KEY and AUTOINCREMENT
                    sqlQueryQC2 += "sno INTEGER PRIMARY KEY AUTOINCREMENT";
                }
                else {
                    sqlQueryQC2 += QString("%1 %2").arg(columnName).arg(columnType);
                }
            }

            sqlQueryQC2 += ");";
            if(query.exec(sqlQueryQC2)){
                qDebug()<<"QC2 Tableadded for"<<tableQC2[i];
            }
            else {
                qDebug() << "Error creating QC2 table:" << query.lastError().text();
            }
            QHash<QString, QString> CalHisColumnTypes;
            CalHisColumnTypes["sno"] = "TEXT";
            CalHisColumnTypes["Tname"] = "TEXT";
            CalHisColumnTypes["bno"] = "TEXT";
            CalHisColumnTypes["conc"] = "TEXT";
            CalHisColumnTypes["abs"] = "TEXT";
            CalHisColumnTypes["fact"] = "TEXT";
            CalHisColumnTypes["date"] = "TEXT";

            QString sqlQueryCalHis = QString("CREATE TABLE %1 (").arg(tableCalHis[i]);

            // Add column definitions to the CREATE TABLE query
            for (int i = 0; i < CalHisColumnNames.size(); ++i) {
                if (i > 0) {
                    sqlQueryCalHis += ", ";
                }
                QString columnName = CalHisColumnNames.at(i);
                QString columnType = CalHisColumnTypes.value(columnName);

                if (columnName == "sno") {
                    // If the column name is "id" and the type is "INTEGER", make it PRIMARY KEY and AUTOINCREMENT
                    sqlQueryCalHis += "sno INTEGER PRIMARY KEY AUTOINCREMENT";
                }
                else {
                    sqlQueryCalHis += QString("%1 %2").arg(columnName).arg(columnType);
                }
            }

            sqlQueryCalHis += ");";
            if(query.exec(sqlQueryCalHis)){
                qDebug()<<"QC1 Tableadded for"<<tableCalHis[i];
                for(int j=1;j<=10;j++){
                    QSqlQuery qrinsert10nos;
                    qrinsert10nos.prepare("insert into '"+tableCalHis[i]+"'(sno) values(?)");
                    qrinsert10nos.addBindValue(j);
                    if(qrinsert10nos.exec()){

                    }
                    else{
                        qDebug()<<"error in inserting 10 nos "<<qrinsert10nos.lastError();
                    }
                }
            }
            else {
                qDebug() << "Error creating CalHis table:" << query.lastError().text();
            }
        } else {
            qDebug() << "Table already exists:" << tableParameter[i];
            break;
        }

    }
    Add_2nd_Phase_Parameters();
}

bool MainWindow::isTableExists(const QString& tableName)
{
    QSqlQuery query;
    QString sqlQuery = QString("SELECT name FROM sqlite_master WHERE type='table' AND name='%1';").arg(tableName);

    if (query.exec(sqlQuery)) {
        return query.next(); // If the table exists, query.next() will return true
    } else {
        qDebug() << "Error checking table existence:" << query.lastError().text();
        return false;
    }
}
QString MainWindow::ParameterNameForDB(QString TestName)
{
    qApp->processEvents();
    if(TestName=="ZINC-S")
        TestName="ZINC_S";
    else if(TestName=="MAGNESIUM(C)")
        TestName="MAGNESIUM_C";
    else if(TestName=="ALT-S")
        TestName="ALT_S";
    else if(TestName=="AST-S")
        TestName="AST_S";
    else if(TestName=="ALP-S")
        TestName="ALP_S";
    else if(TestName=="BILIRUBIN TOTAL-S")
        TestName="BTOTAL_S";
    else if(TestName=="CREATININE-S")
        TestName="CREATININE_S";
    return TestName;
}

QString MainWindow::ParameterNameToShow(QString TestName)
{
    qApp->processEvents();

    if(TestName=="ZINC-S")
        TestName="ZINC_S";
    else if(TestName=="MAGNESIUM(C)")
        TestName="MAGNESIUM_C";
    else if(TestName=="ALT-S")
        TestName="ALT_S";
    else if(TestName=="AST-S")
        TestName="AST_S";
    else if(TestName=="ALP-S")
        TestName="ALP_S";
    else if(TestName=="BILIRUBIN TOTAL-S")
        TestName="BTOTAL_S";
    else if(TestName=="CREATININE-S")
        TestName="CREATININE_S";

    return TestName;
}



void MainWindow::Add_2nd_Phase_Parameters()
{
    qApp->processEvents();
    QStringList Testname = {"AMMONIA","CHLORIDE","CK-NAC","COPPER","IRON","MAGNESIUM","POTASSIUM","SODIUM","ZINC","BICARBONATE","CHOLINESTERASE","TBA","CREATININE ENZYMATIC","ZINC-S","MAGNESIUM(C)","AST-S","ALT-S","ALP-S","BILIRUBIN TOTAL-S","CREATININE-S"};
    QStringList Testcode = {"MB1071","MB1141","MB1161","MB1481","MB1261","MB1311","MB1361","MB1381","MB1461","MB1101","MB1471","MB1501","MB1171","MB1462","MB1651","MB1212","MB1222","MB1052","MB1122","MB1182"};
    QStringList wavelength= {"340 nm","505 nm","340 nm","570 nm","630 nm","630 nm","570 nm","630 nm","545 nm","405 nm","505 nm","405 nm","545 nm","545 nm","630 nm","340 nm","340 nm","405 nm","545 nm","505 nm"};
    QStringList reaction_type= {"Fixed Kinetic","End point","Kinetic","End point","End point","End point","End point","End point","End point","Fixed Kinetic","Kinetic","Kinetic","Fixed Kinetic","End point","End point","Kinetic","Kinetic","Kinetic","End point","Fixed Kinetic"};
    QStringList unit= {"µg/dL","mmol/L","U/L","µg/dL","µg/dL","mg/dL","mmol/L","mmol/L","µg/dL","mmol/L","U/L","µmol/L","mg/dL","µg/dL","mg/dL","U/L","U/L","U/L","mg/dL","mg/dL"};
    QStringList temparature= {"37 °C","37 °C","37 °C","37 °C","37 °C","37 °C","37 °C","37 °C","37 °C","37 °C","37 °C","37 °C","37 °C","37 °C","37 °C","37 °C","37 °C","37 °C","37 °C","37 °C"};
    QStringList factor= {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "};
    QStringList blankvalue= {"DistilledWater","ReagentBlank","DistilledWater","ReagentBlank","ReagentBlank","ReagentBlank","ReagentBlank","ReagentBlank","ReagentBlank","DistilledWater","DistilledWater","DistilledWater","DistilledWater","ReagentBlank","ReagentBlank","DistilledWater","DistilledWater","DistilledWater","ReagentBlank","DistilledWater"};
    QStringList delay_time= {"30"," ","60"," "," "," "," "," "," ","30","30","90","10","","","60","60","60","","30"};
    QStringList reading_time= {"150","","180"," "," "," "," "," "," ","180","90","180","300","","","180","180","180","","120"};
    QStringList lag_time= {"","","3","","","","","","","","3","3","","","","3","3","3","",""};
    QStringList linear_minimum= {"9","12","1","4","12","0.2","1.5","55","20","1","35","5","0.14","20","0.2","5","5","5","0.1","0.31"};
    QStringList linear_maximum= {"1500","130","2000","500","500","5","10","180","400","50","18000","150","30","400","5","400","400","750","25","20"};
    QStringList Normal_Minimum= {"19","97","24","70","37","1.8","3.6","135","70.6","22","4000","0","0.51","70.6","1.8","14","32","43","0.2","0.72"};
    QStringList Normal_Maximum={"102","108","204","155","158","2.6","5.5","150","127","29","12600","10","1.17","127","2.6","35","48","115","1.2","1.18"};
    QStringList Mode= {"Linear","Linear","Linear","Linear","Linear","Linear","Linear","Linear","Linear","Linear","Linear","Linear","Linear","Linear","Linear","Linear","Linear","Linear","Linear","Linear"};
    QStringList No_of_Standard= {"1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"};
    QStringList Repeat= {"0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0"};
    QStringList Concen1= {"149.4","113","512","165","222","4.33","6.4","160","224","17","5285","39.8","4.2","224","4.33","138","132","356","5.23","4.02"};
    QStringList Concen2= {"0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0"};
    QStringList Concen3= {"0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0"};
    QStringList Concen4= {"0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0"};
    QStringList Concen5= {"0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0"};
    QStringList Concen6= {"0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0"};
    QStringList Concen7= {"0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0"};
    QStringList Concen8= {"0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0","0.0"};
    QStringList Control1_Avg= {"75.74","97","206","104","114","2.27","4.12","145","222","7.68","5829","23.2","1.51","222","2.27","37","37","176","1.61","1.5"};
    QStringList Control1_Minimum= {"60.86","92.1","169","82.7","93.9","2","3.91","138","178","6.09","4663","18.6","1.21","178","2","30","30","149","1.27","1.2"};
    QStringList Control1_Maximum= {"90.61","102","243","125","134","2.54","4.33","152","266","9.27","6995","27.8","1.81","266","2.54","44","44","203","1.95","1.8"};
    QStringList Control1_Batch= {"1216UE","1614UN","1614UN","1614UN","1614UN","1614UN","1614UN","1614UN","1614UN","1614UN","1614UN","1614UN","1614UN","1614UN","1614UN","1614UN","1614UN","1614UN","1614UN","1614UN"};
    QStringList Control2_Avg= {"164.39","113","493","159","216","4.59","6.29","157","240","15.1","5134","40.4","4.53","240","4.59","150","137","345","4.63","4.37"};
    QStringList Control2_Minimum= {"131.58","107","404","127","177","4.06","5.98","149","192","12","4107","32.3","3.63","192","4.06","120","110","293","3.66","3.5"};
    QStringList Control2_Maximum= {"197.2","119","582","191","255","5.12","6.6","165","288","18.2","6161","48.5","5.43","288","5.12","180","164","397","5.6","5.24"};
    QStringList Control2_Batch= {"1216UE","1291UE","1291UE","1291UE","1291UE","1291UE","1291UE","1291UE","1291UE","1291UE","1291UE","1291UE","1291UE","1291UE","1291UE","1291UE","1291UE","1291UE","1291UE","1291UE"};
    QStringList RecentCNT= {"0000000","0000000","0000000","0000000","0000000","0000000","0000000","0000000","0000000","0000000","0000000","0000000","0000000","0000000","0000000","0000000","0000000","0000000","0000000","0000000"};
    QStringList Batchno= {"1216UE","1262UE","1262UE","1262UE","1262UE","1262UE","1262UE","1262UE","1262UE","1262UE","1262UE","1262UE","1262UE","1262UE","1262UE","1262UE","1262UE","1262UE","1262UE","1262UE"};

    qDebug()<<"Testname sizze : "<<Testname.size();
    addFieldsToTable("Printer");
    // Check if data already exists
    QSqlQuery query;
    for( int i=0 ;i<Testname.size();i++)
    {
        qDebug()<<"i : "<<i<<" "<<"Testname[i] : "<<Testname[i];
        query.prepare("SELECT COUNT(*) FROM test WHERE name = :name");
        query.bindValue(":name", Testname[i]);

        if (!query.exec()) {
            qDebug() << "Error: failed to execute select query";
        } else {
            query.next();
            int count = query.value(0).toInt();
            if (count > 0) {
                qDebug() << "Data with the name" << Testname[i] << "already exists";
            } else {
                // Insert data
                QSqlQuery insertQuery;
                QString insertData = "INSERT INTO test (name,wave,rctn,unit,temp,fact,blnk,dely,read,lag,linmin,linmax,normin,normax ,nostd,rpt,con1,con2,con3,con4,con5,con6,con7,con8,"
                                     "ctrl1avg,ctrl1min,ctrl1max,ctrl1bno,ctrl2avg,ctrl2min,ctrl2max,ctrl2bno,Pro_Code,Batch_No,RecentCNT) VALUES (:name,:wave,:rctn,:unit,:temp,:fact,:blnk,:dely,:read,:lag,:linmin,:linmax,:normin,:normax ,:nostd,:rpt,:con1,:con2,:con3,:con4,:con5,:con6,:con7,:con8,"
                                     ":ctrl1avg,:ctrl1min,:ctrl1max,:ctrl1bno,:ctrl2avg,:ctrl2min,:ctrl2max,:ctrl2bno,:Pro_Code,:Batch_No,:RecentCNT)";
                insertQuery.prepare(insertData);
                insertQuery.bindValue(":name", Testname[i]);
                insertQuery.bindValue(":wave", wavelength[i]);
                insertQuery.bindValue(":rctn", reaction_type[i]);
                insertQuery.bindValue(":unit", unit[i]);
                insertQuery.bindValue(":temp", temparature[i]);
                insertQuery.bindValue(":fact", factor[i]);
                insertQuery.bindValue(":blnk", blankvalue[i]);
                insertQuery.bindValue(":dely", delay_time[i]);
                insertQuery.bindValue(":read", reading_time[i]);
                insertQuery.bindValue(":lag", lag_time[i]);
                insertQuery.bindValue(":linmin", linear_minimum[i]);
                insertQuery.bindValue(":linmax", linear_maximum[i]);
                insertQuery.bindValue(":normin", Normal_Minimum[i]);
                insertQuery.bindValue(":normax", Normal_Maximum[i]);
                insertQuery.bindValue(":nostd", No_of_Standard[i]);
                insertQuery.bindValue(":rpt", Repeat[i]);
                insertQuery.bindValue(":con1", Concen1[i]);
                insertQuery.bindValue(":con2", Concen2[i]);
                insertQuery.bindValue(":con3", Concen3[i]);
                insertQuery.bindValue(":con4", Concen4[i]);
                insertQuery.bindValue(":con5", Concen5[i]);
                insertQuery.bindValue(":con6", Concen6[i]);
                insertQuery.bindValue(":con7", Concen7[i]);
                insertQuery.bindValue(":con8", Concen8[i]);
                insertQuery.bindValue(":ctrl1avg", Control1_Avg[i]);
                insertQuery.bindValue(":ctrl1min", Control1_Minimum[i]);
                insertQuery.bindValue(":ctrl1max", Control1_Maximum[i]);
                insertQuery.bindValue(":ctrl1bno", Control1_Batch[i]);
                insertQuery.bindValue(":ctrl2avg", Control2_Avg[i]);
                insertQuery.bindValue(":ctrl2min", Control2_Minimum[i]);
                insertQuery.bindValue(":ctrl2max", Control2_Maximum[i]);
                insertQuery.bindValue(":ctrl2bno", Control2_Batch[i]);
                insertQuery.bindValue(":Pro_Code", Testcode[i]);
                insertQuery.bindValue(":Batch_No", Batchno[i]);
                insertQuery.bindValue(":RecentCNT", RecentCNT[i]);
                if (!insertQuery.exec()) {
                    qDebug() << "Error: failed to insert data" ;
                } else {
                    qDebug() << "Data inserted successfully";

                }
            }
        }
    }

    if(After_Clear_Data==0)
        /*  {
        ui->stackedWidget->setCurrentIndex(31);
    }*/
        timerr->start(1000);
    else
        qDebug()<<"Data Cleared";
    //ui->stackedWidget->setCurrentIndex(0);
    //ui->frame_5->setVisible(true);
}

void MainWindow::addFieldsToTable(const QString &tableName)
{
    qApp->processEvents();
    // List of fields to check/add
    QStringList fieldsToAdd = {"BaudRate", "DataBits", "Parity", "FlowControl"};

    QStringList existingFields;
    QSqlQuery query;
    // Fetch existing fields
    if (query.exec("PRAGMA table_info(" + tableName + ");")) {
        while (query.next()) {
            existingFields << query.value(1).toString(); // Column name is in the second field
        }
    } else {
        qDebug() << "Failed to get table info:" << query.lastError().text();
        return;
    }

    // Add missing fields
    for (const QString &field : fieldsToAdd)
    {
        if (!existingFields.contains(field))
        {
            QString alterQuery = QString("ALTER TABLE %1 ADD COLUMN %2 TEXT;").arg(tableName, field);
            if (!query.exec(alterQuery)) {
                qDebug() << "Failed to add field" << field << ":" << query.lastError().text();
            } else {
                qDebug() << "Field added:" << field;
            }
        } else {
            qDebug() << "Field already exists:" << field;
        }
    }
}

int MainWindow::on_toolButton_2_clicked()
{
    QString lab_name , lab_address , data;
    QSqlQuery qry;
    qry.prepare("select Lab_name,Lab_address,Data from Lab_details where sno=1");
    qry.exec();
    while(qry.next())
    {
        lab_name = qry.value(0).toString();
        lab_address = qry.value(1).toString();
        data = qry.value(2).toString();
    }
    Printer *p = new Printer(ui, this);
    std::cout << "Trying to open port" << std::endl;
    bool res = p->open("/dev/ttyS0");
    std::cout << "Status: " << res << std::endl;
    if (!res) {
        std::cerr << "Error opening port, aborting" << std::endl;
        return (0);
    }

    qApp->processEvents();
    p->reset();
    /*uint8_t printData[] = {0x1B, 0x7B, 0x00}; // Example data
    p->write(printData, 3); // Send the reversed byte
    usleep(10000);          // Wait for command to take effect*/
    p->setAlign(Printer::MIDDLE);
    p->setBold(true);

    if(data=="1")
    {
        p->write(lab_name);
        p->write("\n"+lab_address);
        p->write("\n\n Test Report");
    }
    else if(data=="2")
        p->write("MCA-11 Test Report");

    p->setBold(false);
    p->feed();
    p->feed();
    p->setAlign(Printer::LEFT);
    p->write("Patient ID   : 12345");
    p->write("\nTest Name    : XXXX");
    p->write("\nResult       : YYYY" );
    p->write("\nDate         : "   +  ui->SysDate_Lbl->text());
    p->write("\nTime         : "   +  ui->SysTime_Lbl->text());
    p->feed();
p->feed();
p->feed();
    if(With_G == 1)
    {
        p->setAlign(Printer::MIDDLE);
        p->setBold(true);
        p->write("Graph");
        p->setBold(false);
        uint8_t printimg[] = {0x1D, 0x76, 0x30}; // Example data
        p->write(printimg, 3); // Send the reversed byte
        p->feed();
        p->feed();
        QString imagePath2 = "/home/pi/customplot.png";
        QImage image2 = loadImage(imagePath2);
        if(image2.isNull())
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("Error loading image:"+imagePath2+"");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
                ui->stackedWidget->setCurrentIndex(14);
            else
                ui->stackedWidget->setCurrentIndex(14);
        }
        else
            p->printBitImage(image2);
        //p->printImage(image2,128);
    }
    p->feed();
    p->feed();
    p->feed();
    p->close();
    return 1;
}

int MainWindow::on_toolButton_44_clicked()
{
    Printer *p = new Printer(ui, this);
    std::cout << "Trying to open port" << std::endl;
    bool res = p->open("/dev/ttyS0");
    std::cout << "Status: " << res << std::endl;
    if (!res) {
        std::cerr << "Error opening port, aborting" << std::endl;
        return (0);
    }
    p->reset();
    p->printSelfTestPage();
    p->feed();
    p->feed();
    p->feed();
    p->close();
    return 1;
}

void MainWindow::on_pushButton_150_clicked()
{
    Internal=1;
    External=0;
    Pdefault=1;
    QString Baudrate = ui->comboBox_11->currentText();
    QString Databit = ui->comboBox_17->currentText();
    QString Parity = ui->comboBox_14->currentText();
    QString FlowControl = ui->comboBox_18->currentText();
    QSqlQuery qry;
    qry.prepare("update Printer set BaudRate='"+Baudrate+"' , DataBits='"+Databit+"' , Parity = '"+Parity+"' , FlowControl = '"+FlowControl+"' where sno=1");
    if(qry.exec())
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setText("Internal Printer Configured Successfully.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            ui->pushButton_276->setEnabled(false);
            ui->pushButton_16->setEnabled(true);
            ui->stackedWidget->setCurrentIndex(14);
        }
        else
            ui->stackedWidget->setCurrentIndex(14);
    }
}

void MainWindow::on_pushButton_254_clicked()
{
    qDebug()<<"Data : "<<clickval0<<clickval1<<clickval2<<clickval3<<clickval4<<clickval5<<clickval6<<clickval7<<clickval8<<clickval9<<clickval10<<clickval11;
    ui->frame_64->setDisabled(true);
    ui->label_438->setVisible(false);

    ui->label_450->setVisible(false);
    ui->label_451->setVisible(false);
    ui->pushButton_222->setEnabled(false);
    ui->pushButton_230->setEnabled(false);
    ui->pushButton_262->setEnabled(false);
    ui->pushButton_265->setEnabled(false);
    ui->pushButton_266->setEnabled(false);
    ui->PName_lineEdit->setStyleSheet("border:1px solid black;background-color: rgb(232, 232, 232);");
    ui->PAge_lineEdit->setStyleSheet("border:1px solid black;background-color: rgb(232, 232, 232);");
    ui->label_86->setStyleSheet("border:1px solid black;background-color: rgb(232, 232, 232);");
    ui->Unit_LE->setStyleSheet("border:1px solid black;background-color: rgb(232, 232, 232);");
    ui->comboBox_19->setEnabled(false);
    ui->comboBox_19->setVisible(false);

    ui->label_44->setText(clickval0);
    ui->PName_lineEdit->setText(clickval1);
    ui->PAge_lineEdit->setText(clickval2);

    ui->label_86->setText(clickval3);
    ui->label_58->setText(clickval4);
    ui->A_Rang->setText(clickval5);
    ui->B_Rang->setText(clickval6);
    ui->label_69->setText(clickval7);
    ui->label_70->setText(clickval8);
    ui->Unit_LE->setText(clickval9);
    ui->His_Date_lbl->setText(clickval10);
    ui->His_Time_lbl->setText(clickval11);

    ui->toolButton_23->setEnabled(false);
    ui->pushButton_254->setEnabled(false);
    ui->toolButton_45->setEnabled(false);
    ui->pushButton_248->setEnabled(false);
    ui->pushButton_250->setEnabled(false);
    ui->pushButton_261->setEnabled(false);

    ui->frame_13->setVisible(true);
    ui->frame_14->setVisible(true);
    ui->frame_15->setVisible(true);
    ui->label_85->setVisible(true);
    ui->pushButton_15->setVisible(true);
    ui->comboBox_19->setVisible(false);
}

void MainWindow::on_pushButton_248_clicked()
{
    ui->label_450->setVisible(false);
    ui->label_451->setVisible(false);
    ui->label_438->setVisible(false);
    ui->pushButton_254->setVisible(true);
    ui->pushButton_254->setDisabled(true);
    ui->stackedWidget_10->setCurrentIndex(1);
}

void MainWindow::on_toolButton_45_clicked()
{
    ui->frame_12->setVisible(false);
    ui->label_438->setVisible(false);
    ui->label_450->setVisible(false);
    ui->label_451->setVisible(false);
    ui->label_433->setVisible(false);
    ui->label_432->setVisible(false);
    ui->pushButton_293->setVisible(false);
    ui->label_431->setVisible(false);
    ui->label_428->setVisible(false);
    ui->pushButton_294->setVisible(false);
    ui->stackedWidget_10->setCurrentIndex(0);
}

void MainWindow::on_pushButton_250_clicked()
{
    ui->label_450->setVisible(false);
    ui->label_451->setVisible(false);
    ui->label_438->setVisible(false);
    ui->pushButton_254->setVisible(true);
    ui->pushButton_254->setDisabled(true);
    ui->stackedWidget->setCurrentIndex(29);
    ui->stackedWidget_8->setCurrentIndex(3);
}

void MainWindow::on_pushButton_261_clicked()
{
    //LIS
    qApp->processEvents();
    ui->label_438->setVisible(false);
    ui->pushButton_254->setVisible(true);
    ui->pushButton_254->setDisabled(true);

    QAbstractItemModel *Model = ui->tableView_5->model();
    int rowcount=Model->rowCount();
    qDebug()<<"rcnt : "<<rowcount;
    QString Current_PID;
    std::string  Transfer_DT , Lab_name,Patient_ID,Patient_name,Patient_age,Patient_Gender,Testname,Test_DT,Result,Data_Testcode;
    QString PID , PName , PAge,PGender , TName, ANrmlRang, BNrmlRang,ODVal,ResultOD,unit,Date,Time;
    for (int row = 0; row < rowcount; ++row)
    {
        PID=Model->data(Model->index(row, 0)).toString();
        PName=Model->data(Model->index(row, 1)).toString();
        PAge=Model->data(Model->index(row, 2)).toString();
        PGender=Model->data(Model->index(row, 3)).toString();
        TName=Model->data(Model->index(row, 4)).toString();
        ANrmlRang=Model->data(Model->index(row, 5)).toString();
        BNrmlRang=Model->data(Model->index(row, 6)).toString();
        ODVal=Model->data(Model->index(row, 7)).toString();
        ResultOD=Model->data(Model->index(row, 8)).toString();
        unit=Model->data(Model->index(row, 9)).toString();
        Date=Model->data(Model->index(row, 10)).toString();
        Time=Model->data(Model->index(row, 11)).toString();

        qDebug()<<"PID : "<<PID<<" PNAme : "<<PName<<" PAge : "<<PAge<<" PGender : "<<PGender<<" TName : "<<TName<<" ANrmlRang : "
               <<ANrmlRang<<" BNrmlRang : "<<BNrmlRang<<" ODVal : "<<ODVal<<" ResultOD : "<<ResultOD<<" unit : "<<unit<<" Date : "<<Date<<" Time : "<<Time;

        qDebug()<<"i val : "<<row<<" PID : "<<PID;
        QString System_date = ui->SysDate_Lbl->text();
        QString System_Time = ui->SysTime_Lbl->text();
        QString para_code;
        QSqlQuery qy;
        qy.prepare("select Pro_Code from test where name='"+TName+"'");
        qy.exec();
        while(qy.next())
            para_code=qy.value(0).toString();

        QByteArray ary;
        ary.append(Date);//Date
        std::string  Test_Date,pos1,pos2,pos3,pos4,pos5,pos6,pos7,pos8;
        std::string Test_Date1;
        pos1=ary[0];
        pos2=ary[1];
        pos3=ary[2];
        pos4=ary[3];
        pos5=ary[7];
        pos6=ary[8];
        pos7=ary[12];
        pos8=ary[13];
        Test_Date = pos1+pos2+pos3+pos4+pos5+pos6+pos7+pos8;

        QByteArray ary1;
        ary1.append(Time);//Time
        std::string Test_Time ,  post1,post2,post3,post4,post5,post6;
        post1=ary1[0];
        post2=ary1[1];
        post3=ary1[5];
        post4=ary1[6];
        post5=ary1[10];
        post6=ary1[11];
        Test_Time = post1+post2+post3+post4+post5+post6;

        QByteArray ary2;
        ary2.append(System_date);//SystemData
        std::string Transfer_Date ,  posd1,posd2,posd3,posd4,posd5,posd6,posd7,posd8;
        posd1=ary2[0];
        posd2=ary2[1];
        posd3=ary2[2];
        posd4=ary2[3];
        posd5=ary2[7];
        posd6=ary2[8];
        posd7=ary2[12];
        posd8=ary2[13];
        Transfer_Date = posd1+posd2+posd3+posd4+posd5+posd6+posd7+posd8;

        QByteArray ary3;
        ary3.append(System_Time);//SystemTime
        std::string Transfer_Time ,  posti1,posti2,posti3,posti4,posti5,posti6;
        posti1=ary3[0];
        posti2=ary3[1];
        posti3=ary3[5];
        posti4=ary3[6];
        posti5=ary3[10];
        posti6=ary3[11];
        Transfer_Time = posti1+posti2+posti3+posti4+posti5+posti6;

        std::string data1 , data2 , data3, data4, data5,data6, data7, data8 ;
        data1 = Transfer_Date;
        data2 = Transfer_Time;
        data3 = PID.toStdString(); //PID
        data4 = PName.toStdString(); //PName
        data5 =  PAge.toStdString();//PAge
        data6= PGender.toStdString(); //PGender
        data7= TName.toStdString(); //TName
        data8 = ResultOD.toStdString(); //ResultOD

        Transfer_DT = data1+data2;
        Patient_ID = data3;
        Patient_name = data4;
        Patient_age = data5;
        Patient_Gender = data6;
        Testname = data7;
        Test_DT = Test_Date+Test_Time;
        Result = data8;
        Data_Testcode = para_code.toStdString();
        std::string ResUnit , aNrmlRang , bNrmlrang;
        ResUnit = Unit.toStdString(); //unit
        aNrmlRang = ANrmlRang.toStdString(); //Anrmlrang
        bNrmlrang = BNrmlRang.toStdString(); //bnrmlrang
        std::string G, A ;
        if(PGender == "Male")
            G="M";
        else if(PGender == "Female")
            G="F";
        else if(PGender == "Others")
            G="O";
        int page = PAge.toInt();
        int Current_Year=QDate::currentDate().year();
        int year = Current_Year-page;
        QString Pa_Age = QString::number(year);
        A = Pa_Age.toStdString();
        QString Lab_name;
        QSqlQuery qrry;
        qrry.prepare("select Lab_name from Lab_details where sno=1");
        qrry.exec();
        while(qrry.next())
            Lab_name= qrry.value(0).toString();

        std::string  Labname;
        Labname=Lab_name.toStdString();
        // std::string Encode = "|^~\&|";

        std::string hl7Message = "MSH|^~\\&|MCA-11|"+Labname+"|||"+Transfer_DT+"||ORU^R01|||2.3|||||\r"
                                                                               "PID|1|"+Patient_ID+"|||"+Patient_name+"||"+A+"|"+G+"|\r"
                                                                                                                                   "OBR|1|"+Patient_ID+"|MCA-11||||"+Test_DT+"||||||||||||||\r"
                                                                                                                                                                             "OBX|1|NM|"+Data_Testcode+"^"+Testname+"||"+Result+"|"+ResUnit+"|"+bNrmlrang+"-"+aNrmlRang+"|||||||"+Test_DT+"||\r";
        QString IP , Port;
        QSqlQuery query;
        query.prepare("select Address1,Port from LIS where sno=1");
        query.exec();
        while (query.next())
        {
            IP = query.value(0).toString();
            Port = query.value(1).toString();
        }
        qDebug()<<"IP : "<<IP <<" "<<"Port : "<<Port;
        if(IP == "" && Port == "")
        {

            QMessageBox msg;
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif ;");
            QFont font;
            font.setBold(true);
            msg.setFont(font);
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("The ip-address & port number is empty, \n Please configure the correct ip-Address & port number");
            msg.setStandardButtons(QMessageBox::Ok);
            // Connect signal for message box closing event
            connect(&msg, &QMessageBox::finished, [=](int result) {
                if (result == QMessageBox::Ok)
                    ui->stackedWidget->setCurrentIndex(0);
                else
                    ui->stackedWidget->setCurrentIndex(9);
            });

            msg.exec();
        }
        else
        {
            qDebug()<<"LIS_Data : "<<LIS_data;
            if(LIS_data==0)
            {
                QMessageBox msg;
                msg.setWindowFlags(Qt::Popup);
                msg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif ;");
                QFont font;
                font.setBold(true);
                msg.setFont(font);
                QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
                auto newPixmap = p.scaled(80, 80);
                msg.setIconPixmap(newPixmap);
                msg.setText("Check to see if there is a valid ip-address and port number");
                QPushButton* saveButton = msg.addButton("Already verified", QMessageBox::AcceptRole);
                saveButton->setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(214, 140, 50, 255), stop:1 rgba(255, 176, 64, 255));color:black;}QPushButton:pressed {background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(214, 140, 50, 255), stop:1 rgba(255, 176, 64, 255));color:white;}");
                QPushButton* dontSaveButton = msg.addButton("Ok", QMessageBox::DestructiveRole);
                dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91); color:black;}");
                msg.setDefaultButton(saveButton);
                msg.exec();
                if (msg.clickedButton() == saveButton)
                {
                    LIS_data=1;
                    isConnected=sock->isConnectedd();
                    if (isConnected)
                    {
                        std::string IPAddress , PortNumber;
                        IPAddress = IP.toStdString();
                        PortNumber =  Port.toStdString();
                        sock->send_msg_mllp(hl7Message);
                    }
                    else
                    {

                    }
                }
                else if(msg.clickedButton() == dontSaveButton)
                    ui->stackedWidget->setCurrentIndex(0);
                else
                    ui->stackedWidget->setCurrentIndex(0);
            }
            else
            {
                qApp->processEvents();
                qDebug()<<"connection status : "<<sock->isConnectedd();
                isConnected=sock->isConnectedd();
                if (isConnected)
                {
                    std::string IPAddress , PortNumber;
                    IPAddress = IP.toStdString();
                    PortNumber =  Port.toStdString();
                    sock->send_msg_mllp(hl7Message);
                }
                else
                {

                }
            }
        }
    }

    qDebug()<<"connection status : "<<sock->isConnectedd();
    if (isConnected)
    {
        QString messageText,Icontext;
        messageText= "All data was successfully transferred to the LIS server.";
        Icontext="/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png";

        QMessageBox msg;
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif ;");
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        QPixmap p(Icontext);
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setText(messageText);
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
            ui->stackedWidget->setCurrentIndex(9);
        else
            ui->stackedWidget->setCurrentIndex(9);
    }
    else
    {
        QMessageBox msg;
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setText("The LIS server is not connected");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            LIS_connect_data=0;
            ui->stackedWidget->setCurrentIndex(9);
        }
        else
            ui->stackedWidget->setCurrentIndex(9);
    }
}

void MainWindow::on_pushButton_260_clicked()
{
    //Filter Parameter Name
    ui->label_438->setVisible(false);
    ui->frame_64->setVisible(true);
    ui->frame_12->setVisible(false);
    clearGridLayout(ui->gridLayout_2);
    ui->pushButton_6->setVisible(false);
    ui->pushButton_139->setVisible(false);
    ui->pushButton_142->setVisible(true);
    ui->pushButton_142->setStyleSheet("QPushButton {border: 2px solid green;border-top-left-radius:40px;border-top-right-radius:40px;background-color: white;padding: 10px;}");
    ui->label_428->setVisible(false);
    ui->label_431->setVisible(false);
    ui->pushButton_294->setVisible(false);
    ui->label_432->setVisible(false);
    ui->label_433->setVisible(false);
    ui->pushButton_293->setVisible(false);
    ui->pushButton_254->setVisible(true);
    ui->pushButton_254->setDisabled(true);
    ui->Home_Lbl_2->setText("Filter by parameter");
    filterback=1;
    qDebug()<<"Recent Btn already delete";
    ui->Home_Lbl_2->setText("Filter by parameter");
    tabnumber2=1;
    tabtest=5;
    tabrecent=0;
    tabedit=0;
    tabdelete=0;
    tabqc=0;
    tabfilter=0;
    exptopn=0;
    if(Test_Type=="Biochemistry")
    {
        ui->scrollArea_7->verticalScrollBar()->setStyleSheet("QScrollBar:vertical {"
                                                             "    border: 1px solid #999999;"
                                                             "    background:white;"
                                                             "    width:25px;    "
                                                             "    margin: 0px 0px 0px 0px;"
                                                             "}"
                                                             "QScrollBar::handle:vertical {"
                                                             "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                             "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145), stop:1 rgb(12, 68, 145));"
                                                             "    min-height: 0px;"
                                                             "}"
                                                             "QScrollBar::add-line:vertical {"
                                                             "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                             "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                             "    height: 0px;"
                                                             "    subcontrol-position: bottom;"
                                                             "    subcontrol-origin: margin;"
                                                             "}"
                                                             "QScrollBar::sub-line:vertical {"
                                                             "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                             "    stop: 0  rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                             "    height: 0 px;"
                                                             "    subcontrol-position: top;"
                                                             "    subcontrol-origin: margin;"
                                                             "}"
                                                             );
        ui->scrollArea_7->horizontalScrollBar()->setStyleSheet( "QScrollBar:horizontal { "
                                                                "    border: 1px solid #999999;"
                                                                "    background:white;"
                                                                "    height:25px;    "
                                                                "    margin: 0px 0px 0px 0px;"
                                                                "}"
                                                                "QScrollBar::handle:horizontal {"
                                                                "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                                "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145), stop:1 rgb(12, 68, 145));"
                                                                "    min-height: 0px;"
                                                                "}"
                                                                "QScrollBar::add-line:horizontal {"
                                                                "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                                "    stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                                "    height: 0px;"
                                                                "    subcontrol-position: bottom;"
                                                                "    subcontrol-origin: margin;"
                                                                "}"
                                                                "QScrollBar::sub-line:horizontal {"
                                                                "    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,"
                                                                "    stop: 0  rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                                                "    height: 0 px;"
                                                                "    subcontrol-position: top;"
                                                                "    subcontrol-origin: margin;"
                                                                "}");


        QSqlQuery query;
        query.prepare("SELECT name FROM test ORDER BY name ASC;");
        query.exec();
        int count=0;
        while(query.next())
        {
            QString s=query.value(0).toString();
            arraylst[count]=s;
            count++;
            qDebug()<<s;
        }
        int count1=0;
        const QSize btnSize = QSize(150, 50);
        for (int i=0;i<15 ;i++ )
        {
            for (int j=0;j<5 ;j++ )
            {
                if(count1==count)
                    break;
                else
                {
                    QPushButton *button = new QPushButton(arraylst[count1]);
                    button->setStyleSheet(
                                "QPushButton {"
                                "  background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                "  color: white;"
                                "}"
                                "QPushButton:hover {"
                                "  background-color: qlineargradient(spread:pad, x1:0, y1:0.0913636, x2:0.944, y2:0.392, stop:0.0969388 rgba(22, 123, 200, 255), stop:1 rgba(20, 113, 180, 255));""}"
                                "QPushButton:pressed {"
                                " background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                "margin-top: 2px;"
                                "margin-bottom: -4px;"
                                "color: white;"
                                "}"
                                );
                    QFont font = button->font();
                    font.setBold(true);
                    button->setFont(font);
                    button->setFixedSize(btnSize);
                    button->setObjectName(arraylst[count1]);
                    connect(button, &QPushButton::clicked, this, &MainWindow::cald4);
                    ui->gridLayout_2->addWidget(button,i,j);
                    count1++;
                }
            }
        }
    }
    else if(Test_Type=="Turbidity")
    {
        ui->scrollArea_7->verticalScrollBar()->setStyleSheet("QScrollBar:vertical {"
                                                             "    border: 1px solid #999999;"
                                                             "    background:white;"
                                                             "    width:25px;    "
                                                             "    margin: 0px 0px 0px 0px;"
                                                             "}"
                                                             "QScrollBar::handle:vertical {"
                                                             "   background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                             "    min-height: 0px;"
                                                             "}"
                                                             "QScrollBar::add-line:vertical {"
                                                             "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                             "    height: 0px;"
                                                             "    subcontrol-position: bottom;"
                                                             "    subcontrol-origin: margin;"
                                                             "}"
                                                             "QScrollBar::sub-line:vertical {"
                                                             "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                             "    height: 0 px;"
                                                             "    subcontrol-position: top;"
                                                             "    subcontrol-origin: margin;"
                                                             "}"
                                                             );
        ui->scrollArea_7->horizontalScrollBar()->setStyleSheet( "QScrollBar:horizontal { "
                                                                "    border: 1px solid #999999;"
                                                                "    background:white;"
                                                                "    height:25px;    "
                                                                "    margin: 0px 0px 0px 0px;"
                                                                "}"
                                                                "QScrollBar::handle:horizontal {"
                                                                "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                                "    min-height: 0px;"
                                                                "}"
                                                                "QScrollBar::add-line:horizontal {"
                                                                "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                                "    height: 0px;"
                                                                "    subcontrol-position: bottom;"
                                                                "    subcontrol-origin: margin;"
                                                                "}"
                                                                "QScrollBar::sub-line:horizontal {"
                                                                "    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                                                "    height: 0 px;"
                                                                "    subcontrol-position: top;"
                                                                "    subcontrol-origin: margin;"
                                                                "}");



        QSqlQuery query;
        query.prepare("SELECT TestName FROM Turbidity_test ORDER BY TestName ASC;");
        query.exec();
        int count=0;
        while(query.next())
        {
            QString s=query.value(0).toString();
            arraylst[count]=s;
            count++;
            qDebug()<<s;
        }
        int count1=0;
        const QSize btnSize = QSize(150, 50);
        for (int i=0;i<15 ;i++ )
        {
            for (int j=0;j<5 ;j++ )
            {
                if(count1==count)
                    break;
                else
                {
                    QPushButton *button = new QPushButton(arraylst[count1]);
                    button->setStyleSheet(
                                "QPushButton {"
                                "  background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 145, 106, 255), stop:1 rgba(0, 145, 106, 255));"
                                "  color: white;"
                                "}"
                                "QPushButton:hover {"
                                "  background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0.08, stop:0.164773 rgba(0, 214, 157, 255), stop:1 rgba(0, 214, 157, 255));}"
                                "QPushButton:disabled {"
                                "  background: rgb(170, 170, 127);"
                                "  color: black;"
                                "}"
                                "QPushButton:pressed {"
                                " background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(12, 68, 145), stop: 0.5 rgb(12, 68, 145),  stop:1 rgb(12, 68, 145));"
                                "margin-top: 2px;"
                                "margin-bottom: -4px;"
                                "color: white;"
                                "}"
                                );
                    QFont font = button->font();
                    font.setBold(true);
                    button->setFont(font);
                    button->setFixedSize(btnSize);
                    button->setObjectName(arraylst[count1]);
                    connect(button, &QPushButton::clicked, this, &MainWindow::cald4);
                    ui->gridLayout_2->addWidget(button,i,j);
                    count1++;
                }
            }
        }
    }

    ui->stackedWidget->setCurrentIndex(1);
}

// Function to replace the parameter name
QString MainWindow::transformPName(QString paramName)
{
    if(paramName=="ZINC_S")
        paramName="ZINC-S";
    else if(paramName=="MAGNESIUM_C")
        paramName="MAGNESIUM(C)";
    else if(paramName=="ALT_S")
        paramName="ALT-S";
    else if(paramName=="AST_S")
        paramName="AST-S";
    else if(paramName=="ALP_S")
        paramName="ALP-S";
    else if(paramName=="BILIRUBIN TOTAL_S")
        paramName="BTOTAL-S";
    else if(paramName=="CREATININE_S")
        paramName="CREATININE-S";
    return paramName; // Return the original name if no match
}

void MainWindow::on_pushButton_255_clicked()
{
    // Sample ID
    ui->label_450->setVisible(false);
    ui->label_451->setVisible(false);
    ui->frame_12->setVisible(true);
    ui->label_438->setVisible(true);
    ui->lineEdit_45->setVisible(true);
    ui->lineEdit_45->clear();
    ui->pushButton_200->setVisible(true);

    ui->pushButton_254->setVisible(true);
    ui->pushButton_254->setDisabled(true);
    ui->label_428->setVisible(false);
    ui->label_431->setVisible(false);
    ui->pushButton_294->setVisible(false);
    ui->label_432->setVisible(false);
    ui->label_433->setVisible(false);
    ui->pushButton_293->setVisible(false);
    ui->label_438->setVisible(true);

    QSqlQueryModel * model = new QSqlQueryModel();
    QSqlQuery* query = new QSqlQuery(mydb);

    if(Test_Type=="Biochemistry")
        query->prepare("SELECT PID, PName, TName, Date, Time FROM Reports");
    else if(Test_Type=="Turbidity")
        query->prepare("SELECT PID, PName, TName, Date, Time FROM Turbidity_Result");

    query->exec();
    model->setQuery(*query);
    model->setHeaderData(0, Qt::Horizontal, QObject::tr("Patient ID"));
    model->setHeaderData(1, Qt::Horizontal, QObject::tr("Name"));
    model->setHeaderData(2, Qt::Horizontal, QObject::tr("Parameter name"));
    model->setHeaderData(3, Qt::Horizontal, QObject::tr("Date"));
    model->setHeaderData(4, Qt::Horizontal, QObject::tr("Time"));

    ui->tableView_2->setModel(model);

    QSqlQueryModel * modall = new QSqlQueryModel();
    QSqlQuery* qury = new QSqlQuery(mydb);
    if(Test_Type=="Biochemistry")
        qury->prepare("SELECT PID, PName, PAge, PGender, TName, ANrmlRang, BNrmlRang, ODVal, ResultOD, Unit, Date, Time FROM Reports");
    else if(Test_Type=="Turbidity")
        qury->prepare("SELECT PID, PName, PAge, PGender, TName, ANrmlRang, BNrmlRang, ODVal, ResultOD, Unit, Date, Time FROM Turbidity_Result");

    qury->exec();
    modall->setQuery(*qury);
    modall->setHeaderData(0, Qt::Horizontal, QObject::tr("Patient ID"));
    modall->setHeaderData(1, Qt::Horizontal, QObject::tr("Name"));
    modall->setHeaderData(2, Qt::Horizontal, QObject::tr("Age"));
    modall->setHeaderData(3, Qt::Horizontal, QObject::tr("Gender"));
    modall->setHeaderData(4, Qt::Horizontal, QObject::tr("Parameter name"));
    modall->setHeaderData(5, Qt::Horizontal, QObject::tr("Normal range(Max)"));
    modall->setHeaderData(6, Qt::Horizontal, QObject::tr("Normal range(Min)"));
    modall->setHeaderData(7, Qt::Horizontal, QObject::tr("OD value"));
    modall->setHeaderData(8, Qt::Horizontal, QObject::tr("Result OD"));
    modall->setHeaderData(9, Qt::Horizontal, QObject::tr("Unit"));
    modall->setHeaderData(10, Qt::Horizontal, QObject::tr("Date"));
    modall->setHeaderData(11, Qt::Horizontal, QObject::tr("Time"));

    ui->tableView_5->setModel(modall);
    ui->tableView_2->resizeColumnsToContents();
    ui->tableView_5->resizeColumnsToContents();
}

void MainWindow::on_pushButton_259_clicked()
{
    //FIlter Date
    //Internal_Filter

    ui->label_450->setVisible(false);
    ui->label_451->setVisible(false);
    ui->pushButton_254->setVisible(true);
    ui->pushButton_254->setDisabled(true);
    ui->label_438->setVisible(false);
    ui->frame_12->setVisible(false);
    ui->label_428->setVisible(true);
    ui->label_431->setVisible(true);
    ui->label_431->clear();
    ui->pushButton_294->setVisible(true);
    ui->label_432->setVisible(true);
    ui->label_433->setVisible(true);
    ui->pushButton_293->setVisible(true);

    ui->label_438->setVisible(false);
    ui->frame_12->setVisible(false);

    ui->label_431->clear();
    ui->label_433->clear();
}

void MainWindow::on_Home_Btn_6_clicked()
{
    if(Run_DW340==2 || Run_DW405==2 ||Run_DW505==2 ||Run_DW545==2 ||Run_DW570==2 ||Run_DW630==2 ||Run_DW700==2)
        ui->stackedWidget_11->setVisible(false);
    else
    {
        Run_DW340=1 ;
        Run_DW405=1 ;
        Run_DW505=1 ;
        Run_DW545=1 ;
        Run_DW570=1 ;
        Run_DW630=1 ;
        Run_DW700=1 ;
    }

    ui->stackedWidget->setCurrentIndex(1);
    ui->stackedWidget_11->setVisible(false);

    ui->frame_9->setDisabled(false);
    ui->pushButton_6->setDisabled(false);
    ui->pushButton_139->setDisabled(false);
    ui->Home_Btn_2->setDisabled(false);

}

void MainWindow::on_pushButton_18_clicked()
{
    ui->pushButton_222->setEnabled(true);
    ui->pushButton_230->setEnabled(true);
    ui->pushButton_262->setEnabled(true);
    ui->pushButton_265->setEnabled(true);
    ui->pushButton_266->setEnabled(true);
    if(clickval3=="-")
    {
        ui->comboBox_19->setCurrentIndex(0);
        ui->label_86->setText("-");
    }
    else if(clickval3=="Male")
    {
        ui->comboBox_19->setCurrentIndex(1);
        ui->label_86->setText("Male");
    }
    else if(clickval3=="Female")
    {
        ui->comboBox_19->setCurrentIndex(2);
        ui->label_86->setText("Female");
    }
    else if(clickval3=="Others")
    {
        ui->comboBox_19->setCurrentIndex(3);
        ui->label_86->setText("Others");
    }
    ui->comboBox_19->setStyleSheet("QComboBox#comboBox_19 {"
                                   "    background-color: rgb(12, 68, 145);"
                                   "    border: 1px solid black;"
                                   "    color: white;"
                                   "}"
                                   "QComboBox#comboBox_19 QAbstractItemView {"
                                   "    background-color: rgb(12, 68, 145);"
                                   "    color: white;"
                                   "    selection-background-color: rgb(0, 51, 153);"
                                   "    selection-color: white;"
                                   "    border: 1px solid black;"
                                   "}");
    ui->comboBox_19->setEnabled(true);
    ui->comboBox_19->setVisible(true);
    ui->PName_lineEdit->setStyleSheet("border:1px solid black;background-color: rgb(255, 255, 255);");
    ui->PAge_lineEdit->setStyleSheet("border:1px solid black;background-color: rgb(255, 255, 255);");
    ui->label_86->setStyleSheet("border:1px solid black;background-color: rgb(255, 255, 255);");
    ui->Unit_LE->setStyleSheet("border:1px solid black;background-color: rgb(255, 255, 255);");
}

void MainWindow::on_toolButton_50_clicked()
{
    ui->tableView_2->update();
    ui->toolButton_23->setEnabled(true);
    ui->pushButton_254->setEnabled(true);
    ui->toolButton_45->setEnabled(true);
    ui->pushButton_248->setEnabled(true);
    ui->pushButton_250->setEnabled(true);
    QSqlQuery query;
    query.prepare("select PName,PAge,PGender,Unit from Reports where PID='"+clickval0+"'");
    query.exec();
    while(query.next())
    {
        clickval1 = query.value(0).toString();
        clickval2 = query.value(1).toString();
        clickval3 = query.value(2).toString();
        clickval9 = query.value(3).toString();
    }
    int Sending_Data=0;
    QSqlQuery qry;
    qry.prepare("select Sending_Results from LIS where sno=1");
    qry.exec();
    while(qry.next())
        Sending_Data=qry.value(0).toInt(); // Individual Data (or) Grp Data send

    qDebug()<<"Sending_data : "<<Sending_Data;
    if(LIS_connect_data==1)
    {
        if(LIS_data==1)
        {
            if(Sending_Data==1)
            {
                ui->pushButton_17->setEnabled(true);
                ui->pushButton_261->setDisabled(true);
            }
            else if(Sending_Data==2)
            {
                ui->pushButton_17->setEnabled(false);
                ui->pushButton_261->setDisabled(false);
            }
            else
            {
                ui->pushButton_17->setEnabled(false);
                ui->pushButton_261->setDisabled(true);
            }
        }
        else
        {
            if(Sending_Data==1)
            {
                ui->pushButton_17->setEnabled(true);
                ui->pushButton_261->setDisabled(true);
            }
            else if(Sending_Data==2)
            {
                ui->pushButton_17->setEnabled(false);
                ui->pushButton_261->setDisabled(false);
            }
            else
            {
                ui->pushButton_17->setEnabled(false);
                ui->pushButton_261->setDisabled(true);
            }
        }
    }
    else
    {
        ui->pushButton_17->setEnabled(false);
        ui->pushButton_261->setDisabled(true);
    }
    ui->frame_64->setDisabled(false);
    ui->frame_13->setVisible(false);
    ui->frame_14->setVisible(false);
    ui->frame_15->setVisible(false);
    ui->pushButton_15->setVisible(false);
    ui->comboBox_19->setVisible(false);
    ui->label_85->setVisible(false);
}

int MainWindow::on_pushButton_16_clicked()
{
    QString PID= ui->label_44->text();
    QString PName= ui->PName_lineEdit->text();
    QString PAge= ui->PAge_lineEdit->text();
    QString PGender= ui->label_86->text();
    QString Test= ui->label_58->text();
    QString Above= ui->A_Rang->text();
    QString Below= ui->B_Rang->text();
    QString Res= ui->label_70->text();
    QString Date= ui->His_Date_lbl->text();
    QString Time= ui->His_Time_lbl->text();
    QByteArray arry =  ui->Unit_LE->text().toLocal8Bit().constData();
    qDebug()<<"Unit 0 : "<<arry[0];

    QString lab_name , lab_address , data;
    QSqlQuery qry;
    qry.prepare("select Lab_name,Lab_address,Data from Lab_details where sno=1");
    qry.exec();
    while(qry.next())
    {
        lab_name = qry.value(0).toString();
        lab_address = qry.value(1).toString();
        data = qry.value(2).toString();
    }

    QString unit_initdata , unit_initdata1 , unit_initdata2, unit_initdata3 , unit_initdata4 , unit_initdata5,unit_initdata6,unit_initdata7,unit_initdata8;
    unit_initdata = arry[0];
    unit_initdata1 = arry[1];
    unit_initdata2 = arry[2];
    unit_initdata3 = arry[3];
    unit_initdata4 = arry[4];
    unit_initdata5 = arry[5];
    unit_initdata6 = arry[6];
    unit_initdata7 = arry[7];
    unit_initdata8 = arry[8];

    int num = 230;
    char character = char(num);

    Printer *p = new Printer(ui, this);
    std::cout << "Trying to open port" << std::endl;
    bool res = p->open("/dev/ttyS0");
    std::cout << "Status: " << res << std::endl;
    if (!res) {
        std::cerr << "Error opening port, aborting" << std::endl;
        return (0);
    }

    qApp->processEvents();
    p->reset();
    /*uint8_t printData[] = {0x1B, 0x7B, 0x00}; // Example data
    p->write(printData, 3); // Send the reversed byte
    usleep(10000);          // Wait for command to take effect*/
    p->setAlign(Printer::MIDDLE);
    p->setBold(true);
    if (data == "1") {
        p->write(lab_name);
        p->write("\n" + lab_address);
        p->write("\n\n Test Report");
    } else if (data == "2") {
        p->write("MCA-11 Test Report");
    }
    p->setBold(false);
    p->feed();
    p->feed();
    p->setAlign(Printer::LEFT);
    // Print dynamic information
    if (PID!= "-")
        p->write("Patient ID    : " + ui->label_44->text());
    if (PName!= "-")
        p->write("\nPatient Name  : " + ui->PName_lineEdit->text());
    if (PAge!="-")
        p->write("\nPatient Age   : " + ui->PAge_lineEdit->text());
    if (PGender!="-")
        p->write("\nPatient Gender: " + ui->label_86->text());
    if (Test!="-")
    {
        if(Test=="GLUCOSE")
            p->write("\nTest Name     : GLUCOSE");
        else if(Test=="GLUCOSE-HK")
            p->write("\nTest Name     : GLUCOSE-HK");
        else if(Test=="ADA")
            p->write("\nTest Name     : ADA");
        else if(Test=="ALBUMIN")
            p->write("\nTest Name     : ALBUMIN");
        else if(Test=="ALP")
            p->write("\nTest Name     : ALP");
        else if(Test=="AMYLASE")
            p->write("\nTest Name     : AMYLASE");
        else if(Test=="AMMONIA")
            p->write("\nTest Name     : AMMONIA");
        else if(Test=="ASO")
            p->write("\nTest Name     : ASO");
        else if(Test=="ACE")
            p->write("\nTest Name     : ACE");
        else if(Test=="BICARBONATE")
            p->write("\nTest Name     : BICARBONATE");
        else if(Test=="BILIRUBIN DIRECT")
            p->write("\nTest Name     : DBIL");
        else if(Test=="BILIRUBIN TOTAL")
            p->write("\nTest Name     : TBIL");
        else if(Test=="CALCIUM")
            p->write("\nTest Name     : CALCIUM");
        else if(Test=="CHLORIDE")
            p->write("\nTest Name     : CHLORIDE");
        else if(Test=="CK-MB")
            p->write("\nTest Name     : CK-MB");
        else if(Test=="CK-NAC")
            p->write("\nTest Name     : CK-NAC");
        else if(Test=="CREATININE-ENZYMATIC")
            p->write("\nTest Name     : CREA-ENZY");
        else if(Test=="CREATININE")
            p->write("\nTest Name     : CREATININE");
        else if(Test=="ETHYL ALCOHOL")
            p->write("\nTest Name     : ETHYL ALCOHOL");
        else if(Test=="GGT")
            p->write("\nTest Name     : GGT");
        else if(Test=="AST")
            p->write("\nTest Name     : AST");
        else if(Test=="ALT")
            p->write("\nTest Name     : ALT");
        else if(Test=="HDL")
            p->write("\nTest Name     : HDL");
        else if(Test=="HEMOGLOBIN")
            p->write("\nTest Name     : HEMOGLOBIN");
        else if(Test=="HOMOCYSTEINE")
            p->write("\nTest Name     : HOMOCYSTEINE");
        else if(Test=="IRON")
            p->write("\nTest Name     : IRON");
        else if(Test=="LACTATE")
            p->write("\nTest Name     : LACTATE");
        else if(Test=="LDH")
            p->write("\nTest Name     : LDH");
        else if(Test=="LDL")
            p->write("\nTest Name     : LDL");
        else if(Test=="LIPASE")
            p->write("\nTest Name     : LIPASE");
        else if(Test=="MAGNESIUM")
            p->write("\nTest Name     : MAGNESIUM");
        else if(Test=="MICRO ALBUMIN")
            p->write("\nTest Name     : MICRO ALBUMIN");
        else if(Test=="PHOSPHOLIPIDS")
            p->write("\nTest Name     : PHOSPHOLIPIDS");
        else if(Test=="PHOSPHORUS")
            p->write("\nTest Name     : PHOS-UV");
        else if(Test=="PHOS-C")
            p->write("\nTest Name     : PHOS-C");
        else if(Test=="POTASSIUM")
            p->write("\nTest Name     : POTASSIUM");
        else if(Test=="RF")
            p->write("\nTest Name     : RF");
        else if(Test=="SODIUM")
            p->write("\nTest Name     : SODIUM");
        else if(Test=="CHOLESTEROL")
            p->write("\nTest Name     : TCHO");
        else if(Test=="TOTAL PROTEIN")
            p->write("\nTest Name     : TP");
        else if(Test=="TOTAL_URINE(CSF)")
            p->write("\nTest Name     : TPU/CSF");
        else if(Test=="TIBC")
            p->write("\nTest Name     : TIBC");
        else if(Test=="TRIGLYCERIDES")
            p->write("\nTest Name     : TG");
        else if(Test=="UREA")
            p->write("\nTest Name     : UREA");
        else if(Test=="URIC ACID")
            p->write("\nTest Name     : URIC ACID");
        else if(Test=="ZINC")
            p->write("\nTest Name     : ZINC");
        else if(Test=="CHOLINESTERASE")
            p->write("\nTest Name     : CHOLIN");
        else if(Test=="COPPER")
            p->write("\nTest Name     : COPPER");
        else if(Test=="LITHIUM")
            p->write("\nTest Name     : LITHIUM");
        else if(Test=="TBA")
            p->write("\nTest Name     : TBA");
        else if(Test=="UIBC")
            p->write("\nTest Name     : UIBC");
        else if(Test=="GDH")
            p->write("\nTest Name     : GDH");

        else if(Test=="ZINC-S")
            p->write("\nTest Name     : ZINC-S");
        else if(Test=="MAGNESIUM(C)")
            p->write("\nTest Name     : MAGNESIUM(C)");
        else if(Test=="AST-S")
            p->write("\nTest Name     : AST-S");
        else if(Test=="ALT-S")
            p->write("\nTest Name     : ALT-S");
        else if(Test=="ALP-S")
            p->write("\nTest Name     : ALP-S");
        else if(Test=="BILIRUBIN TOTAL-S")
            p->write("\nTest Name     : TBIL-S");
        else if(Test=="CREATININE-S")
            p->write("\nTest Name     : CREATININE-S");
    }
    if (ui->label_70->text()!="-")
    {
        p->write("\nResult        : " + ui->label_70->text()+" ");
        if (unit_initdata == "Â")
        {
            p->write(character);
            p->write(unit_initdata2 + unit_initdata3 + unit_initdata4 +
                     unit_initdata5 + unit_initdata6 + unit_initdata7 + unit_initdata8);
        }
        else if (!ui->Unit_LE->text().isEmpty())
        {
            qDebug()<<"Unit IN";
            p->write(ui->Unit_LE->text());
        }
    }
    if (Below!="-" && Above!="-")
        p->write("\nNormal Range  : " + Below + " to " + Above);

    p->write("\nDate          : " + ui->His_Date_lbl->text());
    p->write("\nTime          : " + ui->His_Time_lbl->text());
    p->feed();
    p->feed();
    p->feed();
    p->feed();
    p->close();
    delete p;
    return 1;
}

void MainWindow::on_toolButton_51_clicked()
{
    QAbstractItemModel *model = ui->tableView_2->model();
    if (!model || model->rowCount() == 0)
    {
        qDebug() << "Table is empty or model is null.";
        return;
    }

    QModelIndex currentIndex = ui->tableView_2->currentIndex();
    int currentRow = currentIndex.isValid() ? currentIndex.row() : -1;

    // Check if it's the last row
    if (currentRow + 1 >= model->rowCount())
    {
        // Loop back to the first row
        QModelIndex firstIndex = model->index(0, 0); // First row, first column
        ui->tableView_2->setCurrentIndex(firstIndex);
        ui->tableView_2->selectionModel()->select(firstIndex, QItemSelectionModel::Select | QItemSelectionModel::Rows);
        qDebug() << "Looping back to the first row.";

        // Call the existing click handler
        on_tableView_2_clicked(firstIndex);
    }
    else
    {
        // Move to the next row
        int nextRow = currentRow + 1;
        QModelIndex nextIndex = model->index(nextRow, 0); // Select the first column of the next row
        ui->tableView_2->setCurrentIndex(nextIndex);
        ui->tableView_2->selectionModel()->select(nextIndex, QItemSelectionModel::Select | QItemSelectionModel::Rows);

        // Call the existing click handler
        on_tableView_2_clicked(nextIndex);
    }
}

void MainWindow::on_pushButton_17_clicked()
{

    int Sending_Data = 0;
    QSqlQuery qry;
    qry.prepare("select Sending_Results from LIS where sno=1");
    qry.exec();
    while(qry.next())
    {
        Sending_Data=qry.value(0).toInt(); // Individual Data (or) Grp Data send
    }
    qDebug()<<"Sending_data : "<<Sending_Data;

    std::string  Transfer_DT , Lab_name,Patient_ID,Patient_name,Patient_age,Patient_Gender,Testname,Test_DT,Result,Data_Testcode;
    QString clickval0,clickval1,clickval2,clickval3,clickval4,clickval5,clickval6,clickval7,clickval8,clickval9,clickval10,clickval11;
    QString System_date , System_Time;
    System_date = ui->SysDate_Lbl->text();
    System_Time = ui->SysTime_Lbl->text();
    clickval0=ui->label_44->text();         //PID
    clickval1=ui->PName_lineEdit->text();       //PName
    clickval2= ui->PAge_lineEdit->text();        //PAge
    clickval3=ui->label_86->text();     //PGender
    clickval4=ui->label_58->text();       //TName
    clickval5=ui->A_Rang->text();   //ANrmlrang
    clickval6= ui->B_Rang->text();   //BNrmlRang
    clickval7=ui->label_69->text();       //ODval
    clickval8=ui->label_70->text();    //ResultOD
    clickval9= ui->Unit_LE->text();       //Unit
    clickval10= ui->His_Date_lbl->text();       //Date
    clickval11= ui->His_Time_lbl->text();       //Time

    QString para_code;
    QSqlQuery qy;
    qy.prepare("select Pro_Code from test where name='"+clickval4+"'");
    qy.exec();
    while(qy.next())
        para_code=qy.value(0).toString();


    QByteArray ary;
    ary.append(clickval10);
    std::string  Test_Date,pos1,pos2,pos3,pos4,pos5,pos6,pos7,pos8;
    std::string Test_Date1;
    pos1=ary[0];
    pos2=ary[1];
    pos3=ary[2];
    pos4=ary[3];
    pos5=ary[7];
    pos6=ary[8];
    pos7=ary[12];
    pos8=ary[13];
    Test_Date = pos1+pos2+pos3+pos4+pos5+pos6+pos7+pos8;

    QByteArray ary1;
    ary1.append(clickval11);
    std::string Test_Time ,  post1,post2,post3,post4,post5,post6;
    post1=ary1[0];
    post2=ary1[1];
    post3=ary1[5];
    post4=ary1[6];
    post5=ary1[10];
    post6=ary1[11];
    Test_Time = post1+post2+post3+post4+post5+post6;

    QByteArray ary2;
    ary2.append(System_date);
    std::string Transfer_Date ,  posd1,posd2,posd3,posd4,posd5,posd6,posd7,posd8;
    posd1=ary2[0];
    posd2=ary2[1];
    posd3=ary2[2];
    posd4=ary2[3];
    posd5=ary2[7];
    posd6=ary2[8];
    posd7=ary2[12];
    posd8=ary2[13];
    Transfer_Date = posd1+posd2+posd3+posd4+posd5+posd6+posd7+posd8;

    QByteArray ary3;
    ary3.append(System_Time);
    std::string Transfer_Time ,  posti1,posti2,posti3,posti4,posti5,posti6;
    posti1=ary3[0];
    posti2=ary3[1];
    posti3=ary3[5];
    posti4=ary3[6];
    posti5=ary3[10];
    posti6=ary3[11];
    Transfer_Time = posti1+posti2+posti3+posti4+posti5+posti6;

    std::string data1 , data2 , data3, data4, data5,data6, data7, data8 ;
    data1 = Transfer_Date;
    data2 = Transfer_Time;
    data3 = clickval0.toStdString();
    data4 = clickval1.toStdString();
    data5 =  clickval2.toStdString();
    data6= clickval3.toStdString();
    data7= clickval4.toStdString();
    data8 = clickval8.toStdString();

    Transfer_DT = data1+data2;
    Patient_ID = data3;
    Patient_name = data4;
    Patient_age = data5;
    Patient_Gender = data6;
    Testname = data7;
    Test_DT = Test_Date+Test_Time;
    Result = data8;
    Data_Testcode = para_code.toStdString();

    std::string ResUnit , aNrmlRang , bNrmlrang;
    ResUnit = clickval9.toStdString();
    aNrmlRang = clickval5.toStdString();
    bNrmlrang = clickval6.toStdString();
    std::string G, A ;
    if(Patient_Gender == "Male")
        G="M";
    else if(Patient_Gender == "Female")
        G="F";
    else if(Patient_Gender == "Others")
        G="O";
    int page = clickval2.toInt();
    int Current_Year=QDate::currentDate().year();
    int year = Current_Year-page;
    QString Pa_Age = QString::number(year);
    QString Labb_name;
    QSqlQuery qrry;
    qrry.prepare("select Lab_name from Lab_details where sno=1");
    qrry.exec();
    while(qry.next())
        Labb_name= qrry.value(0).toString();

    std::string  Labname;
    Labname=Labb_name.toStdString();
    A = Pa_Age.toStdString();
    //std::string Encode = "|^~\&|";

    std::string hl7Message = "MSH|^~\\&|MCA-11|"+Labname+"|||"+Transfer_DT+"||ORU^R01|||2.3|||||\r"
                                                                           "PID|1|"+Patient_ID+"|||"+Patient_name+"||"+A+"|"+G+"|\r"
                                                                                                                               "OBR|1|"+Patient_ID+"|MCA-11||||"+Test_DT+"||||||||||||||\r"
                                                                                                                                                                         "OBX|1|NM|"+Data_Testcode+"^"+Testname+"||"+Result+"|"+ResUnit+"|"+bNrmlrang+"-"+aNrmlRang+"|||||||"+Test_DT+"||\r";
    QString IP , Port;
    QSqlQuery query;
    query.prepare("select Address1,Port from LIS where sno=1");
    query.exec();
    while (query.next())
    {
        IP = query.value(0).toString();
        Port = query.value(1).toString();
    }
    qDebug()<<"IP : "<<IP <<" "<<"Port : "<<Port<<"print";
    if(IP == "" && Port == "")
    {
        QMessageBox msg;
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif ;");
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setText("The ip-address & port number is empty, \n Please configure the correct ip-Address & port number");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
            ui->stackedWidget->setCurrentIndex(0);
        else
            ui->stackedWidget->setCurrentIndex(9);
    }
    else
    {
        if(LIS_data==0)
        {
            QMessageBox msg;
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif ;");
            QFont font;
            font.setBold(true);
            msg.setFont(font);
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("Check to see if there is a valid ip-address and port number");
            QPushButton* saveButton = msg.addButton("Already verified", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(214, 140, 50, 255), stop:1 rgba(255, 176, 64, 255));color:black;}QPushButton:pressed {background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(214, 140, 50, 255), stop:1 rgba(255, 176, 64, 255));color:white;}");
            QPushButton* dontSaveButton = msg.addButton("Ok", QMessageBox::DestructiveRole);
            dontSaveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91); color:black;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {
                LIS_data=1;
                std::string IPAddress , PortNumber;
                IPAddress = IP.toStdString();
                PortNumber =  Port.toStdString();
                sock->send_msg_mllp(hl7Message);
                isConnected = sock->isConnectedd();
                if (isConnected)
                {
                    QMessageBox msg;
                    msg.setWindowFlags(Qt::Popup);
                    msg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif ;");
                    QFont font;
                    font.setBold(true);
                    msg.setFont(font);
                    QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
                    auto newPixmap = p.scaled(80, 80);
                    msg.setIconPixmap(newPixmap);
                    msg.setText("Data was successfully transferred to the LIS server.");
                    QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                    saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                    msg.setDefaultButton(saveButton);
                    msg.exec();
                    if (msg.clickedButton() == saveButton)
                        ui->stackedWidget->setCurrentIndex(9);
                    else
                        ui->stackedWidget->setCurrentIndex(9);
                }
                else
                {
                    QMessageBox msg;
                    msg.setWindowFlags(Qt::Popup);
                    msg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif ;");
                    QFont font;
                    font.setBold(true);
                    msg.setFont(font);
                    QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
                    auto newPixmap = p.scaled(80, 80);
                    msg.setIconPixmap(newPixmap);
                    msg.setText("The LIS server is not connected");
                    QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                    saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                    msg.setDefaultButton(saveButton);
                    msg.exec();
                    if (msg.clickedButton() == saveButton)
                    {
                        LIS_connect_data=0;
                        ui->stackedWidget->setCurrentIndex(9);
                    }
                    else
                        ui->stackedWidget->setCurrentIndex(9);
                }
            }
            else if(msg.clickedButton() == dontSaveButton)
                ui->stackedWidget->setCurrentIndex(0);
            else
                ui->stackedWidget->setCurrentIndex(0);
        }
        else
        {
            std::string IPAddress , PortNumber;
            IPAddress = IP.toStdString();
            PortNumber =  Port.toStdString();
            sock->send_msg_mllp(hl7Message);
            qDebug()<<"connection status : "<<sock->isConnectedd();
            isConnected = sock->isConnectedd();
            if (isConnected)
            {

                QMessageBox msg;
                msg.setWindowFlags(Qt::Popup);
                msg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif ;");
                QFont font;
                font.setBold(true);
                msg.setFont(font);
                QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
                auto newPixmap = p.scaled(80, 80);
                msg.setIconPixmap(newPixmap);
                msg.setText("Data was sent successfully to the LIS server.");
                QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                msg.setDefaultButton(saveButton);
                msg.exec();
                if (msg.clickedButton() == saveButton)
                    ui->stackedWidget->setCurrentIndex(9);
                else
                    ui->stackedWidget->setCurrentIndex(9);
            }
            else
            {
                QMessageBox msg;
                msg.setWindowFlags(Qt::Popup);
                msg.setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif ;");
                QFont font;
                font.setBold(true);
                msg.setFont(font);
                QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
                auto newPixmap = p.scaled(80, 80);
                msg.setIconPixmap(newPixmap);
                msg.setText("The LIS server is not connected");
                QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
                saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
                msg.setDefaultButton(saveButton);
                msg.exec();
                if (msg.clickedButton() == saveButton)
                {
                    LIS_connect_data=0;
                    ui->stackedWidget->setCurrentIndex(9);
                }
                else
                    ui->stackedWidget->setCurrentIndex(9);
            }
        }
    }
}

void MainWindow::on_toolButton_52_clicked()
{
    QAbstractItemModel *model = ui->tableView_2->model();
    if (!model || model->rowCount() == 0)
    {
        qDebug() << "Table is empty or model is null.";
        return;
    }

    QModelIndex currentIndex = ui->tableView_2->currentIndex();
    int currentRow = currentIndex.isValid() ? currentIndex.row() : -1;

    // Check if it's the first row
    if (currentRow - 1 < 0)
    {
        // Loop back to the last row
        int lastRow = model->rowCount() - 1;
        QModelIndex lastIndex = model->index(lastRow, 0); // Last row, first column
        ui->tableView_2->setCurrentIndex(lastIndex);
        ui->tableView_2->selectionModel()->select(lastIndex, QItemSelectionModel::Select | QItemSelectionModel::Rows);
        qDebug() << "Looping back to the last row.";

        // Call the existing click handler
        on_tableView_2_clicked(lastIndex);
    }
    else
    {
        // Move to the previous row
        int previousRow = currentRow - 1;
        QModelIndex previousIndex = model->index(previousRow, 0); // Select the first column of the previous row
        ui->tableView_2->setCurrentIndex(previousIndex);
        ui->tableView_2->selectionModel()->select(previousIndex, QItemSelectionModel::Select | QItemSelectionModel::Rows);

        // Call the existing click handler
        on_tableView_2_clicked(previousIndex);
    }

}

void MainWindow::on_comboBox_19_currentTextChanged(const QString &arg1)
{
    Q_UNUSED(arg1);
    QString Serial = ui->label_44->text();
    QString Data =  ui->comboBox_19->currentText();
    QString gender;
    if (Data == "M")
    {
        gender = "Male";
    }
    else if (Data == "F") {
        gender = "Female";
    }
    else if (Data == "O") {
        gender = "Others";
    }
    else if (Data == "-")
    {
        gender = "-";
    }
    else {
        qDebug() << "Invalid gender option!";
        return;
    }

    ui->label_86->setText(gender);


    QSqlQuery query;
    query.prepare("UPDATE Reports SET PGender = :Data WHERE TRIM(PID) = :Serial");
    query.bindValue(":Data", gender.trimmed());
    query.bindValue(":Serial", Serial.trimmed());

    if (!query.exec()) {
        qDebug() << "Update failed:" << query.lastError().text();
    } else {
        qDebug() << "Update successful.";
        qDebug() << "Affected Rows:" << query.numRowsAffected();

        if (query.numRowsAffected() == 0) {
            qDebug() << "No rows matched the condition. Check the sno value.";
        }

        // Check the updated data
        QSqlQuery checkQuery;
        checkQuery.prepare("SELECT * FROM Reports WHERE PID = :Serial");
        checkQuery.bindValue(":Serial", Serial.trimmed());
        if (checkQuery.exec()) {
            if (checkQuery.next()) {
                qDebug() << "Row after update: Sno:" << checkQuery.value("PID").toString()
                         << "PGender:" << checkQuery.value("PGender").toString();
            } else {
                qDebug() << "No row found with sno = " << Serial;
            }
        } else {
            qDebug() << "Error fetching updated data:" << checkQuery.lastError().text();
        }

        // Create a new QSqlQueryModel
        // Create and prepare the query
        QSqlQueryModel * model = new QSqlQueryModel();
        QSqlQuery query(mydb);
        query.prepare("SELECT PID, PName, TName, Date, Time FROM Reports");

        // Execute the query
        if (!query.exec()) {
            qDebug() << "Query execution failed:" << query.lastError().text();
            return;
        }

        // Set the query result to the model
        model->setQuery(query);
        // Set custom headers
        model->setHeaderData(0, Qt::Horizontal, QObject::tr("Patient ID"));
        model->setHeaderData(1, Qt::Horizontal, QObject::tr("Name"));
        model->setHeaderData(2, Qt::Horizontal, QObject::tr("Parameter Name"));
        model->setHeaderData(3, Qt::Horizontal, QObject::tr("Date"));
        model->setHeaderData(4, Qt::Horizontal, QObject::tr("Time"));

        // Assign the model to the table views
        ui->tableView_2->setModel(model);

        QSqlQueryModel * modall = new QSqlQueryModel();
        QSqlQuery* qury=new QSqlQuery(mydb);
        qury->prepare("select PID,PName,PAge,PGender,TName,ANrmlRang,BNrmlRang,ODVal,ResultOD,Unit,Date,Time from Reports");
        qury->exec();
        modall->setQuery(*qury);
        modall->setHeaderData( 0, Qt::Horizontal, QObject::tr("Patient ID") );
        modall->setHeaderData( 1, Qt::Horizontal, QObject::tr("Name") );
        modall->setHeaderData( 2, Qt::Horizontal, QObject::tr("Age") );
        modall->setHeaderData( 3, Qt::Horizontal, QObject::tr("Gender") );
        modall->setHeaderData( 4, Qt::Horizontal, QObject::tr("Parameter name") );
        modall->setHeaderData( 5, Qt::Horizontal, QObject::tr("Normal range(Max)") );
        modall->setHeaderData( 6, Qt::Horizontal, QObject::tr("Normal range(Min)") );
        modall->setHeaderData( 7, Qt::Horizontal, QObject::tr("OD value") );
        modall->setHeaderData( 8, Qt::Horizontal, QObject::tr("Result OD") );
        modall->setHeaderData( 9, Qt::Horizontal, QObject::tr("Unit") );
        modall->setHeaderData( 10, Qt::Horizontal, QObject::tr("Date") );
        modall->setHeaderData( 11, Qt::Horizontal, QObject::tr("Time") );

        ui->tableView_5->setModel(modall);
        ui->tableView_2->resizeColumnsToContents() ;
        ui->tableView_5->resizeColumnsToContents();

    }

}

void MainWindow::on_toolButton_53_clicked()
{
    ui->stackedWidget_10->setCurrentIndex(0);
}

void MainWindow::on_checkBox_2_clicked()
{
    if(ui->checkBox_2->checkState() == Qt::Checked)
        With_G= 1;
    else if(ui->checkBox_2->checkState() == Qt::Unchecked)
        With_G= 0;
}

void MainWindow::on_pushButton_19_clicked()
{
    QString PID = ui->label_44->text();
    QSqlQuery query;
    query.prepare("Delete from Reports where PID='"+PID+"'");
    if(query.exec())
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        QFont font;
        font.setBold(true);
        msg.setFont(font);
        msg.setText("Data deleted.");
        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        if (msg.clickedButton() == saveButton)
        {
            // Create and prepare the query
            QSqlQueryModel * model = new QSqlQueryModel();
            QSqlQuery query(mydb);
            query.prepare("SELECT PID, PName, TName, Date, Time FROM Reports");

            // Execute the query
            if (!query.exec()) {
                qDebug() << "Query execution failed:" << query.lastError().text();
                return;
            }

            // Set the query result to the model
            model->setQuery(query);
            // Set custom headers
            model->setHeaderData(0, Qt::Horizontal, QObject::tr("Patient ID"));
            model->setHeaderData(1, Qt::Horizontal, QObject::tr("Name"));
            model->setHeaderData(2, Qt::Horizontal, QObject::tr("Parameter Name"));
            model->setHeaderData(3, Qt::Horizontal, QObject::tr("Date"));
            model->setHeaderData(4, Qt::Horizontal, QObject::tr("Time"));
            // Assign the model to the table views
            ui->tableView_2->setModel(model);
            QSqlQueryModel * modall = new QSqlQueryModel();
            QSqlQuery* qury=new QSqlQuery(mydb);
            qury->prepare("select PID,PName,PAge,PGender,TName,ANrmlRang,BNrmlRang,ODVal,ResultOD,Unit,Date,Time from Reports");
            qury->exec();
            modall->setQuery(*qury);
            modall->setHeaderData( 0, Qt::Horizontal, QObject::tr("Patient ID") );
            modall->setHeaderData( 1, Qt::Horizontal, QObject::tr("Name") );
            modall->setHeaderData( 2, Qt::Horizontal, QObject::tr("Age") );
            modall->setHeaderData( 3, Qt::Horizontal, QObject::tr("Gender") );
            modall->setHeaderData( 4, Qt::Horizontal, QObject::tr("Parameter name") );
            modall->setHeaderData( 5, Qt::Horizontal, QObject::tr("Normal range(Max)") );
            modall->setHeaderData( 6, Qt::Horizontal, QObject::tr("Normal range(Min)") );
            modall->setHeaderData( 7, Qt::Horizontal, QObject::tr("OD value") );
            modall->setHeaderData( 8, Qt::Horizontal, QObject::tr("Result OD") );
            modall->setHeaderData( 9, Qt::Horizontal, QObject::tr("Unit") );
            modall->setHeaderData( 10, Qt::Horizontal, QObject::tr("Date") );
            modall->setHeaderData( 11, Qt::Horizontal, QObject::tr("Time") );

            ui->tableView_5->setModel(modall);
            ui->tableView_2->resizeColumnsToContents() ;
            ui->tableView_5->resizeColumnsToContents();
            ui->frame_12->setVisible(false);
            ui->label_428->setVisible(false);
            ui->label_431->setVisible(false);
            ui->label_432->setVisible(false);
            ui->label_433->setVisible(false);
            ui->pushButton_294->setVisible(false);
            ui->pushButton_293->setVisible(false);
        }
    }
}

void MainWindow::on_pushButton_231_clicked()
{
    ui->pushButton_148->setVisible(false);
    ui->stackedWidget->setCurrentIndex(11);
}

void MainWindow::on_pushButton_151_clicked()
{
    qApp->processEvents();
    Internal=1;
    External=0;
    Pdefault=1;
    QString Baudrate = ui->comboBox_11->currentText();
    QString Databit = ui->comboBox_17->currentText();
    QString Parity = ui->comboBox_14->currentText();
    QString FlowControl = ui->comboBox_18->currentText();
    QSqlQuery qry;
    qry.prepare("UPDATE Printer SET BaudRate = ?, DataBits = ?, Parity = ?, FlowControl = ? WHERE sno = 1");
    qry.addBindValue(Baudrate);
    qry.addBindValue(Databit);
    qry.addBindValue(Parity);
    qry.addBindValue(FlowControl);

    if (qry.exec())
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt 'Liberation Serif';");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/check-mark.png");
        msg.setIconPixmap(p.scaled(80, 80));
        msg.setText("Data Updated.");

        QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
        saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
        msg.setDefaultButton(saveButton);
        msg.exec();
        ui->pushButton_276->setEnabled(false);
        ui->pushButton_16->setEnabled(true);
        ui->stackedWidget->setCurrentIndex(11);
    }
    else
    {
        QMessageBox::critical(this, "Error", "Failed to update data: " + qry.lastError().text());
    }
}

int MainWindow::on_toolButton_55_clicked()
{
    ui->toolButton_55->setDisabled(true);
    QString lab_name , lab_address , data;

    QSqlQuery qry;
    qry.prepare("SELECT Lab_name, Lab_address, Data FROM Lab_details WHERE sno = 1");

    if (qry.exec())
    {
        if (qry.first()) // Retrieves the first row (only one row expected)
        {
            lab_name = qry.value(0).toString();
            lab_address = qry.value(1).toString();
            data = qry.value(2).toString();
        }
        else
        {
            // Handle case where no data was returned
            qDebug() << "No data found for sno = 1.";
        }
    }
    else
    {
        // Handle query execution failure
        qDebug() << "Query failed: " << qry.lastError().text();
    }

    Printer *p = new Printer(ui, this);
    std::cout << "Trying to open port" << std::endl;
    bool res = p->open("/dev/ttyS0");
    std::cout << "Status: " << res << std::endl;
    if (!res) {
        std::cerr << "Error opening port, aborting" << std::endl;
        return (0);
    }

    qApp->processEvents();
    p->reset();
    /*uint8_t printData[] = {0x1B, 0x7B, 0x00}; // Example data
    p->write(printData, 3); // Send the reversed byte
    usleep(10000);          // Wait for command to take effect*/
    p->setAlign(Printer::MIDDLE);
    p->setBold(true);

    if(data=="1")
    {
        p->write(lab_name);
        p->write("\n"+lab_address);
        p->write("\n\n Test Report");
    }
    else if(data=="2")
        p->write("MCA-11 Test Report");

    p->setBold(false);
    p->feed();
    p->feed();
    p->setAlign(Printer::LEFT);
    p->write("Patient ID   : 12345");
    p->write("\nTest Name    : XXXX");
    p->write("\nResult       : YYYY" );
    p->write("\nDate         : "   +  ui->SysDate_Lbl->text());
    p->write("\nTime         : "   +  ui->SysTime_Lbl->text());
    p->feed();

    if(With_G == 1)
    {
        p->setAlign(Printer::MIDDLE);
        p->setBold(true);
        p->write("Graph");
        p->setBold(false);
        uint8_t printimg[] = {0x1D, 0x76, 0x30}; // Example data
        p->write(printimg, 3); // Send the reversed byte
        p->feed();
        p->feed();
        QString imagePath2 = "/home/pi/customplot.png";
        QImage image2 = loadImage(imagePath2);
        if(image2.isNull())
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 20pt Liberation Serif ;");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("Error loading image:"+imagePath2+"");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
                ui->stackedWidget->setCurrentIndex(14);
            else
                ui->stackedWidget->setCurrentIndex(14);
        }
        else
            p->printImage(image2,128);
    }
    p->feed();
    p->feed();
    p->feed();
    p->close();
    ui->toolButton_55->setDisabled(false);
    return 1;
}

void MainWindow::on_toolButton_56_clicked()
{
    ui->pushButton_148->setVisible(false);
    ui->stackedWidget->setCurrentIndex(10);
}

void MainWindow::on_checkBox_3_clicked()
{
    if(ui->checkBox_3->checkState() == Qt::Checked)
        With_G= 1;
    else if(ui->checkBox_3->checkState() == Qt::Unchecked)
        With_G= 0;
}


void MainWindow::on_pushButton_276_clicked()
{
    if(External==2)
    {
        qDebug()<<"External printer";
        QString Title;
        QSqlQuery qry;
        qry.prepare("select Lab_name from Lab_details where sno=1");
        qry.exec();
        while(qry.next())
            Title=qry.value(0).toString();

        const QString format("<td style=\"text-align: center;\">%1</td>");
        QAbstractItemModel *md = ui->tableView_5->model();
        QString html =
                "<div align=right>"
                "Date: "+ui->SysDate_Lbl->text()+"<br>"
                                                 "Time: "+ui->SysTime_Lbl->text()+"<br>"
                                                                                  "</div>"
                                                                                  "<h3 style=\"text-align: center;\">" + Title + " Test Report</h3><br>"
                                                                                                                                 "<html><body><table border=\"1\" style=\"border-collapse: collapse;\">";
        // Create the table header
        html += "<tr>";
        html += "<th></th>"; // Empty cell for the top-left corner
        for (int column = 0; column < md->columnCount(); column++) {
            QString data = md->headerData(column, Qt::Horizontal, Qt::DisplayRole).toString();
            html += format.arg(data);
        }
        html += "</tr>";

        // Create table rows and cells
        for (int row = 0; row < md->rowCount(); row++) {
            html += "<tr>";
            QString rowHeader = md->headerData(row, Qt::Vertical, Qt::DisplayRole).toString();
            html += format.arg(rowHeader);
            for (int column = 0; column < md->columnCount(); column++) {
                QString data = md->index(row, column).data(Qt::DisplayRole).toString();
                html += format.arg(data);
            }
            html += "</tr>";
        }

        html += "</table></body></html>";


        QTextDocument document;
        document.setHtml(html);
        QPrinter printer;
        QString Printername,Type,Papersize;
        QSqlQuery qy;
        qy.prepare("select Name,Type,Papersize from Printer where sno=1");
        qy.exec();
        while(qy.next())
        {
            Printername= qy.value(0).toString();
            Type= qy.value(1).toString();
            Papersize=qy.value(2).toString();
        }
        printer.setPrinterName(Printername);
        if(Papersize == "A3 (29.7cm x 42.0cm)")
            printer.setPaperSize(QPrinter::A3);
        else if(Papersize == "A4 (21.0cm x 29.7cm)")
            printer.setPaperSize(QPrinter::A4);
        else if(Papersize == "A5 (14.8cm x 21.0cm)")
            printer.setPaperSize(QPrinter::A5);
        else if(Papersize == "A6 (10.5cm x 14.8cm)")
            printer.setPaperSize(QPrinter::A6);
        else if(Papersize == "Letter ( 21.59cm x 27.94cm)")
            printer.setPaperSize(QPrinter::Letter);
        else if(Papersize == "Legal (21.59cm x 35.56cm)")
            printer.setPaperSize(QPrinter::Legal);
        printer.setResolution(300);
        if(Type == "Portrait")
            printer.setOrientation(QPrinter::Portrait);
        else if(Type == "Landscape")
            printer.setOrientation(QPrinter::Landscape);
        if(printer.isValid())
        {
            document.print(&printer);
        }
        else
        {
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("background-color:#a0cdfa;font: 75 16pt Liberation Serif ;");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setText("Printer is unavailable or invalid.");
            QPushButton* saveButton = msg.addButton("Ok", QMessageBox::AcceptRole);
            saveButton->setStyleSheet("QPushButton{background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 #34ba91, stop: 0.5 #34ba91, stop: 1 #34ba91);color:black;}QPushButton:pressed {background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop: 0 rgb(0, 85, 0), stop: 0.5 rgb(0, 85, 0), stop: 1 rgb(0, 85, 0));color:white;}");
            msg.setDefaultButton(saveButton);
            msg.exec();
            if (msg.clickedButton() == saveButton)
            {
                qDebug()<<"";
            }
            else
                qDebug()<<"";
        }
    }
    else
    {
        qDebug()<<"Internal Printer";
    }
}

void MainWindow::on_Home_Btn_25_clicked()
{
    if(backdata==1)
    {
        ui->stackedWidget_9->setCurrentIndex(0);

        backdata=0;
    }
    else
    {
        ui->stackedWidget->setCurrentIndex(2);
        ui->comboBox->setEnabled(true);
        ui->Retest_5->setEnabled(true);
        readtimer->stop();
        ui->Stop_Btn->setDisabled(true);
        ui->Home_Btn_3->setVisible(true);
        ui->Home_Btn_3->setEnabled(true);
        ui->RunBlank_Btn->setDisabled(false);
        ui->RunCal_Btn->setDisabled(false);
        ui->RunCal_Btn_2->setDisabled(false);
        ui->RunSample_Btn->setEnabled(true);
        ui->RunSample_Btn_2->setEnabled(true);
        ui->E_QC_Check->setEnabled(true);
        ui->TP_QC_Check->setEnabled(true);
        if(option==10)
        {
            if(Calreteststop==1)
            {
                ui->Retest->setEnabled(true);
                ui->Retest_3->setDisabled(true);
                ui->Retest_4->setDisabled(true);
                qDebug()<<"Retest Visible...";
                Calreteststop=0;
            }

            // endpoint recal

        }
        else if(option==15)
        {
            if(QCreteststop==1)
            {
                ui->Retest->setDisabled(true);
                ui->Retest_3->setEnabled(true);
                ui->Retest_4->setDisabled(true);
                qDebug()<<"Retest_3 Visible...";
                QCreteststop=0;
            }
        }
        else if(option==11)
        {
            if(Samplereteststop==1)
            {
                ui->Retest->setDisabled(true);
                ui->Retest_3->setDisabled(true);
                ui->Retest_4->setEnabled(true);
                qDebug()<<"Retest_4 Visible...";
                Samplereteststop=0;
            }
        }

        ui->comboBox->setEnabled(true);
        ui->Retest_5->setEnabled(true);
        chk=0;
    }
}

void MainWindow::on_toolButton_57_clicked()
{
    ui->Stop_Btn_3->setDisabled(false);
    ui->toolButton_57->setDisabled(true);
    ui->toolButton_61->setDisabled(true);
    ui->toolButton_63->setDisabled(true);
    ui->toolButton_58->setDisabled(true);
    ui->toolButton_60->setDisabled(true);
    ui->toolButton_64->setDisabled(true);
    ui->toolButton_59->setDisabled(true);
    ui->toolButton_62->setDisabled(true);
    ui->toolButton_39->setDisabled(true);
    ui->toolButton_40->setDisabled(true);
    ui->Retest_6->setDisabled(true);
    ui->Home_Btn_25->setDisabled(true);

    chk=1;
    cal_retest=1;
    multi_cal1=1;
    ui->label_350->setText("CALIBRATE 1");
    QString Rctn;
    double con1=0;
    QSqlQuery queryy;
    queryy.prepare("select * from test where name='"+TestName+"'");
    queryy.exec();
    while(queryy.next())
    {
        Rctn=queryy.value(3).toString();
        con1=queryy.value(18).toDouble();
    }
    conct=con1;
    if(Rctn == "End point" )
    {
        option=2;
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        total_read_point=5;
        current_end_read_point=0;
    }
    else if(Rctn == "Fixed Kinetic" )
    {
        option=5;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    else if(Rctn == "Kinetic" )
    {
        option=8;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    Pro_Code_Check();
    // conditioncheck();
}

void MainWindow::on_toolButton_61_clicked()
{
    ui->Stop_Btn_3->setDisabled(false);
    ui->toolButton_57->setDisabled(true);
    ui->toolButton_61->setDisabled(true);
    ui->toolButton_63->setDisabled(true);
    ui->toolButton_58->setDisabled(true);
    ui->toolButton_60->setDisabled(true);
    ui->toolButton_64->setDisabled(true);
    ui->toolButton_59->setDisabled(true);
    ui->toolButton_62->setDisabled(true);
    ui->toolButton_39->setDisabled(true);
    ui->toolButton_40->setDisabled(true);
    ui->Retest_6->setDisabled(true);
    ui->Home_Btn_25->setDisabled(true);
    chk=1;
    cal_retest=2;
    multi_cal1=2;
    ui->label_350->setText("CALIBRATE 2");
    QString Rctn;
    double con2=0;
    QSqlQuery queryy;
    queryy.prepare("select * from test where name='"+TestName+"'");
    queryy.exec();
    while(queryy.next())
    {
        con2=queryy.value(19).toDouble();
        Rctn=queryy.value(3).toString();
    }
    conct=con2;
    if(Rctn == "End point" )
    {
        option=2;
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        total_read_point=5;
        current_end_read_point=0;
    }
    else if(Rctn == "Fixed Kinetic" )
    {
        option=5;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    else if(Rctn == "Kinetic" )
    {
        option=8;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    Pro_Code_Check();
    // conditioncheck();
}

void MainWindow::on_toolButton_63_clicked()
{
    ui->Stop_Btn_3->setDisabled(false);
    ui->toolButton_57->setDisabled(true);
    ui->toolButton_61->setDisabled(true);
    ui->toolButton_63->setDisabled(true);
    ui->toolButton_58->setDisabled(true);
    ui->toolButton_60->setDisabled(true);
    ui->toolButton_64->setDisabled(true);
    ui->toolButton_59->setDisabled(true);
    ui->toolButton_62->setDisabled(true);
    ui->toolButton_39->setDisabled(true);
    ui->toolButton_40->setDisabled(true);
    ui->Retest_6->setDisabled(true);
    ui->Home_Btn_25->setDisabled(true);
    chk=1;
    cal_retest=3;
    multi_cal1=3;
    ui->label_350->setText("CALIBRATE 3");
    QString Rctn;
    double con3=0;
    QSqlQuery queryy;
    queryy.prepare("select * from test where name='"+TestName+"'");
    queryy.exec();
    while(queryy.next())
    {
        con3=queryy.value(20).toDouble();
        Rctn=queryy.value(3).toString();
    }
    conct=con3;
    if(Rctn == "End point" )
    {
        option=2;
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        total_read_point=5;
        current_end_read_point=0;
    }
    else if(Rctn == "Fixed Kinetic" )
    {
        option=5;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    else if(Rctn == "Kinetic" )
    {
        option=8;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    Pro_Code_Check();
    // conditioncheck();
}

void MainWindow::on_toolButton_58_clicked()
{
    ui->Stop_Btn_3->setDisabled(false);
    ui->toolButton_57->setDisabled(true);
    ui->toolButton_61->setDisabled(true);
    ui->toolButton_63->setDisabled(true);
    ui->toolButton_58->setDisabled(true);
    ui->toolButton_60->setDisabled(true);
    ui->toolButton_64->setDisabled(true);
    ui->toolButton_59->setDisabled(true);
    ui->toolButton_62->setDisabled(true);
    ui->toolButton_39->setDisabled(true);
    ui->toolButton_40->setDisabled(true);
    ui->Retest_6->setDisabled(true);
    ui->Home_Btn_25->setDisabled(true);
    chk=1;
    cal_retest=4;
    multi_cal1=4;
    ui->label_350->setText("CALIBRATE 4");
    QString Rctn;
    double con4=0;
    QSqlQuery queryy;
    queryy.prepare("select * from test where name='"+TestName+"'");
    queryy.exec();
    while(queryy.next())
    {
        con4=queryy.value(21).toDouble();
        Rctn=queryy.value(3).toString();
    }
    conct=con4;
    if(Rctn == "End point" )
    {
        option=2;
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        total_read_point=5;
        current_end_read_point=0;
    }
    else if(Rctn == "Fixed Kinetic" )
    {
        option=5;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    else if(Rctn == "Kinetic" )
    {
        option=8;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    Pro_Code_Check();
    // conditioncheck();
}

void MainWindow::on_toolButton_60_clicked()
{
    ui->Stop_Btn_3->setDisabled(false);
    ui->toolButton_57->setDisabled(true);
    ui->toolButton_61->setDisabled(true);
    ui->toolButton_63->setDisabled(true);
    ui->toolButton_58->setDisabled(true);
    ui->toolButton_60->setDisabled(true);
    ui->toolButton_64->setDisabled(true);
    ui->toolButton_59->setDisabled(true);
    ui->toolButton_62->setDisabled(true);
    ui->toolButton_39->setDisabled(true);
    ui->toolButton_40->setDisabled(true);
    ui->Retest_6->setDisabled(true);
    ui->Home_Btn_25->setDisabled(true);
    chk=1;
    cal_retest=5;
    multi_cal1=5;
    ui->label_350->setText("CALIBRATE 5");
    QString Rctn;
    double con5=0;
    QSqlQuery queryy;
    queryy.prepare("select * from test where name='"+TestName+"'");
    queryy.exec();
    while(queryy.next())
    {
        con5=queryy.value(22).toDouble();
        Rctn=queryy.value(3).toString();
    }
    conct=con5;
    if(Rctn == "End point" )
    {
        option=2;
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        total_read_point=5;
        current_end_read_point=0;
    }
    else if(Rctn == "Fixed Kinetic" )
    {
        option=5;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    else if(Rctn == "Kinetic" )
    {
        option=8;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    Pro_Code_Check();
    // conditioncheck();
}

void MainWindow::on_toolButton_64_clicked()
{
    ui->Stop_Btn_3->setDisabled(false);
    ui->toolButton_57->setDisabled(true);
    ui->toolButton_61->setDisabled(true);
    ui->toolButton_63->setDisabled(true);
    ui->toolButton_58->setDisabled(true);
    ui->toolButton_60->setDisabled(true);
    ui->toolButton_64->setDisabled(true);
    ui->toolButton_59->setDisabled(true);
    ui->toolButton_62->setDisabled(true);
    ui->toolButton_39->setDisabled(true);
    ui->toolButton_40->setDisabled(true);
    ui->Retest_6->setDisabled(true);
    ui->Home_Btn_25->setDisabled(true);
    chk=1;
    cal_retest=6;
    multi_cal1=6;
    ui->label_350->setText("CALIBRATE 6");
    QString Rctn;
    double con6=0;
    QSqlQuery queryy;
    queryy.prepare("select * from test where name='"+TestName+"'");
    queryy.exec();
    while(queryy.next())
    {
        con6=queryy.value(23).toDouble();
        Rctn=queryy.value(3).toString();
    }
    conct=con6;
    if(Rctn == "End point" )
    {
        option=2;
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        total_read_point=5;
        current_end_read_point=0;
    }
    else if(Rctn == "Fixed Kinetic" )
    {
        option=5;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    else if(Rctn == "Kinetic" )
    {
        option=8;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    Pro_Code_Check();
    // conditioncheck();
}

void MainWindow::on_toolButton_59_clicked()
{
    ui->Stop_Btn_3->setDisabled(false);
    ui->toolButton_57->setDisabled(true);
    ui->toolButton_61->setDisabled(true);
    ui->toolButton_63->setDisabled(true);
    ui->toolButton_58->setDisabled(true);
    ui->toolButton_60->setDisabled(true);
    ui->toolButton_64->setDisabled(true);
    ui->toolButton_59->setDisabled(true);
    ui->toolButton_62->setDisabled(true);
    ui->toolButton_39->setDisabled(true);
    ui->toolButton_40->setDisabled(true);
    ui->Retest_6->setDisabled(true);
    ui->Home_Btn_25->setDisabled(true);
    chk=1;
    cal_retest=7;
    multi_cal1=7;
    ui->label_350->setText("CALIBRATE 7");
    QString Rctn;
    double con7=0;
    QSqlQuery queryy;
    queryy.prepare("select * from test where name='"+TestName+"'");
    queryy.exec();
    while(queryy.next())
    {
        Rctn=queryy.value(3).toString();
        con7=queryy.value(24).toDouble();
    }
    conct=con7;
    if(Rctn == "End point" )
    {
        option=2;
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        total_read_point=5;
        current_end_read_point=0;
    }
    else if(Rctn == "Fixed Kinetic" )
    {
        option=5;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    else if(Rctn == "Kinetic" )
    {
        option=8;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    Pro_Code_Check();
    // conditioncheck();
}

void MainWindow::on_toolButton_62_clicked()
{
    ui->Stop_Btn_3->setDisabled(false);
    ui->toolButton_57->setDisabled(true);
    ui->toolButton_61->setDisabled(true);
    ui->toolButton_63->setDisabled(true);
    ui->toolButton_58->setDisabled(true);
    ui->toolButton_60->setDisabled(true);
    ui->toolButton_64->setDisabled(true);
    ui->toolButton_59->setDisabled(true);
    ui->toolButton_62->setDisabled(true);
    ui->toolButton_39->setDisabled(true);
    ui->toolButton_40->setDisabled(true);
    ui->Retest_6->setDisabled(true);
    ui->Home_Btn_25->setDisabled(true);
    chk=1;
    cal_retest=8;
    multi_cal1=8;
    ui->label_350->setText("CALIBRATE 8");
    QString Rctn;
    double con8=0;
    QSqlQuery queryy;
    queryy.prepare("select * from test where name='"+TestName+"'");
    queryy.exec();
    while(queryy.next())
    {
        Rctn=queryy.value(3).toString();
        con8=queryy.value(25).toDouble();
    }
    conct=con8;
    if(Rctn == "End point" )
    {
        option=2;
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        total_read_point=5;
        current_end_read_point=0;
    }
    else if(Rctn == "Fixed Kinetic" )
    {
        option=5;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    else if(Rctn == "Kinetic" )
    {
        option=8;
        ui->label_166->clear();
        ui->label_167->clear();
        ui->label_168->clear();
        ui->label_169->clear();
        ui->label_170->clear();
        ui->label_171->clear();
        ui->label_346->clear();
        ui->label_347->clear();
        ui->label_348->clear();
        ui->label_173->clear();
        ui->label_175->clear();
        ui->label_177->clear();
        ui->Conc_lbl->clear();
        ui->Abs_lbl->clear();
        ui->Fact_lbl->clear();
        current_read_point=0;
    }
    Pro_Code_Check();
    // conditioncheck();
}

void MainWindow::on_toolButton_65_clicked()
{
    //Retest
    ui->Stop_Btn_3->setDisabled(false);
    ui->toolButton_40->setDisabled(true);
    double con1=0;
    QSqlQuery queryy;
    queryy.prepare("select * from test where name='"+TestName+"'");
    queryy.exec();


    if(cal_retest==1)
    {

        while(queryy.next())
        {
            con1=queryy.value(18).toDouble();
        }
        conct=con1;
        on_Retest_clicked();
    }
    else if(cal_retest==2)
    {
        while(queryy.next())
        {
            con1=queryy.value(19).toDouble();
        }
        conct=con1;
        on_Retest_clicked();
    }
    else if(cal_retest==3)
    {
        while(queryy.next())
        {
            con1=queryy.value(20).toDouble();
        }
        conct=con1;
        on_Retest_clicked();
    }
    else if(cal_retest==4)
    {
        while(queryy.next())
        {
            con1=queryy.value(21).toDouble();
        }
        conct=con1;
        on_Retest_clicked();
    }

    else if(cal_retest==5)
    {
        while(queryy.next())
        {
            con1=queryy.value(22).toDouble();
        }
        conct=con1;
        on_Retest_clicked();
    }

    else if(cal_retest==6)
    {
        while(queryy.next())
        {
            con1=queryy.value(23).toDouble();
        }
        conct=con1;
        on_Retest_clicked();
    }

    else if(cal_retest==7)
    {
        while(queryy.next())
        {
            con1=queryy.value(24).toDouble();
        }
        conct=con1;
        on_Retest_clicked();
    }

    else if(cal_retest==8)
    {
        while(queryy.next())
        {
            con1=queryy.value(25).toDouble();
        }
        conct=con1;
        on_Retest_clicked();
    }

}

void MainWindow::on_toolButton_66_clicked()
{
    backdata=1;
    ui->stackedWidget->setCurrentIndex(30);

    ui->stackedWidget_12->setCurrentIndex(1);

    QSqlQuery qy;
    QString Conc1,Conc2,Conc3,Conc4,Conc5,Conc6,Conc7,Conc8;
    QString Abs1,Abs2,Abs3,Abs4,Abs5,Abs6,Abs7,Abs8;
    QString Fact1,Fact2,Fact3,Fact4,Fact5,Fact6,Fact7,Fact8;
    QByteArray Conc,Abs,Fact;
    int nostd=0;
    QSqlQuery qyy;
    qyy.prepare("select * from test where name='"+TestName+"'");
    qyy.exec();
    while(qyy.next())
    {
        nostd=qyy.value(16).toInt();

        Conc1=qyy.value(18).toString();
        Conc2=qyy.value(19).toString();
        Conc3=qyy.value(20).toString();
        Conc4=qyy.value(21).toString();
        Conc5=qyy.value(22).toString();
        Conc6=qyy.value(23).toString();
        Conc7=qyy.value(24).toString();
        Conc8=qyy.value(25).toString();

        Abs1=qyy.value(41).toString();
        Abs2=qyy.value(42).toString();
        Abs3=qyy.value(43).toString();
        Abs4=qyy.value(44).toString();
        Abs5=qyy.value(45).toString();
        Abs6=qyy.value(46).toString();
        Abs7=qyy.value(47).toString();
        Abs8=qyy.value(48).toString();

        Fact1=qyy.value(49).toString();
        Fact2=qyy.value(50).toString();
        Fact3=qyy.value(51).toString();
        Fact4=qyy.value(52).toString();
        Fact5=qyy.value(53).toString();
        Fact6=qyy.value(54).toString();
        Fact7=qyy.value(55).toString();
        Fact8=qyy.value(56).toString();
    }
    qDebug()<<"No.of Cal : "<<nostd;

    ui->Conc_lbl_1->setText(Conc1);
    ui->Conc_lbl_2->setText(Conc2);
    ui->Conc_lbl_3->setText(Conc3);
    ui->Conc_lbl_4->setText(Conc4);
    ui->Conc_lbl_5->setText(Conc5);
    ui->Conc_lbl_6->setText(Conc6);
    ui->Conc_lbl_7->setText(Conc7);
    ui->Conc_lbl_8->setText(Conc8);

    ui->Abs_lbl_1->setText(Abs1);
    ui->Abs_lbl_2->setText(Abs2);
    ui->Abs_lbl_3->setText(Abs3);
    ui->Abs_lbl_4->setText(Abs4);
    ui->Abs_lbl_5->setText(Abs5);
    ui->Abs_lbl_6->setText(Abs6);
    ui->Abs_lbl_7->setText(Abs7);
    ui->Abs_lbl_8->setText(Abs8);

    ui->Factor_lbl_1->setText(Fact1);
    ui->Factor_lbl_2->setText(Fact2);
    ui->Factor_lbl_3->setText(Fact3);
    ui->Factor_lbl_4->setText(Fact4);
    ui->Factor_lbl_5->setText(Fact5);
    ui->Factor_lbl_6->setText(Fact6);
    ui->Factor_lbl_7->setText(Fact7);
    ui->Factor_lbl_8->setText(Fact8);

    double x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0,x8=0;
    double y1=0,y2=0,y3=0,y4=0,y5=0,y6=0,y7=0,y8=0;

    x1=ui->Conc_lbl_1->text().toDouble();
    x2=ui->Conc_lbl_2->text().toDouble();
    x3=ui->Conc_lbl_3->text().toDouble();
    x4=ui->Conc_lbl_4->text().toDouble();
    x5=ui->Conc_lbl_5->text().toDouble();
    x6=ui->Conc_lbl_6->text().toDouble();
    x7=ui->Conc_lbl_7->text().toDouble();
    x8=ui->Conc_lbl_8->text().toDouble();

    y1=ui->Abs_lbl_1->text().toDouble();
    y2=ui->Abs_lbl_2->text().toDouble();
    y3=ui->Abs_lbl_3->text().toDouble();
    y4=ui->Abs_lbl_4->text().toDouble();
    y5=ui->Abs_lbl_5->text().toDouble();
    y6=ui->Abs_lbl_6->text().toDouble();
    y7=ui->Abs_lbl_7->text().toDouble();
    y8=ui->Abs_lbl_8->text().toDouble();

    double fact1=0,fact2=0,fact3=0,fact4=0,fact5=0,fact6=0,fact7=0,fact8=0;
    fact1=x1/y1;
    fact2=x2/y2;
    fact3=x3/y3;
    fact4=x4/y4;
    fact5=x5/y5;
    fact6=x6/y6;
    fact7=x7/y7;
    fact8=x8/y8;

    if(fact1>=100)
        ui->Factor_lbl_1->setText(QString::number(fact1,'f',0));
    else if(fact1<100)
        ui->Factor_lbl_1->setText(QString::number(fact1,'f',2));

    if(fact2>=100)
        ui->Factor_lbl_2->setText(QString::number(fact2,'f',0));
    else if(fact2<100)
        ui->Factor_lbl_2->setText(QString::number(fact2,'f',2));

    if(fact3>=100)
        ui->Factor_lbl_3->setText(QString::number(fact3,'f',0));
    else if(fact3<100)
        ui->Factor_lbl_3->setText(QString::number(fact3,'f',2));

    if(fact4>=100)
        ui->Factor_lbl_4->setText(QString::number(fact4,'f',0));
    else if(fact4<100)
        ui->Factor_lbl_4->setText(QString::number(fact4,'f',2));

    if(fact5>=100)
        ui->Factor_lbl_5->setText(QString::number(fact5,'f',0));
    else if(fact5<100)
        ui->Factor_lbl_5->setText(QString::number(fact5,'f',2));

    if(fact6>=100)
        ui->Factor_lbl_6->setText(QString::number(fact6,'f',0));
    else if(fact6<100)
        ui->Factor_lbl_6->setText(QString::number(fact6,'f',2));

    if(fact7>=100)
        ui->Factor_lbl_7->setText(QString::number(fact7,'f',0));
    else if(fact7<100)
        ui->Factor_lbl_7->setText(QString::number(fact7,'f',2));

    if(fact8>=100)
        ui->Factor_lbl_8->setText(QString::number(fact8,'f',0));
    else if(fact8<100)
        ui->Factor_lbl_8->setText(QString::number(fact8,'f',2));

    Multical_plot();

    if(nostd==1)
    {
        ui->Sno_lbl_1->setText("1.");
        ui->Sno_lbl_2->clear();
        ui->Sno_lbl_3->clear();
        ui->Sno_lbl_4->clear();
        ui->Sno_lbl_5->clear();
        ui->Sno_lbl_6->clear();
        ui->Sno_lbl_7->clear();
        ui->Sno_lbl_8->clear();

        ui->Sno_lbl_1->setVisible(true);
        ui->Sno_lbl_2->setVisible(false);
        ui->Sno_lbl_3->setVisible(false);
        ui->Sno_lbl_4->setVisible(false);
        ui->Sno_lbl_5->setVisible(false);
        ui->Sno_lbl_6->setVisible(false);
        ui->Sno_lbl_7->setVisible(false);
        ui->Sno_lbl_8->setVisible(false);

        ui->Conc_lbl_1->setVisible(true);
        ui->Conc_lbl_2->setVisible(false);
        ui->Conc_lbl_3->setVisible(false);
        ui->Conc_lbl_4->setVisible(false);
        ui->Conc_lbl_5->setVisible(false);
        ui->Conc_lbl_6->setVisible(false);
        ui->Conc_lbl_7->setVisible(false);
        ui->Conc_lbl_8->setVisible(false);

        ui->Abs_lbl_1->setVisible(true);
        ui->Abs_lbl_2->setVisible(false);
        ui->Abs_lbl_3->setVisible(false);
        ui->Abs_lbl_4->setVisible(false);
        ui->Abs_lbl_5->setVisible(false);
        ui->Abs_lbl_6->setVisible(false);
        ui->Abs_lbl_7->setVisible(false);
        ui->Abs_lbl_8->setVisible(false);

        ui->Factor_lbl_1->setVisible(true);
        ui->Factor_lbl_2->setVisible(false);
        ui->Factor_lbl_3->setVisible(false);
        ui->Factor_lbl_4->setVisible(false);
        ui->Factor_lbl_5->setVisible(false);
        ui->Factor_lbl_6->setVisible(false);
        ui->Factor_lbl_7->setVisible(false);
        ui->Factor_lbl_8->setVisible(false);
    }
    else if (nostd==2)
    {
        ui->Sno_lbl_1->setText("1.");
        ui->Sno_lbl_2->setText("2.");
        ui->Sno_lbl_3->clear();
        ui->Sno_lbl_4->clear();
        ui->Sno_lbl_5->clear();
        ui->Sno_lbl_6->clear();
        ui->Sno_lbl_7->clear();
        ui->Sno_lbl_8->clear();

        ui->Sno_lbl_1->setVisible(true);
        ui->Sno_lbl_2->setVisible(true);
        ui->Sno_lbl_3->setVisible(false);
        ui->Sno_lbl_4->setVisible(false);
        ui->Sno_lbl_5->setVisible(false);
        ui->Sno_lbl_6->setVisible(false);
        ui->Sno_lbl_7->setVisible(false);
        ui->Sno_lbl_8->setVisible(false);

        ui->Conc_lbl_1->setVisible(true);
        ui->Conc_lbl_2->setVisible(true);
        ui->Conc_lbl_3->setVisible(false);
        ui->Conc_lbl_4->setVisible(false);
        ui->Conc_lbl_5->setVisible(false);
        ui->Conc_lbl_6->setVisible(false);
        ui->Conc_lbl_7->setVisible(false);
        ui->Conc_lbl_8->setVisible(false);

        ui->Abs_lbl_1->setVisible(true);
        ui->Abs_lbl_2->setVisible(true);
        ui->Abs_lbl_3->setVisible(false);
        ui->Abs_lbl_4->setVisible(false);
        ui->Abs_lbl_5->setVisible(false);
        ui->Abs_lbl_6->setVisible(false);
        ui->Abs_lbl_7->setVisible(false);
        ui->Abs_lbl_8->setVisible(false);

        ui->Factor_lbl_1->setVisible(true);
        ui->Factor_lbl_2->setVisible(true);
        ui->Factor_lbl_3->setVisible(false);
        ui->Factor_lbl_4->setVisible(false);
        ui->Factor_lbl_5->setVisible(false);
        ui->Factor_lbl_6->setVisible(false);
        ui->Factor_lbl_7->setVisible(false);
        ui->Factor_lbl_8->setVisible(false);

    }
    else if (nostd==3)
    {
        ui->Sno_lbl_1->setText("1.");
        ui->Sno_lbl_2->setText("2.");
        ui->Sno_lbl_3->setText("3.");
        ui->Sno_lbl_4->clear();
        ui->Sno_lbl_5->clear();
        ui->Sno_lbl_6->clear();
        ui->Sno_lbl_7->clear();
        ui->Sno_lbl_8->clear();

        ui->Sno_lbl_1->setVisible(true);
        ui->Sno_lbl_2->setVisible(true);
        ui->Sno_lbl_3->setVisible(true);
        ui->Sno_lbl_4->setVisible(false);
        ui->Sno_lbl_5->setVisible(false);
        ui->Sno_lbl_6->setVisible(false);
        ui->Sno_lbl_7->setVisible(false);
        ui->Sno_lbl_8->setVisible(false);

        ui->Conc_lbl_1->setVisible(true);
        ui->Conc_lbl_2->setVisible(true);
        ui->Conc_lbl_3->setVisible(true);
        ui->Conc_lbl_4->setVisible(false);
        ui->Conc_lbl_5->setVisible(false);
        ui->Conc_lbl_6->setVisible(false);
        ui->Conc_lbl_7->setVisible(false);
        ui->Conc_lbl_8->setVisible(false);

        ui->Abs_lbl_1->setVisible(true);
        ui->Abs_lbl_2->setVisible(true);
        ui->Abs_lbl_3->setVisible(true);
        ui->Abs_lbl_4->setVisible(false);
        ui->Abs_lbl_5->setVisible(false);
        ui->Abs_lbl_6->setVisible(false);
        ui->Abs_lbl_7->setVisible(false);
        ui->Abs_lbl_8->setVisible(false);

        ui->Factor_lbl_1->setVisible(true);
        ui->Factor_lbl_2->setVisible(true);
        ui->Factor_lbl_3->setVisible(true);
        ui->Factor_lbl_4->setVisible(false);
        ui->Factor_lbl_5->setVisible(false);
        ui->Factor_lbl_6->setVisible(false);
        ui->Factor_lbl_7->setVisible(false);
        ui->Factor_lbl_8->setVisible(false);

    }
    else if (nostd==4)
    {
        ui->Sno_lbl_1->setText("1.");
        ui->Sno_lbl_2->setText("2.");
        ui->Sno_lbl_3->setText("3.");
        ui->Sno_lbl_4->setText("4.");

        ui->Sno_lbl_5->clear();
        ui->Sno_lbl_6->clear();
        ui->Sno_lbl_7->clear();
        ui->Sno_lbl_8->clear();

        ui->Sno_lbl_1->setVisible(true);
        ui->Sno_lbl_2->setVisible(true);
        ui->Sno_lbl_3->setVisible(true);
        ui->Sno_lbl_4->setVisible(true);
        ui->Sno_lbl_5->setVisible(false);
        ui->Sno_lbl_6->setVisible(false);
        ui->Sno_lbl_7->setVisible(false);
        ui->Sno_lbl_8->setVisible(false);

        ui->Conc_lbl_1->setVisible(true);
        ui->Conc_lbl_2->setVisible(true);
        ui->Conc_lbl_3->setVisible(true);
        ui->Conc_lbl_4->setVisible(true);
        ui->Conc_lbl_5->setVisible(false);
        ui->Conc_lbl_6->setVisible(false);
        ui->Conc_lbl_7->setVisible(false);
        ui->Conc_lbl_8->setVisible(false);

        ui->Abs_lbl_1->setVisible(true);
        ui->Abs_lbl_2->setVisible(true);
        ui->Abs_lbl_3->setVisible(true);
        ui->Abs_lbl_4->setVisible(true);
        ui->Abs_lbl_5->setVisible(false);
        ui->Abs_lbl_6->setVisible(false);
        ui->Abs_lbl_7->setVisible(false);
        ui->Abs_lbl_8->setVisible(false);

        ui->Factor_lbl_1->setVisible(true);
        ui->Factor_lbl_2->setVisible(true);
        ui->Factor_lbl_3->setVisible(true);
        ui->Factor_lbl_4->setVisible(true);
        ui->Factor_lbl_5->setVisible(false);
        ui->Factor_lbl_6->setVisible(false);
        ui->Factor_lbl_7->setVisible(false);
        ui->Factor_lbl_8->setVisible(false);

    }
    else if (nostd==5)
    {
        ui->Sno_lbl_1->setText("1.");
        ui->Sno_lbl_2->setText("2.");
        ui->Sno_lbl_3->setText("3.");
        ui->Sno_lbl_4->setText("4.");
        ui->Sno_lbl_5->setText("5.");
        ui->Sno_lbl_6->clear();
        ui->Sno_lbl_7->clear();
        ui->Sno_lbl_8->clear();

        ui->Sno_lbl_1->setVisible(true);
        ui->Sno_lbl_2->setVisible(true);
        ui->Sno_lbl_3->setVisible(true);
        ui->Sno_lbl_4->setVisible(true);
        ui->Sno_lbl_5->setVisible(true);
        ui->Sno_lbl_6->setVisible(false);
        ui->Sno_lbl_7->setVisible(false);
        ui->Sno_lbl_8->setVisible(false);

        ui->Conc_lbl_1->setVisible(true);
        ui->Conc_lbl_2->setVisible(true);
        ui->Conc_lbl_3->setVisible(true);
        ui->Conc_lbl_4->setVisible(true);
        ui->Conc_lbl_5->setVisible(true);
        ui->Conc_lbl_6->setVisible(false);
        ui->Conc_lbl_7->setVisible(false);
        ui->Conc_lbl_8->setVisible(false);

        ui->Abs_lbl_1->setVisible(true);
        ui->Abs_lbl_2->setVisible(true);
        ui->Abs_lbl_3->setVisible(true);
        ui->Abs_lbl_4->setVisible(true);
        ui->Abs_lbl_5->setVisible(true);
        ui->Abs_lbl_6->setVisible(false);
        ui->Abs_lbl_7->setVisible(false);
        ui->Abs_lbl_8->setVisible(false);

        ui->Factor_lbl_1->setVisible(true);
        ui->Factor_lbl_2->setVisible(true);
        ui->Factor_lbl_3->setVisible(true);
        ui->Factor_lbl_4->setVisible(true);
        ui->Factor_lbl_5->setVisible(true);
        ui->Factor_lbl_6->setVisible(false);
        ui->Factor_lbl_7->setVisible(false);
        ui->Factor_lbl_8->setVisible(false);

    }
    else if (nostd==6)
    {
        ui->Sno_lbl_1->setText("1.");
        ui->Sno_lbl_2->setText("2.");
        ui->Sno_lbl_3->setText("3.");
        ui->Sno_lbl_4->setText("4.");
        ui->Sno_lbl_5->setText("5.");
        ui->Sno_lbl_6->setText("6.");
        ui->Sno_lbl_7->clear();
        ui->Sno_lbl_8->clear();
        ui->Sno_lbl_1->setVisible(true);
        ui->Sno_lbl_2->setVisible(true);
        ui->Sno_lbl_3->setVisible(true);
        ui->Sno_lbl_4->setVisible(true);
        ui->Sno_lbl_5->setVisible(true);
        ui->Sno_lbl_6->setVisible(true);
        ui->Sno_lbl_7->setVisible(false);
        ui->Sno_lbl_8->setVisible(false);

        ui->Conc_lbl_1->setVisible(true);
        ui->Conc_lbl_2->setVisible(true);
        ui->Conc_lbl_3->setVisible(true);
        ui->Conc_lbl_4->setVisible(true);
        ui->Conc_lbl_5->setVisible(true);
        ui->Conc_lbl_6->setVisible(true);
        ui->Conc_lbl_7->setVisible(false);
        ui->Conc_lbl_8->setVisible(false);

        ui->Abs_lbl_1->setVisible(true);
        ui->Abs_lbl_2->setVisible(true);
        ui->Abs_lbl_3->setVisible(true);
        ui->Abs_lbl_4->setVisible(true);
        ui->Abs_lbl_5->setVisible(true);
        ui->Abs_lbl_6->setVisible(true);
        ui->Abs_lbl_7->setVisible(false);
        ui->Abs_lbl_8->setVisible(false);

        ui->Factor_lbl_1->setVisible(true);
        ui->Factor_lbl_2->setVisible(true);
        ui->Factor_lbl_3->setVisible(true);
        ui->Factor_lbl_4->setVisible(true);
        ui->Factor_lbl_5->setVisible(true);
        ui->Factor_lbl_6->setVisible(true);
        ui->Factor_lbl_7->setVisible(false);
        ui->Factor_lbl_8->setVisible(false);

    }
    else if (nostd==7)
    {
        ui->Sno_lbl_1->setText("1.");
        ui->Sno_lbl_2->setText("2.");
        ui->Sno_lbl_3->setText("3.");
        ui->Sno_lbl_4->setText("4.");
        ui->Sno_lbl_5->setText("5.");
        ui->Sno_lbl_6->setText("6.");
        ui->Sno_lbl_7->setText("7.");
        ui->Sno_lbl_8->clear();

        ui->Sno_lbl_1->setVisible(true);
        ui->Sno_lbl_2->setVisible(true);
        ui->Sno_lbl_3->setVisible(true);
        ui->Sno_lbl_4->setVisible(true);
        ui->Sno_lbl_5->setVisible(true);
        ui->Sno_lbl_6->setVisible(true);
        ui->Sno_lbl_7->setVisible(true);
        ui->Sno_lbl_8->setVisible(false);

        ui->Conc_lbl_1->setVisible(true);
        ui->Conc_lbl_2->setVisible(true);
        ui->Conc_lbl_3->setVisible(true);
        ui->Conc_lbl_4->setVisible(true);
        ui->Conc_lbl_5->setVisible(true);
        ui->Conc_lbl_6->setVisible(true);
        ui->Conc_lbl_7->setVisible(true);
        ui->Conc_lbl_8->setVisible(false);

        ui->Abs_lbl_1->setVisible(true);
        ui->Abs_lbl_2->setVisible(true);
        ui->Abs_lbl_3->setVisible(true);
        ui->Abs_lbl_4->setVisible(true);
        ui->Abs_lbl_5->setVisible(true);
        ui->Abs_lbl_6->setVisible(true);
        ui->Abs_lbl_7->setVisible(true);
        ui->Abs_lbl_8->setVisible(false);

        ui->Factor_lbl_1->setVisible(true);
        ui->Factor_lbl_2->setVisible(true);
        ui->Factor_lbl_3->setVisible(true);
        ui->Factor_lbl_4->setVisible(true);
        ui->Factor_lbl_5->setVisible(true);
        ui->Factor_lbl_6->setVisible(true);
        ui->Factor_lbl_7->setVisible(true);
        ui->Factor_lbl_8->setVisible(false);

    }
    else if (nostd==8)
    {
        ui->Sno_lbl_1->setText("1.");
        ui->Sno_lbl_2->setText("2.");
        ui->Sno_lbl_3->setText("3.");
        ui->Sno_lbl_4->setText("4.");
        ui->Sno_lbl_5->setText("5.");
        ui->Sno_lbl_6->setText("6.");
        ui->Sno_lbl_7->setText("7.");
        ui->Sno_lbl_8->setText("8.");

        ui->Sno_lbl_1->setVisible(true);
        ui->Sno_lbl_2->setVisible(true);
        ui->Sno_lbl_3->setVisible(true);
        ui->Sno_lbl_4->setVisible(true);
        ui->Sno_lbl_5->setVisible(true);
        ui->Sno_lbl_6->setVisible(true);
        ui->Sno_lbl_7->setVisible(true);
        ui->Sno_lbl_8->setVisible(true);

        ui->Conc_lbl_1->setVisible(true);
        ui->Conc_lbl_2->setVisible(true);
        ui->Conc_lbl_3->setVisible(true);
        ui->Conc_lbl_4->setVisible(true);
        ui->Conc_lbl_5->setVisible(true);
        ui->Conc_lbl_6->setVisible(true);
        ui->Conc_lbl_7->setVisible(true);
        ui->Conc_lbl_8->setVisible(true);

        ui->Abs_lbl_1->setVisible(true);
        ui->Abs_lbl_2->setVisible(true);
        ui->Abs_lbl_3->setVisible(true);
        ui->Abs_lbl_4->setVisible(true);
        ui->Abs_lbl_5->setVisible(true);
        ui->Abs_lbl_6->setVisible(true);
        ui->Abs_lbl_7->setVisible(true);
        ui->Abs_lbl_8->setVisible(true);

        ui->Factor_lbl_1->setVisible(true);
        ui->Factor_lbl_2->setVisible(true);
        ui->Factor_lbl_3->setVisible(true);
        ui->Factor_lbl_4->setVisible(true);
        ui->Factor_lbl_5->setVisible(true);
        ui->Factor_lbl_6->setVisible(true);
        ui->Factor_lbl_7->setVisible(true);
        ui->Factor_lbl_8->setVisible(true);
    }
}

void MainWindow::Multical_plot()
{
    double x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0,x8=0;
    double y1=0,y2=0,y3=0,y4=0,y5=0,y6=0,y7=0,y8=0;

    // int Nocal=0;
    QSqlQuery qy;
    qy.prepare("select * from test where name='"+TestName+"'");
    qy.exec();
    while(qy.next())
    {
        //  Nocal=qy.value(16).toInt();
        x1=qy.value(18).toDouble();
        x2=qy.value(19).toDouble();
        x3=qy.value(20).toDouble();
        x4=qy.value(21).toDouble();
        x5=qy.value(22).toDouble();
        x6=qy.value(23).toDouble();
        x7=qy.value(24).toDouble();
        x8=qy.value(25).toDouble();

        y1=qy.value(41).toDouble();
        y2=qy.value(42).toDouble();
        y3=qy.value(43).toDouble();
        y4=qy.value(44).toDouble();
        y5=qy.value(45).toDouble();
        y6=qy.value(46).toDouble();
        y7=qy.value(47).toDouble();
        y8=qy.value(48).toDouble();
    }
    qDebug()<<"x1 : "<<x1<<"x2 : "<<x2<<"x3 : "<<x3<<"x4 : "<<x4<<"x5 : "<<x5<<"x6 : "<<x6<<"x7 : "<<x7<<"x8 : "<<x8;
    QVector<double> qv_x1,qv_x2,qv_x3,qv_x4,qv_x5,qv_x6,qv_x7,qv_x8;
    QVector<double> qv_y1,qv_y2,qv_y3,qv_y4,qv_y5,qv_y6,qv_y7,qv_y8;
    qv_x1.append(x1);
    qv_y1.append(y1);

    qv_x2.append(x1);qv_x2.append(x2);
    qv_y2.append(y1);qv_y2.append(y2);

    qv_x3.append(x1);qv_x3.append(x2);qv_x3.append(x3);
    qv_y3.append(y1);qv_y3.append(y2);qv_y3.append(y3);

    qv_x4.append(x1);qv_x4.append(x2);qv_x4.append(x3);qv_x4.append(x4);
    qv_y4.append(y1);qv_y4.append(y2);qv_y4.append(y3);qv_y4.append(y4);

    qv_x5.append(x1);qv_x5.append(x2);qv_x5.append(x3);qv_x5.append(x4);qv_x5.append(x5);
    qv_y5.append(y1);qv_y5.append(y2);qv_y5.append(y3);qv_y5.append(y4);qv_y5.append(y5);

    qv_x6.append(x1);qv_x6.append(x2);qv_x6.append(x3);qv_x6.append(x4);qv_x6.append(x5);qv_x6.append(x6);
    qv_y6.append(y1);qv_y6.append(y2);qv_y6.append(y3);qv_y6.append(y4);qv_y6.append(y5);qv_y6.append(y6);

    qv_x7.append(x1);qv_x7.append(x2);qv_x7.append(x3);qv_x7.append(x4);qv_x7.append(x5);qv_x7.append(x6);qv_x7.append(x7);
    qv_y7.append(y1);qv_y7.append(y2);qv_y7.append(y3);qv_y7.append(y4);qv_y7.append(y5);qv_y7.append(y6);qv_y7.append(y7);

    qv_x8.append(x1);qv_x8.append(x2);qv_x8.append(x3);qv_x8.append(x4);qv_x8.append(x5);qv_x8.append(x6);qv_x8.append(x7);qv_x7.append(x8);
    qv_y8.append(y1);qv_y8.append(y2);qv_y8.append(y3);qv_y8.append(y4);qv_y8.append(y5);qv_y8.append(y6);qv_y8.append(y7);qv_y7.append(y8);

    QVector<double> xv1(1);
    QVector<double> yv1(1);
    QVector<double> xv2(1);
    QVector<double> yv2(1);
    QVector<double> xv3(1);
    QVector<double> yv3(1);
    QVector<double> xv4(1);
    QVector<double> yv4(1);

    ui->customPlot_5->addGraph();
    ui->customPlot_5->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
    ui->customPlot_5->graph(0)->setLineStyle(QCPGraph::lsLine);

    if(multi_cal1==1)
    {
        ui->customPlot_5->graph(0)->setData(qv_x1, qv_y1);
        ui->customPlot_5->xAxis->setRange(0, x1+50);
        ui->customPlot_5->yAxis->setRange(-0.2, y1+0.2);
    }
    else if(multi_cal1==2)
    {
        ui->customPlot_5->graph(0)->setData(qv_x2, qv_y2);
        ui->customPlot_5->xAxis->setRange(0, x2+50);
        ui->customPlot_5->yAxis->setRange(-0.2, y2+0.2);
    }
    else if(multi_cal1==3)
    {
        ui->customPlot_5->graph(0)->setData(qv_x3, qv_y3);
        ui->customPlot_5->xAxis->setRange(0, x3+50);
        ui->customPlot_5->yAxis->setRange(-0.2, y3+0.2);
    }
    else if(multi_cal1==4)
    {
        ui->customPlot_5->graph(0)->setData(qv_x4, qv_y4);
        ui->customPlot_5->xAxis->setRange(0, x4+50);
        ui->customPlot_5->yAxis->setRange(-0.2, y4+0.2);
    }
    else if(multi_cal1==5)
    {
        ui->customPlot_5->graph(0)->setData(qv_x5, qv_y5);
        ui->customPlot_5->xAxis->setRange(0, x5+50);
        ui->customPlot_5->yAxis->setRange(-0.2, y5+0.2);
    }
    else if(multi_cal1==6)
    {
        ui->customPlot_5->graph(0)->setData(qv_x6, qv_y6);
        ui->customPlot_5->xAxis->setRange(0, x6+50);
        ui->customPlot_5->yAxis->setRange(-0.2, y6+0.2);
    }
    else if(multi_cal1==7)
    {
        ui->customPlot_5->graph(0)->setData(qv_x7, qv_y7);
        ui->customPlot_5->xAxis->setRange(0, x7+50);
        ui->customPlot_5->yAxis->setRange(-0.2, y7+0.2);
    }
    else if(multi_cal1==8)
    {
        ui->customPlot_5->graph(0)->setData(qv_x8, qv_y8);
        ui->customPlot_5->xAxis->setRange(0, x8+50);
        ui->customPlot_5->yAxis->setRange(-0.2, y8+0.2);
    }

    qDebug()<<"Data";
    if(multi_cal1==1 || multi_cal1==2 ||multi_cal1==3 ||multi_cal1==4 ||multi_cal1==5 ||multi_cal1==6 ||multi_cal1==7 ||multi_cal1==8)
        ui->toolButton_42->setVisible(false);
    else
    {
        clearGraph_multical();
        ui->toolButton_42->setVisible(true);
    }

    ui->customPlot_5->xAxis->setLabel("Concentration");
    ui->customPlot_5->yAxis->setLabel("Absorbance");
    ui->customPlot_5->update();
    ui->customPlot_5->replot();

}

void MainWindow::linearity()
{
    double x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0,x8=0;
    double y1=0,y2=0,y3=0,y4=0,y5=0,y6=0,y7=0,y8=0;
    QString No_std,Mode;
    QSqlQuery qy;
    qy.prepare("select * from test where name='"+TestName+"'");
    qy.exec();
    while(qy.next())
    {
        No_std=qy.value(16).toString();
        Mode=qy.value(15).toString();
        x1=qy.value(18).toDouble();
        x2=qy.value(19).toDouble();
        x3=qy.value(20).toDouble();
        x4=qy.value(21).toDouble();
        x5=qy.value(22).toDouble();
        x6=qy.value(23).toDouble();
        x7=qy.value(24).toDouble();
        x8=qy.value(25).toDouble();

        y1=qy.value(41).toDouble();
        y2=qy.value(42).toDouble();
        y3=qy.value(43).toDouble();
        y4=qy.value(44).toDouble();
        y5=qy.value(45).toDouble();
        y6=qy.value(46).toDouble();
        y7=qy.value(47).toDouble();
        y8=qy.value(48).toDouble();
    }

    double fact1=0,fact2=0,fact3=0,fact4=0,fact5=0,fact6=0,fact7=0,fact8=0;
    fact1=x1/y1;
    fact2=x2/y2;
    fact3=x3/y3;
    fact4=x4/y4;
    fact5=x5/y5;
    fact6=x6/y6;
    fact7=x7/y7;
    fact8=x8/y8;



    if(fact2>=100)
        ui->Factor_lbl_2->setText(QString::number(fact2,'f',0));
    else if(fact2<100)
        ui->Factor_lbl_2->setText(QString::number(fact2,'f',2));

    if(fact3>=100)
        ui->Factor_lbl_3->setText(QString::number(fact3,'f',0));
    else if(fact3<100)
        ui->Factor_lbl_3->setText(QString::number(fact3,'f',2));

    if(fact4>=100)
        ui->Factor_lbl_4->setText(QString::number(fact4,'f',0));
    else if(fact4<100)
        ui->Factor_lbl_4->setText(QString::number(fact4,'f',2));

    if(fact5>=100)
        ui->Factor_lbl_5->setText(QString::number(fact5,'f',0));
    else if(fact5<100)
        ui->Factor_lbl_5->setText(QString::number(fact5,'f',2));

    if(fact6>=100)
        ui->Factor_lbl_6->setText(QString::number(fact6,'f',0));
    else if(fact6<100)
        ui->Factor_lbl_6->setText(QString::number(fact6,'f',2));

    if(fact7>=100)
        ui->Factor_lbl_7->setText(QString::number(fact7,'f',0));
    else if(fact7<100)
        ui->Factor_lbl_7->setText(QString::number(fact7,'f',2));

    if(fact8>=100)
        ui->Factor_lbl_8->setText(QString::number(fact8,'f',0));
    else if(fact8<100)
        ui->Factor_lbl_8->setText(QString::number(fact8,'f',2));

    double slope=0, intercept=0,Data=0;
    if(option==3 || option==11) //End sample, Retest
        Data = ui->label_6->text().toDouble();
    else if(option==12 || option==15) //End QC, Retest
        Data = ui->label_228->text().toDouble();
    else if(option==6)  //Two sample
        Data = ui->label_119->text().toDouble();
    else if(option==13 || option==14) //Two QC , Kinetic QC
        Data = ui->label_234->text().toDouble();
    else if(option==9)  //Kinetic sample
        Data = ui->label_204->text().toDouble();

    qDebug()<<"x1 : "<<x1<<"x2 : "<<x2<<"x3 : "<<x3<<"x4 : "<<x4<<"x5 : "<<x5<<"x6 : "<<x6<<"x7 : "<<x7<<"x8 : "<<x8
           <<"y1 : "<<y1<<"y2 : "<<y2<<"y3 : "<<y3<<"y4 : "<<y4<<"y5 : "<<y5<<"y6 : "<<y6<<"y7 : "<<y7<<"y8 : "<<y8
          <<"Data : "<<Data;
    QSqlQuery qyy;
    if(Mode=="Increasing")
    {
        if(No_std==1 || No_std==2)
        {
            if(Data<y1)
            {
                slope = (y1-0)/(x1-0);
                intercept = 0-(slope*0);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");

                qDebug()<<"result range (Data >= y1 && Data <= y2):"<<result;

            }
            else if (Data >= y1) // set 2 (110-170)
            {
                slope = (y2-y1)/(x2-x1);
                intercept = y1-(slope*x1);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");

                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
                qDebug()<<"result range (Data >= y1 && Data <= y2):"<<result;
            }
        }

        else if(No_std==3)
        {
            if(Data<y1)
            {
                slope = (y1-0)/(x1-0);
                intercept = 0-(slope*0);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;

                qDebug()<<"result range (Data >= y1 && Data <= y2):"<<result;

            }
            else if (Data>=y1 && Data < y2) // set 2 (110-170)
            {
                slope = (y2-y1)/(x2-x1);
                intercept = y1-(slope*x1);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
                qDebug()<<"result range (Data >= y1 && Data <= y2):"<<result;
            }
            else if (Data >= y2 ) // set 2 (110-170)
            {
                slope = (y3-y2)/(x3-x2);
                intercept = y2-(slope*x2);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope2='"+QString::number(slope)+"',Intercept2='"+QString::number(intercept)+"',Result2='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',2));
                }
                qDebug()<<"slp2 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
                qDebug()<<"result range (Data >= y2 && Data <= y3):"<<result;
            }
        }
        else if(No_std==4)
        {
            if(Data<y1)
            {
                slope = (y1-0)/(x1-0);
                intercept = 0-(slope*0);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;

                qDebug()<<"result range (Data >= y1 && Data <= y2):"<<result;

            }
            else if ( Data>=y1 && Data < y2) // set 2 (110-170)
            {
                slope = (y2-y1)/(x2-x1);
                intercept = y1-(slope*x1);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y2 && Data < y3) // set 2 (110-170)
            {
                slope = (y3-y2)/(x3-x2);
                intercept = y2-(slope*x2);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope2='"+QString::number(slope)+"',Intercept2='"+QString::number(intercept)+"',Result2='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',2));
                }
                qDebug()<<"slp2 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y3) //set 3 (170-220)
            {
                slope = (y4-y3)/(x4-x3);
                intercept = y3-(slope*x3);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope3='"+QString::number(slope)+"',Intercept3='"+QString::number(intercept)+"',Result3='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',2));
                }
                qDebug()<<"slp3 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
        }
        else if(No_std==5)
        {
            if(Data<y1)
            {
                slope = (y1-0)/(x1-0);
                intercept = 0-(slope*0);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;

                qDebug()<<"result range (Data >= y1 && Data <= y2):"<<result;

            }
            else if ( Data >=y1 && Data < y2) // set 2 (110-170)
            {
                slope = (y2-y1)/(x2-x1);
                intercept = y1-(slope*x1);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y2 && Data < y3) // set 2 (110-170)
            {
                slope = (y3-y2)/(x3-x2);
                intercept = y2-(slope*x2);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope2='"+QString::number(slope)+"',Intercept2='"+QString::number(intercept)+"',Result2='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',2));
                }
                qDebug()<<"slp2 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y3 && Data < y4) //set 3 (170-220)
            {
                slope = (y4-y3)/(x4-x3);
                intercept = y3-(slope*x3);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope3='"+QString::number(slope)+"',Intercept3='"+QString::number(intercept)+"',Result3='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',2));
                }
                qDebug()<<"slp3 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y4) //set 4 (220-280)
            {
                slope = (y5-y4)/(x5-x4);
                intercept = y4-(slope*x4);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope4='"+QString::number(slope)+"',Intercept4='"+QString::number(intercept)+"',Result4='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',2));
                }
                qDebug()<<"slp4 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
        }
        else if(No_std==6)
        {
            if(Data<y1)
            {
                slope = (y1-0)/(x1-0);
                intercept = 0-(slope*0);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;

                qDebug()<<"result range (Data >= y1 && Data <= y2):"<<result;

            }
            else if ( Data >=y1 && Data < y2) // set 2 (110-170)
            {
                slope = (y2-y1)/(x2-x1);
                intercept = y1-(slope*x1);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y2 && Data < y3) // set 2 (110-170)
            {
                slope = (y3-y2)/(x3-x2);
                intercept = y2-(slope*x2);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope2='"+QString::number(slope)+"',Intercept2='"+QString::number(intercept)+"',Result2='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',2));
                }
                qDebug()<<"slp2 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y3 && Data < y4) //set 3 (170-220)
            {
                slope = (y4-y3)/(x4-x3);
                intercept = y3-(slope*x3);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope3='"+QString::number(slope)+"',Intercept3='"+QString::number(intercept)+"',Result3='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',2));
                }
                qDebug()<<"slp3 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y4 && Data < y5) //set 4 (220-280)
            {
                slope = (y5-y4)/(x5-x4);
                intercept = y4-(slope*x4);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope4='"+QString::number(slope)+"',Intercept4='"+QString::number(intercept)+"',Result4='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',2));
                }
                qDebug()<<"slp4 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y5) //set 4 (220-280)
            {
                slope = (y6-y5)/(x6-x5);
                intercept = y5-(slope*x5);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope5='"+QString::number(slope)+"',Intercept5='"+QString::number(intercept)+"',Result5='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',2));
                }
                qDebug()<<"slp5 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
        }
        else if(No_std==7)
        {
            if(Data<y1)
            {
                slope = (y1-0)/(x1-0);
                intercept = 0-(slope*0);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;

                qDebug()<<"result range (Data >= y1 && Data <= y2):"<<result;

            }
            else if ( Data >=y1 && Data < y2) // set 2 (110-170)
            {
                slope = (y2-y1)/(x2-x1);
                intercept = y1-(slope*x1);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y2 && Data < y3) // set 2 (110-170)
            {
                slope = (y3-y2)/(x3-x2);
                intercept = y2-(slope*x2);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope2='"+QString::number(slope)+"',Intercept2='"+QString::number(intercept)+"',Result2='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',2));
                }
                qDebug()<<"slp2 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y3 && Data < y4) //set 3 (170-220)
            {
                slope = (y4-y3)/(x4-x3);
                intercept = y3-(slope*x3);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope3='"+QString::number(slope)+"',Intercept3='"+QString::number(intercept)+"',Result3='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',2));
                }
                qDebug()<<"slp3 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y4 && Data < y5) //set 4 (220-280)
            {
                slope = (y5-y4)/(x5-x4);
                intercept = y4-(slope*x4);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope4='"+QString::number(slope)+"',Intercept4='"+QString::number(intercept)+"',Result4='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',2));
                }
                qDebug()<<"slp4 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y5 && Data < y6) //set 4 (220-280)
            {
                slope = (y6-y5)/(x6-x5);
                intercept = y5-(slope*x5);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope5='"+QString::number(slope)+"',Intercept5='"+QString::number(intercept)+"',Result5='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',2));
                }
                qDebug()<<"slp5 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y6) //set 4 (220-280)
            {
                slope = (y7-y6)/(x7-x6);
                intercept = y6-(slope*x6);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope6='"+QString::number(slope)+"',Intercept6='"+QString::number(intercept)+"',Result6='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact6,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact6,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact6,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact6,'f',2));
                }
                qDebug()<<"slp :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
        }
        else if(No_std==8)
        {
            if(Data<y1)
            {
                slope = (y1-0)/(x1-0);
                intercept = 0-(slope*0);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;

                qDebug()<<"result range (Data >= y1 && Data <= y2):"<<result;

            }
            else if ( Data >=y1 && Data < y2) // set 2 (110-170)
            {
                slope = (y2-y1)/(x2-x1);
                intercept = y1-(slope*x1);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y2 && Data < y3) // set 2 (110-170)
            {
                slope = (y3-y2)/(x3-x2);
                intercept = y2-(slope*x2);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope2='"+QString::number(slope)+"',Intercept2='"+QString::number(intercept)+"',Result2='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',2));
                }
                qDebug()<<"slp2 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y3 && Data < y4) //set 3 (170-220)
            {
                slope = (y4-y3)/(x4-x3);
                intercept = y3-(slope*x3);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope3='"+QString::number(slope)+"',Intercept3='"+QString::number(intercept)+"',Result3='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',2));
                }
                qDebug()<<"slp3 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y4 && Data < y5) //set 4 (220-280)
            {
                slope = (y5-y4)/(x5-x4);
                intercept = y4-(slope*x4);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope4='"+QString::number(slope)+"',Intercept4='"+QString::number(intercept)+"',Result4='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',2));
                }
                qDebug()<<"slp4 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y5 && Data < y6) //set 4 (220-280)
            {
                slope = (y6-y5)/(x6-x5);
                intercept = y5-(slope*x5);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope5='"+QString::number(slope)+"',Intercept5='"+QString::number(intercept)+"',Result5='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',2));
                }
                qDebug()<<"slp5 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y6 && Data < y7) //set 4 (220-280)
            {
                slope = (y7-y6)/(x7-x6);
                intercept = y6-(slope*x6);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope6='"+QString::number(slope)+"',Intercept6='"+QString::number(intercept)+"',Result6='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact6,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact6,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact6,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact6,'f',2));
                }
                qDebug()<<"slp :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y7) //set 4 (220-280)
            {
                slope = (y8-y7)/(x8-x7);
                intercept = y7-(slope*x7);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope7='"+QString::number(slope)+"',Intercept7='"+QString::number(intercept)+"',Result7='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact7,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact7,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact7,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact7,'f',2));
                }
                qDebug()<<"slp :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
        }
    }
    else if(Mode=="Decreasing")
    {
        if(No_std==1 || No_std==2)
        {
            if (Data >= y2) // set 2 (110-170)
            {
                slope = (y2-y1)/(x2-x1);
                intercept = y1-(slope*x1);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if(Data < y2)
            {
                slope = (0-y2)/(0-x2);
                intercept = 0-(slope*0);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
        }
        else if(No_std==3)
        {
            if (Data >= y2) // set 2 (110-170)
            {
                slope = (y2-y1)/(x2-x1);
                intercept = y1-(slope*x1);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >=y3 && Data < y2) // set 2 (110-170)
            {
                slope = (y3-y2)/(x3-x2);
                intercept = y2-(slope*x2);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope2='"+QString::number(slope)+"',Intercept2='"+QString::number(intercept)+"',Result2='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
                qDebug()<<"result range (Data >= y1 && Data <= y2):"<<result;
            }
            else if(Data < y3)
            {
                slope = (0-y3)/(0-x3);
                intercept = 0-(slope*0);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope2='"+QString::number(slope)+"',Intercept2='"+QString::number(intercept)+"',Result2='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
                qDebug()<<"result range (Data >= y1 && Data <= y2):"<<result;
            }
        }
        else if(No_std==4)
        {
            if ( Data >= y2) // set 2 (110-170)
            {
                slope = (y2-y1)/(x2-x1);
                intercept = y1-(slope*x1);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y3 && Data < y2) // set 2 (110-170)
            {
                slope = (y3-y2)/(x3-x2);
                intercept = y2-(slope*x2);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope2='"+QString::number(slope)+"',Intercept2='"+QString::number(intercept)+"',Result2='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',2));
                }
                qDebug()<<"slp2 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data>=y4 && Data < y3) //set 3 (170-220)
            {
                slope = (y4-y3)/(x4-x3);
                intercept = y3-(slope*x3);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope3='"+QString::number(slope)+"',Intercept3='"+QString::number(intercept)+"',Result3='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',2));
                }
                qDebug()<<"slp3 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data < y4) //set 3 (170-220)
            {
                slope = (0-y4)/(0-x4);
                intercept = 0-(slope*0);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope3='"+QString::number(slope)+"',Intercept3='"+QString::number(intercept)+"',Result3='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',2));
                }
                qDebug()<<"slp3 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }

        }
        else if(No_std==5)
        {
            if ( Data >= y2) // set 2 (110-170)
            {
                slope = (y2-y1)/(x2-x1);
                intercept = y1-(slope*x1);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y3 && Data < y2) // set 2 (110-170)
            {
                slope = (y3-y2)/(x3-x2);
                intercept = y2-(slope*x2);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope2='"+QString::number(slope)+"',Intercept2='"+QString::number(intercept)+"',Result2='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',2));
                }
                qDebug()<<"slp2 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y4 && Data < y3) //set 3 (170-220)
            {
                slope = (y4-y3)/(x4-x3);
                intercept = y3-(slope*x3);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope3='"+QString::number(slope)+"',Intercept3='"+QString::number(intercept)+"',Result3='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',2));
                }
                qDebug()<<"slp3 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data>=y5 && Data < y4) //set 4 (220-280)
            {
                slope = (y5-y4)/(x5-x4);
                intercept = y4-(slope*x4);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope4='"+QString::number(slope)+"',Intercept4='"+QString::number(intercept)+"',Result4='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',2));
                }
                qDebug()<<"slp4 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data < y5) //set 4 (220-280)
            {
                slope = (0-y5)/(0-x5);
                intercept = 0-(slope*0);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope4='"+QString::number(slope)+"',Intercept4='"+QString::number(intercept)+"',Result4='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',2));
                }
                qDebug()<<"slp4 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
        }
        else if(No_std==6)
        {
            if ( Data >= y2) // set 2 (110-170)
            {
                slope = (y2-y1)/(x2-x1);
                intercept = y1-(slope*x1);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y3 && Data < y2) // set 2 (110-170)
            {
                slope = (y3-y2)/(x3-x2);
                intercept = y2-(slope*x2);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope2='"+QString::number(slope)+"',Intercept2='"+QString::number(intercept)+"',Result2='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',2));
                }
                qDebug()<<"slp2 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y4 && Data < y3) //set 3 (170-220)
            {
                slope = (y4-y3)/(x4-x3);
                intercept = y3-(slope*x3);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope3='"+QString::number(slope)+"',Intercept3='"+QString::number(intercept)+"',Result3='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',2));
                }
                qDebug()<<"slp3 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y5 && Data < y4) //set 4 (220-280)
            {
                slope = (y5-y4)/(x5-x4);
                intercept = y4-(slope*x4);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope4='"+QString::number(slope)+"',Intercept4='"+QString::number(intercept)+"',Result4='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',2));
                }
                qDebug()<<"slp4 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y6 && Data < y5) //set 4 (220-280)
            {
                slope = (y6-y5)/(x6-x5);
                intercept = y5-(slope*x5);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope5='"+QString::number(slope)+"',Intercept5='"+QString::number(intercept)+"',Result5='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',2));
                }
                qDebug()<<"slp5 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data < y6) //set 4 (220-280)
            {
                slope = (0-y6)/(0-x6);
                intercept = 0-(slope*0);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope5='"+QString::number(slope)+"',Intercept5='"+QString::number(intercept)+"',Result5='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact6,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact6,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact6,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact6,'f',2));
                }
                qDebug()<<"slp5 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
        }
        else if(No_std==7)
        {
            if ( Data >= y2) // set 2 (110-170)
            {
                slope = (y2-y1)/(x2-x1);
                intercept = y1-(slope*x1);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y3 && Data < y2) // set 2 (110-170)
            {
                slope = (y3-y2)/(x3-x2);
                intercept = y2-(slope*x2);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope2='"+QString::number(slope)+"',Intercept2='"+QString::number(intercept)+"',Result2='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',2));
                }
                qDebug()<<"slp2 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y4 && Data < y3) //set 3 (170-220)
            {
                slope = (y4-y3)/(x4-x3);
                intercept = y3-(slope*x3);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope3='"+QString::number(slope)+"',Intercept3='"+QString::number(intercept)+"',Result3='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',2));
                }
                qDebug()<<"slp3 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y5 && Data < y4) //set 4 (220-280)
            {
                slope = (y5-y4)/(x5-x4);
                intercept = y4-(slope*x4);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope4='"+QString::number(slope)+"',Intercept4='"+QString::number(intercept)+"',Result4='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',2));
                }
                qDebug()<<"slp4 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y6 && Data < y5) //set 4 (220-280)
            {
                slope = (y6-y5)/(x6-x5);
                intercept = y5-(slope*x5);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope5='"+QString::number(slope)+"',Intercept5='"+QString::number(intercept)+"',Result5='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',2));
                }
                qDebug()<<"slp5 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y7 && Data < y6) //set 4 (220-280)
            {
                slope = (y7-y6)/(x7-x6);
                intercept = y6-(slope*x6);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope6='"+QString::number(slope)+"',Intercept6='"+QString::number(intercept)+"',Result6='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact6,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact6,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact6,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact6,'f',2));
                }
                qDebug()<<"slp :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data < y7) //set 4 (220-280)
            {
                slope = (0-y7)/(0-x7);
                intercept = 0-(slope*0);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope6='"+QString::number(slope)+"',Intercept6='"+QString::number(intercept)+"',Result6='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact7,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact7,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact7,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact7,'f',2));
                }
                qDebug()<<"slp :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
        }
        else if(No_std==8)
        {
            if ( Data >= y2) // set 2 (110-170)
            {
                slope = (y2-y1)/(x2-x1);
                intercept = y1-(slope*x1);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope1='"+QString::number(slope)+"',Intercept1='"+QString::number(intercept)+"',Result1='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact1,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact1,'f',2));
                }
                qDebug()<<"slp1 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y3 && Data < y2) // set 2 (110-170)
            {
                slope = (y3-y2)/(x3-x2);
                intercept = y2-(slope*x2);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope2='"+QString::number(slope)+"',Intercept2='"+QString::number(intercept)+"',Result2='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact2,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact2,'f',2));
                }
                qDebug()<<"slp2 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y4 && Data < y3) //set 3 (170-220)
            {
                slope = (y4-y3)/(x4-x3);
                intercept = y3-(slope*x3);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope3='"+QString::number(slope)+"',Intercept3='"+QString::number(intercept)+"',Result3='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact3,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact3,'f',2));
                }
                qDebug()<<"slp3 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y5 && Data < y4) //set 4 (220-280)
            {
                slope = (y5-y4)/(x5-x4);
                intercept = y4-(slope*x4);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope4='"+QString::number(slope)+"',Intercept4='"+QString::number(intercept)+"',Result4='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact4,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact4,'f',2));
                }
                qDebug()<<"slp4 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y6 && Data < y5) //set 4 (220-280)
            {
                slope = (y6-y5)/(x6-x5);
                intercept = y5-(slope*x5);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope5='"+QString::number(slope)+"',Intercept5='"+QString::number(intercept)+"',Result5='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact5,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact5,'f',2));
                }
                qDebug()<<"slp5 :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data >= y7 && Data < y6) //set 4 (220-280)
            {
                slope = (y7-y6)/(x7-x6);
                intercept = y6-(slope*x6);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope6='"+QString::number(slope)+"',Intercept6='"+QString::number(intercept)+"',Result6='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact6,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact6,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact6,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact6,'f',2));
                }
                qDebug()<<"slp :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data>=y8 && Data < y7) //set 4 (220-280)
            {
                slope = (y8-y7)/(x8-x7);
                intercept = y7-(slope*x7);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope7='"+QString::number(slope)+"',Intercept7='"+QString::number(intercept)+"',Result7='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact7,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact7,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact7,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact7,'f',2));
                }
                qDebug()<<"slp :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
            else if (Data < y8) //set 4 (220-280)
            {
                slope = (0-y8)/(0-x8);
                intercept = 0-(slope*0);
                result= (Data-intercept)/slope;
                qyy.prepare("update test set Slope7='"+QString::number(slope)+"',Intercept7='"+QString::number(intercept)+"',Result7='"+QString::number(result)+"' where name='"+TestName+"'");
                if(fact1>=100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact8,'f',0));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact8,'f',0));
                }
                else if(fact1<100)
                {
                    if(option==3 || option==11)
                        ui->label_242->setText(QString::number(fact8,'f',2));
                    else if(option==6 ||option==9)
                        ui->label_240->setText(QString::number(fact8,'f',2));
                }
                qDebug()<<"slp :"<<slope<<" "<<"intercep : "<<intercept<<" "<<"Data : "<<Data;
            }
        }
    }

    qyy.exec();
    qDebug()<<"slope : "<<slope;
    qDebug()<<"Intercept : "<<intercept;
    qDebug()<<"Result : "<<result;
    if(result>=100)
    {
        if(option==12)
            ui->label_273->setText(QString::number(result,'f',0));
        else if(option==13 || option==14)
            ui->label_225->setText(QString::number(result,'f',0));
        else
        {
            ui->label_33->setText(QString::number(result,'f',0));
            ui->label_50->setText(QString::number(result,'f',0));
        }
    }
    else if(result<100)
    {
        if(option==12)
            ui->label_273->setText(QString::number(result,'f',2));
        else if(option==13 || option==14)
            ui->label_225->setText(QString::number(result,'f',2));
        else
        {
            ui->label_33->setText(QString::number(result,'f',2));
            ui->label_50->setText(QString::number(result,'f',2));
        }
    }
}

void MainWindow::addColumnsToTable()
{
    // Assuming "your_table" is the name of your table
    QString tableName = "test";

    // List of columns to add
    QStringList columnNames;
    columnNames << "Abs1" << "Abs2" << "Abs3"<< "Abs4" << "Abs5" << "Abs6"<< "Abs7" << "Abs8" << "Fact1"<< "Fact2" << "Fact3" << "Fact4"<< "Fact5" << "Fact6" << "Fact7"<< "Fact8" << "Slope1" << "Slope2" << "Slope3" << "Slope4"<< "Slope5" << "Slope6" << "Slope7"<< "Slope8"
                << "Intercept1" << "Intercept2" << "Intercept3" << "Intercept4"<< "Intercept5" << "Intercept6" << "Intercept7"<< "Intercept8"<< "Result1" << "Result2" << "Result3" << "Result4"<< "Result5" << "Result6" << "Result7"<< "Result8";

    // Map of column names to their respective data types
    QHash<QString, QString> columnTypes;
    columnTypes["Abs1"] = "TEXT";
    columnTypes["Abs2"] = "TEXT";
    columnTypes["Abs3"] = "TEXT";
    columnTypes["Abs4"] = "TEXT";
    columnTypes["Abs5"] = "TEXT";
    columnTypes["Abs6"] = "TEXT";
    columnTypes["Abs7"] = "TEXT";
    columnTypes["Abs8"] = "TEXT";

    columnTypes["Fact1"] = "TEXT";
    columnTypes["Fact2"] = "TEXT";
    columnTypes["Fact3"] = "TEXT";
    columnTypes["Fact4"] = "TEXT";
    columnTypes["Fact5"] = "TEXT";
    columnTypes["Fact6"] = "TEXT";
    columnTypes["Fact7"] = "TEXT";
    columnTypes["Fact8"] = "TEXT";

    columnTypes["Slope1"] = "TEXT";
    columnTypes["Slope2"] = "TEXT";
    columnTypes["Slope3"] = "TEXT";
    columnTypes["Slope4"] = "TEXT";
    columnTypes["Slope5"] = "TEXT";
    columnTypes["Slope6"] = "TEXT";
    columnTypes["Slope7"] = "TEXT";
    columnTypes["Slope8"] = "TEXT";

    columnTypes["Intercept1"] = "TEXT";
    columnTypes["Intercept2"] = "TEXT";
    columnTypes["Intercept3"] = "TEXT";
    columnTypes["Intercept4"] = "TEXT";
    columnTypes["Intercept5"] = "TEXT";
    columnTypes["Intercept6"] = "TEXT";
    columnTypes["Intercept7"] = "TEXT";
    columnTypes["Intercept8"] = "TEXT";

    columnTypes["Result1"] = "TEXT";
    columnTypes["Result2"] = "TEXT";
    columnTypes["Result3"] = "TEXT";
    columnTypes["Result4"] = "TEXT";
    columnTypes["Result5"] = "TEXT";
    columnTypes["Result6"] = "TEXT";
    columnTypes["Result7"] = "TEXT";
    columnTypes["Result8"] = "TEXT";

    QSqlQuery query;

    for (const QString& columnName : columnNames) {
        if (!isColumnExists(tableName, columnName)) {
            QString columnType = columnTypes.value(columnName);

            if (!columnType.isEmpty()) {
                QString sqlQuery = QString("ALTER TABLE %1 ADD COLUMN %2 %3;").arg(tableName).arg(columnName).arg(columnType);

                if (query.exec(sqlQuery)) {
                    qDebug() << "Column added successfully:" << columnName;
                } else {
                    qDebug() << "Error adding column:" << query.lastError().text();
                }
            } else {
                qDebug() << "Data type not specified for column:" << columnName;
            }
        } else {
            qDebug() << "Column already exists:" << columnName;
        }
    }

}

bool MainWindow::isColumnExists(const QString& tableName, const QString& columnName) {
    QSqlQuery query;
    QString sqlQuery = QString("PRAGMA table_info(%1);").arg(tableName);

    if (query.exec(sqlQuery)) {
        while (query.next()) {
            QString existingColumnName = query.value("name").toString();
            if (existingColumnName == columnName) {
                return true; // Column already exists
            }
        }
    } else {
        qDebug() << "Error checking column existence:" << query.lastError().text();
    }

    return false; // Column does not exist
}

void MainWindow::on_Stop_Btn_3_clicked()
{
    ui->Stop_Btn_3->setDisabled(true);
    QString Rctn;
    QSqlQuery qy;
    qy.prepare("select * from test where name='"+TestName+"'");
    qy.exec();
    while(qy.next())
        Rctn=qy.value(3).toString();

    if(Rctn=="End point")
    {
        readtimer->stop();
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
        msg.setStyleSheet("font:16pt Arial;");
        msg.setText("Reading has stopped.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setStandardButtons(QMessageBox::Ok);
        if(msg.exec() == QMessageBox::Ok)
        {
            if(option==10)
            {
                ui->toolButton_57->setDisabled(false);
                ui->toolButton_61->setDisabled(false);
                ui->toolButton_63->setDisabled(false);
                ui->toolButton_58->setDisabled(false);
                ui->toolButton_60->setDisabled(false);
                ui->toolButton_64->setDisabled(false);
                ui->toolButton_59->setDisabled(false);
                ui->toolButton_62->setDisabled(false);
                ui->toolButton_39->setDisabled(false);
                ui->toolButton_40->setDisabled(false);
                ui->Retest_6->setDisabled(false);
                ui->Home_Btn_25->setDisabled(false);
            }
            else
            {
                Pro_Code_CheckAdd();
                ui->toolButton_57->setDisabled(false);
                ui->toolButton_61->setDisabled(false);
                ui->toolButton_63->setDisabled(false);
                ui->toolButton_58->setDisabled(false);
                ui->toolButton_60->setDisabled(false);
                ui->toolButton_64->setDisabled(false);
                ui->toolButton_59->setDisabled(false);
                ui->toolButton_62->setDisabled(false);
                ui->toolButton_39->setDisabled(false);
                ui->Retest_6->setDisabled(false);
                ui->Home_Btn_25->setDisabled(false);
            }

            Pro_Code_CheckAdd();
        }
    }
    else if(Rctn=="Fixed Kinetic")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
        msg.setStyleSheet("font:16pt Arial;");
        msg.setText("Do you want to stop the reading ?");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setStandardButtons(QMessageBox::Ok |  QMessageBox::Cancel);
        msg.setButtonText(QMessageBox::Ok , "Yes");
        msg.setButtonText(QMessageBox::Cancel , "Back");
        msg.setFixedWidth(500);
        int result = msg.exec();
        if (result == QMessageBox::Ok)
        {
            readtimer->stop();
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
            msg.setStyleSheet("font:16pt Arial;");
            msg.setText("Reading has stopped.");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setStandardButtons(QMessageBox::Ok);
            if(msg.exec() == QMessageBox::Ok)
            {
                ui->stackedWidget->setCurrentIndex(2);
                Pro_Code_CheckAdd();
                ui->toolButton_57->setDisabled(false);
                ui->toolButton_61->setDisabled(false);
                ui->toolButton_63->setDisabled(false);
                ui->toolButton_58->setDisabled(false);
                ui->toolButton_60->setDisabled(false);
                ui->toolButton_64->setDisabled(false);
                ui->toolButton_59->setDisabled(false);
                ui->toolButton_62->setDisabled(false);
                ui->toolButton_39->setDisabled(false);
                ui->Retest_6->setDisabled(false);
                ui->Home_Btn_25->setDisabled(false);
            }
        }
    }
    else if(Rctn=="Kinetic")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
        msg.setStyleSheet("font:16pt Arial;");
        msg.setText("Do you want to stop the reading ?");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setStandardButtons(QMessageBox::Ok |  QMessageBox::Cancel);
        msg.setButtonText(QMessageBox::Ok , "Yes");
        msg.setButtonText(QMessageBox::Cancel , "Back");
        msg.setFixedWidth(500);
        int result = msg.exec();
        if (result == QMessageBox::Ok)
        {
            readtimer->stop();
            QMessageBox msg(this);
            msg.setWindowFlags(Qt::Popup);
            msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
            msg.setStyleSheet("font:16pt Arial;");
            msg.setText("Reading has stopped.");
            QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
            auto newPixmap = p.scaled(80, 80);
            msg.setIconPixmap(newPixmap);
            msg.setStandardButtons(QMessageBox::Ok);
            if(msg.exec() == QMessageBox::Ok)
            {
                ui->stackedWidget->setCurrentIndex(2);
                Pro_Code_CheckAdd();
                ui->toolButton_57->setDisabled(false);
                ui->toolButton_61->setDisabled(false);
                ui->toolButton_63->setDisabled(false);
                ui->toolButton_58->setDisabled(false);
                ui->toolButton_60->setDisabled(false);
                ui->toolButton_64->setDisabled(false);
                ui->toolButton_59->setDisabled(false);
                ui->toolButton_62->setDisabled(false);
                ui->toolButton_39->setDisabled(false);
                ui->Retest_6->setDisabled(false);
                ui->Home_Btn_25->setDisabled(false);
            }
        }
    }
}

void MainWindow::on_toolButton_69_clicked()
{
    stopMotor();
    ui->frame_5->setStyleSheet("background-color: rgb(249, 255, 247);");
    if(New_Stabil_val==0)
    {
        stableval=0;
        Wave_LED_700();
        Turbidity_CSS();
        ui->frame_5->setVisible(true);
        Stabilizingg->start(1000);
        New_Stabil_val=1;

        /*stableval=0;
        Wave_LED_700();
        Turbidity_CSS();
        int Inten=0;
        QSqlQuery qy;
        qy.prepare("select * from Turbidity_test where sno=1");
        qy.exec();
        while(qy.next())
            Inten = qy.value(73).toInt();
        pwmWrite (LED, Inten);
        qDebug()<<"Turbi intern : "<<Inten;
        digitalWrite (LED_BASE + 6,HIGH) ;
        ui->stackedWidget->setCurrentIndex(0);
        ui->frame_5->setVisible(true);
        New_Stabil_val=1;*/
    }
    else
    {
        qDebug()<<"Else";
        Wave_LED_700();
        Turbidity_CSS();
        int Inten=0;
        QSqlQuery qy;
        qy.prepare("select * from Turbidity_test where sno=1");
        qy.exec();
        while(qy.next())
            Inten = qy.value(73).toInt();
        pwmWrite (LED, Inten);
        qDebug()<<"Turbi intern : "<<Inten;
        digitalWrite (LED_BASE + 6,HIGH) ;
        ui->stackedWidget->setCurrentIndex(0);
        ui->frame_5->setVisible(true);
    }
    Test_Type="Turbidity";
}

void MainWindow::on_toolButton_70_clicked()
{
    Wave_LED_OFF();
    Biochemistry_CSS();
    Test_Type="Biochemistry";
    pwmWrite (LED, 0);
    digitalWrite (LED_BASE + 6,LOW) ;
    ui->frame_5->setVisible(true);
    ui->stackedWidget->setCurrentIndex(0);
}

void MainWindow::on_RunCal_Btn_4_clicked()
{
    clearGraph_Turbidity();
    ui->Turbi_Runsample_Btn_5->setEnabled(false);
    ui->frame_65->setVisible(true);
    ui->Cal1_TestBtn->setDisabled(false);
    ui->Cal2_TestBtn->setDisabled(false);
    ui->Cal3_TestBtn->setDisabled(false);
    ui->Cal4_TestBtn->setDisabled(false);
    ui->Cal5_TestBtn->setDisabled(false);
    ui->Cal6_TestBtn->setDisabled(false);
    ui->Cal7_TestBtn->setDisabled(false);
    ui->Cal8_TestBtn->setDisabled(false);
    Turbidity_Back=1;
    ui->Abs_lbl_21->setVisible(false);
    QString Cal1,Cal2,Cal3,Cal4,Cal5,Cal6,Cal7,Cal8,Abs1,Abs2,Abs3,Abs4,Abs5,Abs6,Abs7,Abs8,Graph_Type,OldAbs1,OldAbs2,OldAbs3,OldAbs4,OldAbs5,OldAbs6,OldAbs7,OldAbs8;
    QSqlQuery qy;
    qy.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
    qy.exec();
    while(qy.next())
    {
        Graph_Type=qy.value(9).toString();
        Cal1=qy.value(11).toString();
        Cal2=qy.value(12).toString();
        Cal3=qy.value(13).toString();
        Cal4=qy.value(14).toString();
        Cal5=qy.value(15).toString();
        Cal6=qy.value(16).toString();
        Cal7=qy.value(17).toString();
        Cal8=qy.value(18).toString();

        Abs1=qy.value(19).toString();
        Abs2=qy.value(20).toString();
        Abs3=qy.value(21).toString();
        Abs4=qy.value(22).toString();
        Abs5=qy.value(23).toString();
        Abs6=qy.value(24).toString();
        Abs7=qy.value(25).toString();
        Abs8=qy.value(26).toString();

        OldAbs1=qy.value(49).toString();
        OldAbs2=qy.value(50).toString();
        OldAbs3=qy.value(51).toString();
        OldAbs4=qy.value(52).toString();
        OldAbs5=qy.value(53).toString();
        OldAbs6=qy.value(54).toString();
        OldAbs7=qy.value(55).toString();
        OldAbs8=qy.value(56).toString();
    }
    ui->Graph_Type_3->setCurrentText(Graph_Type);
    ui->Cal1_lbl->setText(Cal1);
    ui->Cal2_lbl->setText(Cal2);
    ui->Cal3_lbl->setText(Cal3);
    ui->Cal4_lbl->setText(Cal4);
    ui->Cal5_lbl->setText(Cal5);
    ui->Cal6_lbl->setText(Cal6);
    ui->Cal7_lbl->setText(Cal7);
    ui->Cal8_lbl->setText(Cal8);

    ui->lineEdit_24->setText(OldAbs1);
    ui->lineEdit_57->setText(OldAbs2);
    ui->lineEdit_58->setText(OldAbs3);
    ui->lineEdit_67->setText(OldAbs4);
    ui->lineEdit_68->setText(OldAbs5);
    ui->lineEdit_69->setText(OldAbs6);
    ui->lineEdit_70->setText(OldAbs7);
    ui->lineEdit_71->setText(OldAbs8);
    QString Text = ui->Graph_Type_4->currentText();
    QSqlQuery query;
    if(Text=="--Select--")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
        msg.setStyleSheet("font:16pt Arial;");
        msg.setText("Please select Test type.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setStandardButtons(QMessageBox::Ok);
        if(msg.exec() == QMessageBox::Ok)
        {
            ui->stackedWidget_13->setCurrentIndex(0);
        }
    }
    else if(Text=="Inside Incubation")
    {

        ui->stackedWidget_13->setCurrentIndex(1);
        ui->stackedWidget_14->setCurrentIndex(0);
    }
    else if(Text=="Outside Incubation")
    {

        ui->stackedWidget_13->setCurrentIndex(1);
        ui->stackedWidget_14->setCurrentIndex(0);
    }

}

void MainWindow::on_Main_Menu_clicked()
{
    Wave_LED_OFF();
    Biochemistry_CSS();
    ui->label_583->setText("Mode : \nBiochemistry");
    Test_Type="Biochemistry";
    pwmWrite (LED, 0);
    digitalWrite (LED_BASE + 6,LOW) ;
    ui->Main_Menu->setVisible(false);
    ui->label_581->setVisible(false);
    ui->Main_Menu_2->setVisible(true);
    ui->label_582->setVisible(true);
}

void MainWindow::on_Main_Menu_2_clicked()
{
    Turbidity_CSS();
    Wave_LED_700();
    ui->label_583->setText("Mode : \nTurbidity");
    Test_Type="Turbidity";
    if(Calibrate_Done==1)
    {
        int Inten=0;
        QSqlQuery qy;
        qy.prepare("select * from Turbidity_test where sno=1");
        qy.exec();
        while(qy.next())
            Inten = qy.value(73).toInt();
        pwmWrite (LED, Inten);
        digitalWrite (LED_BASE + 6,HIGH) ;
        ui->Main_Menu->setVisible(true);
        ui->label_581->setVisible(true);
        ui->Main_Menu_2->setVisible(false);
        ui->label_582->setVisible(false);
    }
    else if(Calibrate_Done==0)
    {
        if(New_Stabil_val==0)
        {
            stableval=0;
            Wave_LED_700();
            Turbidity_CSS();
            Stabilizingg->start(1000);

            /* int Inten=0;
            QSqlQuery qy;
            qy.prepare("select * from Turbidity_test where sno=1");
            qy.exec();
            while(qy.next())
                Inten = qy.value(73).toInt();
            pwmWrite (LED, Inten);
            qDebug()<<"Turbi intern : "<<Inten;
            digitalWrite (LED_BASE + 6,HIGH) ;
            ui->stackedWidget->setCurrentIndex(0);
            ui->frame_5->setVsible(true);*/
            New_Stabil_val=1;
        }
        //  CalibrateTimer->start(1000);
        int Inten=0;
        QSqlQuery qy;
        qy.prepare("select * from Turbidity_test where sno=1");
        qy.exec();
        while(qy.next())
            Inten = qy.value(73).toInt();
        pwmWrite (LED, Inten);
        digitalWrite (LED_BASE + 6,HIGH) ;
        ui->Main_Menu->setVisible(true);
        ui->label_581->setVisible(true);
        ui->Main_Menu_2->setVisible(false);
        ui->label_582->setVisible(false);
    }
}

void MainWindow::on_Turbi_Runsample_Btn_clicked()
{
    clearGraph_Turbidity_Grph();
    ui->label_570->clear();
    ui->label_571->clear();
    ui->label_567->clear();
    ui->label_568->clear();
    line=20;
    Read_d=0;
    Page_change=1;
    Turbi_Sample=1;
    Turbi_Cal1=0;
    Turbi_Cal2=0;
    Turbi_Cal3=0;
    Turbi_Cal4=0;
    Turbi_Cal5=0;
    Turbi_Cal6=0;
    Turbi_Cal7=0;
    Turbi_Cal8=0;
    Turbi_Current_Read_Point=0;
    Turdata=1;

    ui->label_573->setText(TestName);
    ui->lcdNumber->display("00:00");
    QString type = ui->Graph_Type_4->currentText();
    if(type=="--Select--")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
        msg.setStyleSheet("font:16pt Arial;");
        msg.setText("Please select Test type.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setStandardButtons(QMessageBox::Ok);
        if(msg.exec() == QMessageBox::Ok)
        {
            ui->stackedWidget_13->setCurrentIndex(0);
            ui->Home_Btn_26->setDisabled(false);
            ui->RunCal_Btn_4->setDisabled(false);
            ui->Turbi_Runsample_Btn->setDisabled(false);
            ui->Turbi_Runsample_Btn_2->setDisabled(false);
            ui->toolButton_73->setDisabled(false);
        }
    }
    else if(type=="Inside Incubation")
    {
        ui->label_626->setText("Add R1 & Sample \n then click Incubate");
        Read_d=0;
        ui->Turbi_Runsample_Btn_6->setText("Incubate");
        ui->Home_Btn_26->setDisabled(true);
        ui->RunCal_Btn_4->setDisabled(true);
        ui->Turbi_Runsample_Btn->setDisabled(true);
        ui->Turbi_Runsample_Btn_2->setDisabled(true);
        ui->toolButton_73->setDisabled(true);

        ui->stackedWidget_16->setCurrentIndex(0);
        ui->stackedWidget_16->setVisible(true);
    }
    else if(type=="Outside Incubation")
    {
        ui->Home_Btn_26->setDisabled(true);
        ui->RunCal_Btn_4->setDisabled(true);
        ui->Turbi_Runsample_Btn->setDisabled(true);
        ui->Turbi_Runsample_Btn_2->setDisabled(true);
        ui->toolButton_73->setDisabled(true);

        QSqlQuery query;
        int intensity=0,Incubation_Time=0;
        query.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
        query.exec();
        while(query.next())
            Incubation_Time=query.value(8).toInt();

        QSqlQuery qury;
        qury.prepare("select intensity from tests where sno=7");
        qury.exec();
        while(qury.next())
            intensity=qury.value(0).toInt();

        /*int Input_Min=0, Input_Max=0;
        QSqlQuery qq;
        qq.prepare("select Input_min,Inout_max from Turbidity_Setting where sno=1");
        qq.exec();
        while(qq.next())
        {
            Input_Min=qq.value(0).toInt();
            Input_Max=qq.value(1).toInt();

        }
        int Final_Inten = ((Output_Max-Output_Min)/(Input_Max-Input_Min))*(intensity-Input_Min)+Output_Min;*/
        Turbidity_read_Intensity=intensity;
        total_read_point = (Incubation_Time*60);
        read_wave_LED=6; //LED
        read_wave135=1; //Photodiode 405nm0 (135°)
        read_wave180=0; //Photodiode 505nm (180°)
        filtwave135[0]=Turbidity_reading135();
        filtwave180[0]=Turbidity_reading180();
        read135=filtwave135[0];
        read180=filtwave180[0];
        ui->label_573->setText(TestName);
        ui->lcdNumber->display("00:00");
        DC_Motor();
        ui->stackedWidget->setCurrentIndex(36);
        countdown = QTime(0, Incubation_Time, 0, 0); // Update countdown with the new value of Time
        etimer.start();
        Incubationtimer->start(1000);
        Turbi_Update_Func();
    }
}

void MainWindow::on_Turbi_Runsample_Btn_4_clicked()
{
    ui->stackedWidget->setCurrentIndex(36);
}

void MainWindow::on_Turbi_Runsample_Btn_3_clicked()
{
    ui->label_576->clear();
    ui->label_578->clear();
    ui->toolButton_75->setVisible(false);
    QString Intensity;
    QSqlQuery qy;
    qy.prepare("select * from tests where sno=7");
    qy.exec();
    while(qy.next())
        Intensity=qy.value(1).toString();

    ui->lineEdit_107->setText(Intensity);
    QString DC_Intensity;
    QSqlQuery qyy;
    qyy.prepare("select DCMotor_Instensity from Turbidity_test where sno=1");
    qyy.exec();
    while(qyy.next())
        DC_Intensity=qyy.value(0).toString();

    QString Min , Max ;
    int Motor=0;
    QSqlQuery query;
    query.prepare("select Input_min,Inout_max,Motor from Turbidity_Setting where sno=1");
    query.exec();
    while(query.next())
    {
        Min=query.value(0).toString();
        Max=query.value(1).toString();
        Motor=query.value(2).toInt();
    }
    int Dtaa = Motor/1000;
    qDebug()<<"DC_Inten : "<<DC_Intensity;
    ui->lineEdit_110->setText(DC_Intensity);

    ui->stackedWidget_15->setCurrentIndex(0);
    ui->stackedWidget->setCurrentIndex(37);
}

void MainWindow::on_Cal1_TestBtn_clicked()
{
    clearGraph_Turbidity();
    ui->label_567->clear();
    ui->label_568->clear();
    ui->label_570->clear();
    ui->label_571->clear();
    ui->Turbi_Runsample_Btn_5->setEnabled(false);
    Page_change=2;
    clearGraph_Turbidity_Grph();
    line=20;
    Turbi_Current_Read_Point=0;
    Turdata=1;
    QString Abs1=" ",Abs2=" ",Abs3=" ",Abs4=" ",Abs5=" ",Abs6=" ",Abs7=" ",Abs8=" ";
    QSqlQuery qy;
    qy.prepare("Update Turbidity_test set Abs1='"+Abs1+"',Abs2='"+Abs2+"',Abs3='"+Abs3+"',Abs4='"+Abs4+"',Abs5='"+Abs5+"',Abs6='"+Abs6+"',Abs7='"+Abs7+"',Abs8='"+Abs8+"' where TestName='"+TestName+"'");
    qy.exec();
    ui->Graph_Type_3->setDisabled(true);
    ui->Set_Graph_Btn->setDisabled(true);
    ui->Home_Btn_3->setDisabled(true);
    ui->Home_Btn_26->setDisabled(true);
    ui->Retest_7->setDisabled(true);
    ui->toolButton_44->setDisabled(true);
    ui->toolButton_45->setDisabled(true);
    ui->toolButton_73->setDisabled(true);
    QSqlQuery query;
    int intensity=0,Incubation_Time=0;
    QString no_std;
    query.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
    query.exec();
    while(query.next())
    {
        Incubation_Time=query.value(8).toInt();
        no_std=query.value(10).toString();
    }
    Turbi_Cal1=1;
    Turbi_Cal2=0;
    Turbi_Cal3=0;
    Turbi_Cal4=0;
    Turbi_Cal5=0;
    Turbi_Cal6=0;
    Turbi_Cal7=0;
    Turbi_Cal8=0;
    Turbi_cal_final=1;

    QString type = ui->Graph_Type_4->currentText();
    if(type=="--Select--")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
        msg.setStyleSheet("font:16pt Arial;");
        msg.setText("Please select Test type.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setStandardButtons(QMessageBox::Ok);
        if(msg.exec() == QMessageBox::Ok)
        {
            ui->stackedWidget_13->setCurrentIndex(0);
            ui->Cal1_TestBtn->setDisabled(false);
            ui->Cal2_TestBtn->setDisabled(false);
            ui->Cal3_TestBtn->setDisabled(false);
            ui->Cal4_TestBtn->setDisabled(false);
            ui->Cal5_TestBtn->setDisabled(false);
            ui->Cal6_TestBtn->setDisabled(false);
            ui->Cal7_TestBtn->setDisabled(false);
            ui->Cal8_TestBtn->setDisabled(false);
        }
    }
    else if(type=="Inside Incubation")
    {
        ui->label_626->setText("Add R1 & Sample \n then click Incubate");
        Read_d=0;
        ui->Turbi_Runsample_Btn_6->setText("Incubate");
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);

        ui->stackedWidget_16->setCurrentIndex(0);
        ui->stackedWidget_16->setVisible(true);
    }
    else if(type=="Outside Incubation")
    {
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);

        QSqlQuery qury;
        qury.prepare("select intensity from tests where sno=7");
        qury.exec();
        while(qury.next())
            intensity=qury.value(0).toInt();

        /*int Input_Min=0, Input_Max=0;
        QSqlQuery qq;
        qq.prepare("select Input_min,Inout_max from Turbidity_Setting where sno=1");
        qq.exec();
        while(qq.next())
        {
            Input_Min=qq.value(0).toInt();
            Input_Max=qq.value(1).toInt();

        }
        int Final_Inten = ((Output_Max-Output_Min)/(Input_Max-Input_Min))*(intensity-Input_Min)+Output_Min;*/
        Turbidity_read_Intensity=intensity;
        total_read_point = (Incubation_Time*60);
        read_wave_LED=6; //LED
        read_wave135=1; //Photodiode 405nm (135°)
        read_wave180=0; //Photodiode 505nm (180°)
        filtwave135[0]=Turbidity_reading135();
        filtwave180[0]=Turbidity_reading180();
        read135=filtwave135[0];
        read180=filtwave180[0];
        ui->label_573->setText(TestName);
        ui->lcdNumber->display("00:00");
        DC_Motor();
        ui->stackedWidget->setCurrentIndex(36);
        countdown = QTime(0, Incubation_Time, 0, 0); // Update countdown with the new value of Time
        etimer.start();
        Incubationtimer->start(1000);
        Turbi_Update_Func();
    }

}

void MainWindow::on_Cal2_TestBtn_clicked()
{
    clearGraph_Turbidity();
    ui->label_567->clear();
    ui->label_568->clear();
    ui->label_570->clear();
    ui->label_571->clear();
    ui->Turbi_Runsample_Btn_5->setEnabled(false);
    Page_change=2;
    ui->Graph_Type_3->setDisabled(true);
    ui->Set_Graph_Btn->setDisabled(true);
    ui->Home_Btn_3->setDisabled(true);
    ui->Home_Btn_26->setDisabled(true);
    ui->Retest_7->setDisabled(true);
    ui->toolButton_44->setDisabled(true);
    ui->toolButton_45->setDisabled(true);
    ui->toolButton_73->setDisabled(true);

    QSqlQuery query;
    int intensity=0,Incubation_Time=0;
    QString no_std;
    query.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
    query.exec();
    while(query.next())
    {
        Incubation_Time=query.value(8).toInt();
        no_std=query.value(10).toString();
    }
    qDebug()<<"Inc_Time : "<<Incubation_Time<<" "<<"No_Std : "<<no_std;
    if(Turbi_cal_final==no_std)
    {
        Turbi_cal_finaled=1;
        ui->Cal1_TestBtn->setDisabled(false);
        ui->Cal2_TestBtn->setDisabled(false);
        ui->Cal3_TestBtn->setDisabled(false);
        ui->Cal4_TestBtn->setDisabled(false);
        ui->Cal5_TestBtn->setDisabled(false);
        ui->Cal6_TestBtn->setDisabled(false);
        ui->Cal7_TestBtn->setDisabled(false);
        ui->Cal8_TestBtn->setDisabled(false);
    }
    else
    {
        Turbi_Cal1=0;
        Turbi_Cal2=1;
        Turbi_Cal3=0;
        Turbi_Cal4=0;
        Turbi_Cal5=0;
        Turbi_Cal6=0;
        Turbi_Cal7=0;
        Turbi_Cal8=0;
        Turbi_cal_final=2;
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);

    }
    QString type = ui->Graph_Type_4->currentText();
    if(type=="--Select--")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
        msg.setStyleSheet("font:16pt Arial;");
        msg.setText("Please select Test type.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setStandardButtons(QMessageBox::Ok);
        if(msg.exec() == QMessageBox::Ok)
        {
            ui->stackedWidget_13->setCurrentIndex(0);
            ui->Cal1_TestBtn->setDisabled(false);
            ui->Cal2_TestBtn->setDisabled(false);
            ui->Cal3_TestBtn->setDisabled(false);
            ui->Cal4_TestBtn->setDisabled(false);
            ui->Cal5_TestBtn->setDisabled(false);
            ui->Cal6_TestBtn->setDisabled(false);
            ui->Cal7_TestBtn->setDisabled(false);
            ui->Cal8_TestBtn->setDisabled(false);
        }
    }
    else if(type=="Inside Incubation")
    {
        ui->label_626->setText("Add R1 & Sample \n then click Incubate");
        Read_d=0;
        ui->Turbi_Runsample_Btn_6->setText("Incubate");
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);

        ui->stackedWidget_16->setCurrentIndex(0);
        ui->stackedWidget_16->setVisible(true);
    }
    else if(type=="Outside Incubation")
    {
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);


        QSqlQuery qury;
        qury.prepare("select intensity from tests where sno=7");
        qury.exec();
        while(qury.next())
            intensity=qury.value(0).toInt();

        /*int Input_Min=0, Input_Max=0;
        QSqlQuery qq;
        qq.prepare("select Input_min,Inout_max from Turbidity_Setting where sno=1");
        qq.exec();
        while(qq.next())
        {
            Input_Min=qq.value(0).toInt();
            Input_Max=qq.value(1).toInt();

        }
        int Final_Inten = ((Output_Max-Output_Min)/(Input_Max-Input_Min))*(intensity-Input_Min)+Output_Min;*/
        Turbidity_read_Intensity=intensity;
        clearGraph_Turbidity_Grph();
        line=20;
        Turbi_Current_Read_Point=0;
        Turdata=1;

        total_read_point = (Incubation_Time*60);
        read_wave_LED=6; //LED
        read_wave135=1; //Photodiode 405nm (135°)
        read_wave180=0; //Photodiode 505nm (180°)
        filtwave135[0]=Turbidity_reading135();
        filtwave180[0]=Turbidity_reading180();
        read135=filtwave135[0];
        read180=filtwave180[0];
        ui->label_573->setText(TestName);
        ui->lcdNumber->display("00:00");
        DC_Motor();
        ui->stackedWidget->setCurrentIndex(36);
        countdown = QTime(0, Incubation_Time, 0, 0); // Update countdown with the new value of Time
        etimer.start();
        Incubationtimer->start(1000);
        Turbi_Update_Func();
    }


}

void MainWindow::on_Cal3_TestBtn_clicked()
{
    clearGraph_Turbidity();
    ui->label_567->clear();
    ui->label_568->clear();
    ui->label_570->clear();
    ui->label_571->clear();
    ui->Turbi_Runsample_Btn_5->setEnabled(false);
    Page_change=2;
    ui->Graph_Type_3->setDisabled(true);
    ui->Set_Graph_Btn->setDisabled(true);
    ui->Home_Btn_3->setDisabled(true);
    ui->Home_Btn_26->setDisabled(true);
    ui->Retest_7->setDisabled(true);
    ui->toolButton_44->setDisabled(true);
    ui->toolButton_45->setDisabled(true);
    ui->toolButton_73->setDisabled(true);

    QSqlQuery query;
    int intensity=0,Incubation_Time=0;
    QString no_std;
    query.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
    query.exec();
    while(query.next())
    {
        Incubation_Time=query.value(8).toInt();
        no_std=query.value(10).toString();
    }
    qDebug()<<"Inc_Time : "<<Incubation_Time<<" "<<"No_Std : "<<no_std;
    if(Turbi_cal_final==no_std)
    {
        Turbi_cal_finaled=1;
        ui->Cal1_TestBtn->setDisabled(false);
        ui->Cal2_TestBtn->setDisabled(false);
        ui->Cal3_TestBtn->setDisabled(false);
        ui->Cal4_TestBtn->setDisabled(false);
        ui->Cal5_TestBtn->setDisabled(false);
        ui->Cal6_TestBtn->setDisabled(false);
        ui->Cal7_TestBtn->setDisabled(false);
        ui->Cal8_TestBtn->setDisabled(false);
    }
    else
    {
        Turbi_Cal1=0;
        Turbi_Cal2=0;
        Turbi_Cal3=1;
        Turbi_Cal4=0;
        Turbi_Cal5=0;
        Turbi_Cal6=0;
        Turbi_Cal7=0;
        Turbi_Cal8=0;
        Turbi_cal_final=3;
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);
    }
    QString type = ui->Graph_Type_4->currentText();
    if(type=="--Select--")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
        msg.setStyleSheet("font:16pt Arial;");
        msg.setText("Please select Test type.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setStandardButtons(QMessageBox::Ok);
        if(msg.exec() == QMessageBox::Ok)
        {
            ui->stackedWidget_13->setCurrentIndex(0);
            ui->Cal1_TestBtn->setDisabled(false);
            ui->Cal2_TestBtn->setDisabled(false);
            ui->Cal3_TestBtn->setDisabled(false);
            ui->Cal4_TestBtn->setDisabled(false);
            ui->Cal5_TestBtn->setDisabled(false);
            ui->Cal6_TestBtn->setDisabled(false);
            ui->Cal7_TestBtn->setDisabled(false);
            ui->Cal8_TestBtn->setDisabled(false);
        }
    }
    else if(type=="Inside Incubation")
    {
        ui->label_626->setText("Add R1 & Sample \n then click Incubate");
        Read_d=0;
        ui->Turbi_Runsample_Btn_6->setText("Incubate");
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);

        ui->stackedWidget_16->setCurrentIndex(0);
        ui->stackedWidget_16->setVisible(true);
    }
    else if(type=="Outside Incubation")
    {
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);


        QSqlQuery qury;
        qury.prepare("select intensity from tests where sno=7");
        qury.exec();
        while(qury.next())
            intensity=qury.value(0).toInt();

        /*int Input_Min=0, Input_Max=0;
        QSqlQuery qq;
        qq.prepare("select Input_min,Inout_max from Turbidity_Setting where sno=1");
        qq.exec();
        while(qq.next())
        {
            Input_Min=qq.value(0).toInt();
            Input_Max=qq.value(1).toInt();

        }
        int Final_Inten = ((Output_Max-Output_Min)/(Input_Max-Input_Min))*(intensity-Input_Min)+Output_Min;*/
        Turbidity_read_Intensity=intensity;
        clearGraph_Turbidity_Grph();
        line=20;
        Turbi_Current_Read_Point=0;
        Turdata=1;

        total_read_point = (Incubation_Time*60);
        read_wave_LED=6; //LED
        read_wave135=1; //Photodiode 405nm (135°)
        read_wave180=0; //Photodiode 505nm (180°)
        filtwave135[0]=Turbidity_reading135();
        filtwave180[0]=Turbidity_reading180();
        read135=filtwave135[0];
        read180=filtwave180[0];
        ui->label_573->setText(TestName);
        ui->lcdNumber->display("00:00");
        DC_Motor();
        ui->stackedWidget->setCurrentIndex(36);
        countdown = QTime(0, Incubation_Time, 0, 0); // Update countdown with the new value of Time
        etimer.start();
        Incubationtimer->start(1000);
        Turbi_Update_Func();
    }
}

void MainWindow::on_Cal4_TestBtn_clicked()
{
    clearGraph_Turbidity();
    ui->label_567->clear();
    ui->label_568->clear();
    ui->label_570->clear();
    ui->label_571->clear();
    ui->Turbi_Runsample_Btn_5->setEnabled(false);
    Page_change=2;
    ui->Graph_Type_3->setDisabled(true);
    ui->Set_Graph_Btn->setDisabled(true);
    ui->Home_Btn_3->setDisabled(true);
    ui->Home_Btn_26->setDisabled(true);
    ui->Retest_7->setDisabled(true);
    ui->toolButton_44->setDisabled(true);
    ui->toolButton_45->setDisabled(true);
    ui->toolButton_73->setDisabled(true);

    QSqlQuery query;
    int intensity=0,Incubation_Time=0;
    QString no_std;
    query.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
    query.exec();
    while(query.next())
    {
        Incubation_Time=query.value(8).toInt();
        no_std=query.value(10).toString();
    }
    qDebug()<<"Inc_Time : "<<Incubation_Time<<" "<<"No_Std : "<<no_std;
    if(Turbi_cal_final==no_std)
    {
        Turbi_cal_finaled=1;
        ui->Cal1_TestBtn->setDisabled(false);
        ui->Cal2_TestBtn->setDisabled(false);
        ui->Cal3_TestBtn->setDisabled(false);
        ui->Cal4_TestBtn->setDisabled(false);
        ui->Cal5_TestBtn->setDisabled(false);
        ui->Cal6_TestBtn->setDisabled(false);
        ui->Cal7_TestBtn->setDisabled(false);
        ui->Cal8_TestBtn->setDisabled(false);
    }
    else
    {
        Turbi_Cal1=0;
        Turbi_Cal2=0;
        Turbi_Cal3=0;
        Turbi_Cal4=1;
        Turbi_Cal5=0;
        Turbi_Cal6=0;
        Turbi_Cal7=0;
        Turbi_Cal8=0;
        Turbi_cal_final=4;
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);
    }
    QString type = ui->Graph_Type_4->currentText();
    if(type=="--Select--")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
        msg.setStyleSheet("font:16pt Arial;");
        msg.setText("Please select Test type.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setStandardButtons(QMessageBox::Ok);
        if(msg.exec() == QMessageBox::Ok)
        {
            ui->stackedWidget_13->setCurrentIndex(0);
            ui->Cal1_TestBtn->setDisabled(false);
            ui->Cal2_TestBtn->setDisabled(false);
            ui->Cal3_TestBtn->setDisabled(false);
            ui->Cal4_TestBtn->setDisabled(false);
            ui->Cal5_TestBtn->setDisabled(false);
            ui->Cal6_TestBtn->setDisabled(false);
            ui->Cal7_TestBtn->setDisabled(false);
            ui->Cal8_TestBtn->setDisabled(false);
        }
    }
    else if(type=="Inside Incubation")
    {
        ui->label_626->setText("Add R1 & Sample \n then click Incubate");
        Read_d=0;
        ui->Turbi_Runsample_Btn_6->setText("Incubate");
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);

        ui->stackedWidget_16->setCurrentIndex(0);
        ui->stackedWidget_16->setVisible(true);
    }
    else if(type=="Outside Incubation")
    {
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);


        QSqlQuery qury;
        qury.prepare("select intensity from tests where sno=7");
        qury.exec();
        while(qury.next())
            intensity=qury.value(0).toInt();

        /*int Input_Min=0, Input_Max=0;
        QSqlQuery qq;
        qq.prepare("select Input_min,Inout_max from Turbidity_Setting where sno=1");
        qq.exec();
        while(qq.next())
        {
            Input_Min=qq.value(0).toInt();
            Input_Max=qq.value(1).toInt();

        }
        int Final_Inten = ((Output_Max-Output_Min)/(Input_Max-Input_Min))*(intensity-Input_Min)+Output_Min;*/
        Turbidity_read_Intensity=intensity;
        clearGraph_Turbidity_Grph();
        line=20;
        Turbi_Current_Read_Point=0;
        Turdata=1;

        total_read_point = (Incubation_Time*60);
        read_wave_LED=6; //LED
        read_wave135=1; //Photodiode 405nm (135°)
        read_wave180=0; //Photodiode 505nm (180°)
        filtwave135[0]=Turbidity_reading135();
        filtwave180[0]=Turbidity_reading180();
        read135=filtwave135[0];
        read180=filtwave180[0];
        ui->label_573->setText(TestName);
        ui->lcdNumber->display("00:00");
        DC_Motor();
        ui->stackedWidget->setCurrentIndex(36);
        countdown = QTime(0, Incubation_Time, 0, 0); // Update countdown with the new value of Time
        etimer.start();
        Incubationtimer->start(1000);
        Turbi_Update_Func();
    }
}

void MainWindow::on_Cal5_TestBtn_clicked()
{
    clearGraph_Turbidity();
    ui->label_567->clear();
    ui->label_568->clear();
    ui->label_570->clear();
    ui->label_571->clear();
    ui->Turbi_Runsample_Btn_5->setEnabled(false);
    Page_change=2;
    ui->Graph_Type_3->setDisabled(true);
    ui->Set_Graph_Btn->setDisabled(true);
    ui->Home_Btn_3->setDisabled(true);
    ui->Home_Btn_26->setDisabled(true);
    ui->Retest_7->setDisabled(true);
    ui->toolButton_44->setDisabled(true);
    ui->toolButton_45->setDisabled(true);
    ui->toolButton_73->setDisabled(true);

    QSqlQuery query;
    int intensity=0,Incubation_Time=0;
    QString no_std;
    query.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
    query.exec();
    while(query.next())
    {
        Incubation_Time=query.value(8).toInt();
        no_std=query.value(10).toString();
    }
    qDebug()<<"Inc_Time : "<<Incubation_Time<<" "<<"No_Std : "<<no_std;
    if(Turbi_cal_final==no_std)
    {
        Turbi_cal_finaled=1;
        ui->Cal1_TestBtn->setDisabled(false);
        ui->Cal2_TestBtn->setDisabled(false);
        ui->Cal3_TestBtn->setDisabled(false);
        ui->Cal4_TestBtn->setDisabled(false);
        ui->Cal5_TestBtn->setDisabled(false);
        ui->Cal6_TestBtn->setDisabled(false);
        ui->Cal7_TestBtn->setDisabled(false);
        ui->Cal8_TestBtn->setDisabled(false);
    }
    else
    {
        Turbi_Cal1=0;
        Turbi_Cal2=0;
        Turbi_Cal3=0;
        Turbi_Cal4=0;
        Turbi_Cal5=1;
        Turbi_Cal6=0;
        Turbi_Cal7=0;
        Turbi_Cal8=0;
        Turbi_cal_final=5;
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);
    }
    QString type = ui->Graph_Type_4->currentText();
    if(type=="--Select--")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
        msg.setStyleSheet("font:16pt Arial;");
        msg.setText("Please select Test type.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setStandardButtons(QMessageBox::Ok);
        if(msg.exec() == QMessageBox::Ok)
        {
            ui->stackedWidget_13->setCurrentIndex(0);
            ui->Cal1_TestBtn->setDisabled(false);
            ui->Cal2_TestBtn->setDisabled(false);
            ui->Cal3_TestBtn->setDisabled(false);
            ui->Cal4_TestBtn->setDisabled(false);
            ui->Cal5_TestBtn->setDisabled(false);
            ui->Cal6_TestBtn->setDisabled(false);
            ui->Cal7_TestBtn->setDisabled(false);
            ui->Cal8_TestBtn->setDisabled(false);
        }
    }
    else if(type=="Inside Incubation")
    {
        ui->label_626->setText("Add R1 & Sample \n then click Incubate");
        Read_d=0;
        ui->Turbi_Runsample_Btn_6->setText("Incubate");
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);

        ui->stackedWidget_16->setCurrentIndex(0);
        ui->stackedWidget_16->setVisible(true);
    }
    else if(type=="Outside Incubation")
    {
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);


        QSqlQuery qury;
        qury.prepare("select intensity from tests where sno=7");
        qury.exec();
        while(qury.next())
            intensity=qury.value(0).toInt();

        /*int Input_Min=0, Input_Max=0;
        QSqlQuery qq;
        qq.prepare("select Input_min,Inout_max from Turbidity_Setting where sno=1");
        qq.exec();
        while(qq.next())
        {
            Input_Min=qq.value(0).toInt();
            Input_Max=qq.value(1).toInt();

        }
        int Final_Inten = ((Output_Max-Output_Min)/(Input_Max-Input_Min))*(intensity-Input_Min)+Output_Min;*/
        Turbidity_read_Intensity=intensity;
        clearGraph_Turbidity_Grph();
        line=20;
        Turbi_Current_Read_Point=0;
        Turdata=1;

        total_read_point = (Incubation_Time*60);
        read_wave_LED=6; //LED
        read_wave135=1; //Photodiode 405nm (135°)
        read_wave180=0; //Photodiode 505nm (180°)
        filtwave135[0]=Turbidity_reading135();
        filtwave180[0]=Turbidity_reading180();
        read135=filtwave135[0];
        read180=filtwave180[0];
        ui->label_573->setText(TestName);
        ui->lcdNumber->display("00:00");
        DC_Motor();
        ui->stackedWidget->setCurrentIndex(36);
        countdown = QTime(0, Incubation_Time, 0, 0); // Update countdown with the new value of Time
        etimer.start();
        Incubationtimer->start(1000);
        Turbi_Update_Func();
    }
}

void MainWindow::on_Cal6_TestBtn_clicked()
{
    clearGraph_Turbidity();
    ui->label_567->clear();
    ui->label_568->clear();
    ui->label_570->clear();
    ui->label_571->clear();
    ui->Turbi_Runsample_Btn_5->setEnabled(false);
    Page_change=2;
    ui->Graph_Type_3->setDisabled(true);
    ui->Set_Graph_Btn->setDisabled(true);
    ui->Home_Btn_3->setDisabled(true);
    ui->Home_Btn_26->setDisabled(true);
    ui->Retest_7->setDisabled(true);
    ui->toolButton_44->setDisabled(true);
    ui->toolButton_45->setDisabled(true);
    ui->toolButton_73->setDisabled(true);

    QSqlQuery query;
    int intensity=0,Incubation_Time=0;
    QString no_std;
    query.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
    query.exec();
    while(query.next())
    {
        Incubation_Time=query.value(8).toInt();
        no_std=query.value(10).toString();
    }
    qDebug()<<"Inc_Time : "<<Incubation_Time<<" "<<"No_Std : "<<no_std;
    if(Turbi_cal_final==no_std)
    {
        Turbi_cal_finaled=1;
        ui->Cal1_TestBtn->setDisabled(false);
        ui->Cal2_TestBtn->setDisabled(false);
        ui->Cal3_TestBtn->setDisabled(false);
        ui->Cal4_TestBtn->setDisabled(false);
        ui->Cal5_TestBtn->setDisabled(false);
        ui->Cal6_TestBtn->setDisabled(false);
        ui->Cal7_TestBtn->setDisabled(false);
        ui->Cal8_TestBtn->setDisabled(false);
    }
    else
    {
        Turbi_Cal1=0;
        Turbi_Cal2=0;
        Turbi_Cal3=0;
        Turbi_Cal4=0;
        Turbi_Cal5=0;
        Turbi_Cal6=1;
        Turbi_Cal7=0;
        Turbi_Cal8=0;
        Turbi_cal_final=6;
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);
    }
    QString type = ui->Graph_Type_4->currentText();
    if(type=="--Select--")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
        msg.setStyleSheet("font:16pt Arial;");
        msg.setText("Please select Test type.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setStandardButtons(QMessageBox::Ok);
        if(msg.exec() == QMessageBox::Ok)
        {
            ui->stackedWidget_13->setCurrentIndex(0);
            ui->Cal1_TestBtn->setDisabled(false);
            ui->Cal2_TestBtn->setDisabled(false);
            ui->Cal3_TestBtn->setDisabled(false);
            ui->Cal4_TestBtn->setDisabled(false);
            ui->Cal5_TestBtn->setDisabled(false);
            ui->Cal6_TestBtn->setDisabled(false);
            ui->Cal7_TestBtn->setDisabled(false);
            ui->Cal8_TestBtn->setDisabled(false);
        }
    }
    else if(type=="Inside Incubation")
    {
        ui->label_626->setText("Add R1 & Sample \n then click Incubate");
        Read_d=0;
        ui->Turbi_Runsample_Btn_6->setText("Incubate");
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);

        ui->stackedWidget_16->setCurrentIndex(0);
        ui->stackedWidget_16->setVisible(true);
    }
    else if(type=="Outside Incubation")
    {
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);

        QSqlQuery qury;
        qury.prepare("select intensity from tests where sno=7");
        qury.exec();
        while(qury.next())
            intensity=qury.value(0).toInt();

        /*int Input_Min=0, Input_Max=0;
        QSqlQuery qq;
        qq.prepare("select Input_min,Inout_max from Turbidity_Setting where sno=1");
        qq.exec();
        while(qq.next())
        {
            Input_Min=qq.value(0).toInt();
            Input_Max=qq.value(1).toInt();

        }
        int Final_Inten = ((Output_Max-Output_Min)/(Input_Max-Input_Min))*(intensity-Input_Min)+Output_Min;*/
        Turbidity_read_Intensity=intensity;
        clearGraph_Turbidity_Grph();
        line=20;
        Turbi_Current_Read_Point=0;
        Turdata=1;

        total_read_point = (Incubation_Time*60);
        read_wave_LED=6; //LED
        read_wave135=1; //Photodiode 405nm (135°)
        read_wave180=0; //Photodiode 505nm (180°)
        filtwave135[0]=Turbidity_reading135();
        filtwave180[0]=Turbidity_reading180();
        read135=filtwave135[0];
        read180=filtwave180[0];
        ui->label_573->setText(TestName);
        ui->lcdNumber->display("00:00");
        DC_Motor();
        ui->stackedWidget->setCurrentIndex(36);
        countdown = QTime(0, Incubation_Time, 0, 0); // Update countdown with the new value of Time
        etimer.start();
        Incubationtimer->start(1000);
        Turbi_Update_Func();
    }
}

void MainWindow::on_Cal7_TestBtn_clicked()
{
    clearGraph_Turbidity();
    ui->label_567->clear();
    ui->label_568->clear();
    ui->label_570->clear();
    ui->label_571->clear();
    ui->Turbi_Runsample_Btn_5->setEnabled(false);
    Page_change=2;
    ui->Home_Btn_26->setDisabled(true);
    ui->Graph_Type_3->setDisabled(true);
    ui->Set_Graph_Btn->setDisabled(true);
    ui->Home_Btn_3->setDisabled(true);
    ui->Retest_7->setDisabled(true);
    ui->toolButton_44->setDisabled(true);
    ui->toolButton_45->setDisabled(true);
    ui->toolButton_73->setDisabled(true);

    QSqlQuery query;
    int intensity=0,Incubation_Time=0;
    QString no_std;
    query.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
    query.exec();
    while(query.next())
    {
        Incubation_Time=query.value(8).toInt();
        no_std=query.value(10).toString();
    }
    qDebug()<<"Inc_Time : "<<Incubation_Time<<" "<<"No_Std : "<<no_std;
    if(Turbi_cal_final==no_std)
    {
        Turbi_cal_finaled=1;
        ui->Cal1_TestBtn->setDisabled(false);
        ui->Cal2_TestBtn->setDisabled(false);
        ui->Cal3_TestBtn->setDisabled(false);
        ui->Cal4_TestBtn->setDisabled(false);
        ui->Cal5_TestBtn->setDisabled(false);
        ui->Cal6_TestBtn->setDisabled(false);
        ui->Cal7_TestBtn->setDisabled(false);
        ui->Cal8_TestBtn->setDisabled(false);
    }
    else
    {
        Turbi_cal_final=7;
        Turbi_Cal1=0;
        Turbi_Cal2=0;
        Turbi_Cal3=0;
        Turbi_Cal4=0;
        Turbi_Cal5=0;
        Turbi_Cal6=0;
        Turbi_Cal7=1;
        Turbi_Cal8=0;
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);
    }

    QString type = ui->Graph_Type_4->currentText();
    if(type=="--Select--")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
        msg.setStyleSheet("font:16pt Arial;");
        msg.setText("Please select Test type.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setStandardButtons(QMessageBox::Ok);
        if(msg.exec() == QMessageBox::Ok)
        {
            ui->stackedWidget_13->setCurrentIndex(0);
            ui->Cal1_TestBtn->setDisabled(false);
            ui->Cal2_TestBtn->setDisabled(false);
            ui->Cal3_TestBtn->setDisabled(false);
            ui->Cal4_TestBtn->setDisabled(false);
            ui->Cal5_TestBtn->setDisabled(false);
            ui->Cal6_TestBtn->setDisabled(false);
            ui->Cal7_TestBtn->setDisabled(false);
            ui->Cal8_TestBtn->setDisabled(false);
        }
    }
    else if(type=="Inside Incubation")
    {
        ui->label_626->setText("Add R1 & Sample \n then click Incubate");
        Read_d=0;
        ui->Turbi_Runsample_Btn_6->setText("Incubate");
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);

        ui->stackedWidget_16->setCurrentIndex(0);
        ui->stackedWidget_16->setVisible(true);
    }
    else if(type=="Outside Incubation")
    {
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);

        QSqlQuery qury;
        qury.prepare("select intensity from tests where sno=7");
        qury.exec();
        while(qury.next())
            intensity=qury.value(0).toInt();

        /*int Input_Min=0, Input_Max=0;
        QSqlQuery qq;
        qq.prepare("select Input_min,Inout_max from Turbidity_Setting where sno=1");
        qq.exec();
        while(qq.next())
        {
            Input_Min=qq.value(0).toInt();
            Input_Max=qq.value(1).toInt();

        }
        int Final_Inten = ((Output_Max-Output_Min)/(Input_Max-Input_Min))*(intensity-Input_Min)+Output_Min;*/
        Turbidity_read_Intensity=intensity;
        clearGraph_Turbidity_Grph();
        line=20;
        Turbi_Current_Read_Point=0;
        Turdata=1;

        total_read_point = (Incubation_Time*60);
        read_wave_LED=6; //LED
        read_wave135=1; //Photodiode 405nm (135°)
        read_wave180=0; //Photodiode 505nm (180°)
        filtwave135[0]=Turbidity_reading135();
        filtwave180[0]=Turbidity_reading180();
        read135=filtwave135[0];
        read180=filtwave180[0];
        ui->label_573->setText(TestName);
        ui->lcdNumber->display("00:00");
        DC_Motor();
        ui->stackedWidget->setCurrentIndex(36);
        countdown = QTime(0, Incubation_Time, 0, 0); // Update countdown with the new value of Time
        etimer.start();
        Incubationtimer->start(1000);
        Turbi_Update_Func();
    }
}


void MainWindow::on_Cal8_TestBtn_clicked()
{
    clearGraph_Turbidity();
    ui->label_567->clear();
    ui->label_568->clear();
    ui->label_570->clear();
    ui->label_571->clear();
    ui->Turbi_Runsample_Btn_5->setEnabled(false);
    Page_change=2;
    ui->Home_Btn_26->setDisabled(true);
    ui->Graph_Type_3->setDisabled(true);
    ui->Set_Graph_Btn->setDisabled(true);
    ui->Home_Btn_3->setDisabled(true);
    ui->Retest_7->setDisabled(true);
    ui->toolButton_44->setDisabled(true);
    ui->toolButton_45->setDisabled(true);
    ui->toolButton_73->setDisabled(true);
    QSqlQuery query;
    int intensity=0,Incubation_Time=0;
    QString no_std;
    query.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
    query.exec();
    while(query.next())
    {
        Incubation_Time=query.value(8).toInt();
        no_std=query.value(10).toString();
    }
    qDebug()<<"Inc_Time : "<<Incubation_Time<<" "<<"No_Std : "<<no_std;
    if(Turbi_cal_final==no_std)
    {
        Turbi_cal_finaled=1;
        ui->Cal1_TestBtn->setDisabled(false);
        ui->Cal2_TestBtn->setDisabled(false);
        ui->Cal3_TestBtn->setDisabled(false);
        ui->Cal4_TestBtn->setDisabled(false);
        ui->Cal5_TestBtn->setDisabled(false);
        ui->Cal6_TestBtn->setDisabled(false);
        ui->Cal7_TestBtn->setDisabled(false);
        ui->Cal8_TestBtn->setDisabled(false);
    }
    else
    {
        Turbi_Cal1=0;
        Turbi_Cal2=0;
        Turbi_Cal3=0;
        Turbi_Cal4=0;
        Turbi_Cal5=0;
        Turbi_Cal6=0;
        Turbi_Cal7=0;
        Turbi_Cal8=1;
        Turbi_cal_final=8;
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);
    }
    QString type = ui->Graph_Type_4->currentText();
    if(type=="--Select--")
    {
        QMessageBox msg(this);
        msg.setWindowFlags(Qt::Popup);
        msg.setStyleSheet("font: 75 20pt Liberation Serif ;");
        msg.setStyleSheet("font:16pt Arial;");
        msg.setText("Please select Test type.");
        QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
        auto newPixmap = p.scaled(80, 80);
        msg.setIconPixmap(newPixmap);
        msg.setStandardButtons(QMessageBox::Ok);
        if(msg.exec() == QMessageBox::Ok)
        {
            ui->stackedWidget_13->setCurrentIndex(0);
            ui->Cal1_TestBtn->setDisabled(false);
            ui->Cal2_TestBtn->setDisabled(false);
            ui->Cal3_TestBtn->setDisabled(false);
            ui->Cal4_TestBtn->setDisabled(false);
            ui->Cal5_TestBtn->setDisabled(false);
            ui->Cal6_TestBtn->setDisabled(false);
            ui->Cal7_TestBtn->setDisabled(false);
            ui->Cal8_TestBtn->setDisabled(false);
        }
    }
    else if(type=="Inside Incubation")
    {
        ui->label_626->setText("Add R1 & Sample \n then click Incubate");
        Read_d=0;
        ui->Turbi_Runsample_Btn_6->setText("Incubate");
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);

        ui->stackedWidget_16->setCurrentIndex(0);
        ui->stackedWidget_16->setVisible(true);
    }
    else if(type=="Outside Incubation")
    {
        ui->Cal1_TestBtn->setDisabled(true);
        ui->Cal2_TestBtn->setDisabled(true);
        ui->Cal3_TestBtn->setDisabled(true);
        ui->Cal4_TestBtn->setDisabled(true);
        ui->Cal5_TestBtn->setDisabled(true);
        ui->Cal6_TestBtn->setDisabled(true);
        ui->Cal7_TestBtn->setDisabled(true);
        ui->Cal8_TestBtn->setDisabled(true);


        QSqlQuery qury;
        qury.prepare("select intensity from tests where sno=7");
        qury.exec();
        while(qury.next())
            intensity=qury.value(0).toInt();

        /*int Input_Min=0, Input_Max=0;
        QSqlQuery qq;
        qq.prepare("select Input_min,Inout_max from Turbidity_Setting where sno=1");
        qq.exec();
        while(qq.next())
        {
            Input_Min=qq.value(0).toInt();
            Input_Max=qq.value(1).toInt();

        }
        int Final_Inten = ((Output_Max-Output_Min)/(Input_Max-Input_Min))*(intensity-Input_Min)+Output_Min;*/
        Turbidity_read_Intensity=intensity;
        clearGraph_Turbidity_Grph();
        line=20;
        Turbi_Current_Read_Point=0;
        Turdata=1;

        total_read_point = (Incubation_Time*60);
        read_wave_LED=6; //LED
        read_wave135=1; //Photodiode 405nm (135°)
        read_wave180=0; //Photodiode 505nm (180°)
        filtwave135[0]=Turbidity_reading135();
        filtwave180[0]=Turbidity_reading180();
        read135=filtwave135[0];
        read180=filtwave180[0];
        ui->label_573->setText(TestName);
        ui->lcdNumber->display("00:00");
        DC_Motor();
        ui->stackedWidget->setCurrentIndex(36);
        countdown = QTime(0, Incubation_Time, 0, 0); // Update countdown with the new value of Time
        etimer.start();
        Incubationtimer->start(1000);
        Turbi_Update_Func();
    }
}

int MainWindow::Turbidity_reading135()
{
    int blank[300];
    filtwave135[0]=0;
    pwmWrite (LED, Turbidity_read_Intensity);
    digitalWrite (LED_BASE + read_wave_LED,HIGH) ;
    QThread::msleep(200);
    for(int i=0;i<300;i++)
    {
        blank[i]=readadc(7-read_wave135);
        QThread::msleep(1);
        if(i>=250)
            filtwave135[0]+=blank[i];
    }
    QThread::msleep(10);
    filtwave135[0]=filtwave135[0]/50;
    if(filtwave135[0]==0)
    {
        filtwave135[0]=1;
    }
    return filtwave135[0];
}

int MainWindow::Autocalibrate_turbi()
{
    int blank[300];
    filtwave180[0]=0;
    pwmWrite (LED, Turbidity_read_Intensity);
    digitalWrite (LED_BASE + read_wave_LED,HIGH) ;
    QThread::msleep(200);
    for(int i=0;i<300;i++)
    {
        blank[i]=readadc(7-read_wave180);
        QThread::msleep(1);
        if(i>=250)
            filtwave180[0]+=blank[i];
    }
    QThread::msleep(10);
    filtwave180[0]=filtwave180[0]/50;
    if(filtwave180[0]==0)
    {
        filtwave180[0]=1;
    }
    return filtwave180[0];
}

int MainWindow::Turbidity_reading180()
{
    int blank[300];
    filtwave180[0]=0;
    QThread::msleep(200);
    for(int i=0;i<300;i++)
    {
        blank[i]=readadc(7-read_wave180);
        QThread::msleep(1);
        if(i>=250)
            filtwave180[0]+=blank[i];
    }
    QThread::msleep(10);
    filtwave180[0]=filtwave180[0]/50;
    if(filtwave180[0]==0)
    {
        filtwave180[0]=1;
    }
    return filtwave180[0];
}

void MainWindow::Turbidity_reading_Stop()
{
    ui->stackedWidget->setCurrentIndex(32);
    ui->stackedWidget_10->setCurrentIndex(1);
    ui->Cal1_TestBtn->setDisabled(false);
    ui->Cal2_TestBtn->setDisabled(false);
    ui->Cal3_TestBtn->setDisabled(false);
    ui->Cal4_TestBtn->setDisabled(false);
    ui->Cal5_TestBtn->setDisabled(false);
    ui->Cal6_TestBtn->setDisabled(false);
    ui->Cal7_TestBtn->setDisabled(false);
    ui->Cal8_TestBtn->setDisabled(false);
    qDebug()<<"Stop btn clicked";
    if(Turbi_Sample==1)
    {
        ui->Home_Btn_26->setEnabled(true);
        ui->RunCal_Btn_4->setEnabled(true);
        ui->Turbi_Runsample_Btn->setEnabled(true);
        ui->Turbi_Runsample_Btn_2->setEnabled(true);
    }
    ui->Graph_Type_3->setEnabled(true);
    ui->Set_Graph_Btn->setEnabled(true);
    ui->Retest_7->setEnabled(true);
    ui->toolButton_44->setEnabled(true);
    ui->toolButton_45->setEnabled(true);
    ui->Home_Btn_26->setEnabled(true);
}

void MainWindow::Turbidity_reading_AfterInc()
{
    QSqlQuery query;
    double DeltaIs=0,Result=0,Main_Result=0;
    double Cal1=0,Cal2=0,Cal3=0,Cal4=0,Cal5=0,Cal6=0,Cal7=0,Cal8=0,A_Val=0,B_Val=0,C_Val=0,D_Val=0,G_Val=0;
    double OldAbs1=0,OldAbs2=0,OldAbs3=0,OldAbs4=0,OldAbs5=0,OldAbs6=0,OldAbs7=0,OldAbs8=0;
    QString Rctn;
    double Slop =0 ,Interc=0;
    QString Graph_Type;
    int intensity=0,No_of_cal=0;
    double x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0,x8=0;
    double y1=0,y2=0,y3=0,y4=0,y5=0,y6=0,y7=0,y8=0;
    double xmin=0,xmax=0,ymin=0,ymax=0;
    QVector<double> MainxData, MainyData;
    QVector<double> xData1, yData1;
    QVector<double> xData2, yData2;
    QVector<double> xData3, yData3;
    QVector<double> xData4, yData4;
    QVector<double> xData5, yData5;
    QVector<double> xData6, yData6;
    QVector<double> xData7, yData7;
    QVector<double> logxData1, logxData2,logxData3, logxData4, logxData5, logxData6,logxData7, logMainxData;
    QVector<double> logyData1, logyData2,logyData3, logyData4, logyData5, logyData6,logyData7, logMainyData;
    double logx1=0,logx2=0,logx3=0,logx4=0,logx5=0,logx6=0,logx7=0,logx8=0;
    double logy1=0,logy2=0,logy3=0,logy4=0,logy5=0,logy6=0,logy7=0,logy8=0;
    double Cal_fact=0;
    query.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
    query.exec();
    while(query.next())
    {
        Cal_fact=query.value(6).toDouble();
        No_of_cal=query.value(10).toInt();
        Cal1=query.value(11).toDouble();
        Cal2=query.value(12).toDouble();
        Cal3=query.value(13).toDouble();
        Cal4=query.value(14).toDouble();
        Cal5=query.value(15).toDouble();
        Cal6=query.value(16).toDouble();
        Cal7=query.value(17).toDouble();
        Cal8=query.value(18).toDouble();

        OldAbs1=query.value(49).toDouble();
        OldAbs2=query.value(50).toDouble();
        OldAbs3=query.value(51).toDouble();
        OldAbs4=query.value(52).toDouble();
        OldAbs5=query.value(53).toDouble();
        OldAbs6=query.value(54).toDouble();
        OldAbs7=query.value(55).toDouble();
        OldAbs8=query.value(56).toDouble();

        Slop=query.value(74).toDouble();
        Interc=query.value(75).toDouble();
        Graph_Type=query.value(9).toString();
        A_Val=query.value(76).toDouble();
        B_Val=query.value(77).toDouble();
        C_Val=query.value(78).toDouble();
        D_Val=query.value(79).toDouble();
        G_Val=query.value(80).toDouble();
        Rctn=query.value(81).toString();
    }

    QSqlQuery qury;
    qury.prepare("select intensity from tests where sno=7");
    qury.exec();
    while(qury.next())
        intensity=qury.value(0).toInt();

    x1=Cal1;
    x2=Cal2;
    x3=Cal3;
    x4=Cal4;
    x5=Cal5;
    x6=Cal6;
    x7=Cal7;
    x8=Cal8;

    y1=OldAbs1;
    y2=OldAbs2;
    y3=OldAbs3;
    y4=OldAbs4;
    y5=OldAbs5;
    y6=OldAbs6;
    y7=OldAbs7;
    y8=OldAbs8;

    xData1.append(x1);
    yData1.append(y1);
    xData2.append(x1);xData2.append(x2);
    yData2.append(y1);yData2.append(y2);
    xData3.append(x1);xData3.append(x2);xData3.append(x3);
    yData3.append(y1);yData3.append(y2);yData3.append(y3);
    xData4.append(x1);xData4.append(x2);xData4.append(x3);xData4.append(x4);
    yData4.append(y1);yData4.append(y2);yData4.append(y3);yData4.append(y4);
    xData5.append(x1);xData5.append(x2);xData5.append(x3);xData5.append(x4);xData5.append(x5);
    yData5.append(y1);yData5.append(y2);yData5.append(y3);yData5.append(y4);yData5.append(y5);
    xData6.append(x1);xData6.append(x2);xData6.append(x3);xData6.append(x4);xData6.append(x5);xData6.append(x6);
    yData6.append(y1);yData6.append(y2);yData6.append(y3);yData6.append(y4);yData6.append(y5);yData6.append(y6);
    xData7.append(x1);xData7.append(x2);xData7.append(x3);xData7.append(x4);xData7.append(x5);xData7.append(x6);xData7.append(x7);
    yData7.append(y1);yData7.append(y2);yData7.append(y3);yData7.append(y4);yData7.append(y5);yData7.append(y6);yData7.append(y7);
    MainxData.append(x1);MainxData.append(x2);MainxData.append(x3);MainxData.append(x4);MainxData.append(x5);MainxData.append(x6);MainxData.append(x7);MainxData.append(x8);
    MainyData.append(y1);MainyData.append(y2);MainyData.append(y3);MainyData.append(y4);MainyData.append(y5);MainyData.append(y6);MainyData.append(y7);MainyData.append(y8);


    logy1=log10(y1);
    logy2=log10(y2);
    logy3=log10(y3);
    logy4=log10(y4);
    logy5=log10(y5);
    logy6=log10(y6);
    logy7=log10(y7);
    logy8=log10(y8);

    logx1=log10(x1);
    logx2=log10(x2);
    logx3=log10(x3);
    logx4=log10(x4);
    logx5=log10(x5);
    logx6=log10(x6);
    logx7=log10(x7);
    logx8=log10(x8);

    logyData1.append(logy1);
    logyData2.append(logy1);logyData2.append(logy2);
    logyData3.append(logy1);logyData3.append(logy2);logyData3.append(logy3);
    logyData4.append(logy1);logyData4.append(logy2);logyData4.append(logy3);logyData4.append(logy4);
    logyData5.append(logy1);logyData5.append(logy2);logyData5.append(logy3);logyData5.append(logy4);logyData5.append(logy5);
    logyData6.append(logy1);logyData6.append(logy2);logyData6.append(logy3);logyData6.append(logy4);logyData6.append(logy5);logyData6.append(logy6);
    logyData7.append(logy1);logyData7.append(logy2);logyData7.append(logy3);logyData7.append(logy4);logyData7.append(logy5);logyData7.append(logy6);logyData7.append(logy7);
    logMainyData.append(logy1);logMainyData.append(logy2);logMainyData.append(logy3);logMainyData.append(logy4);logMainyData.append(logy5);logMainyData.append(logy6);logMainyData.append(logy7);logMainyData.append(logy8);


    logxData1.append(logx1);
    logxData2.append(logx1);logxData2.append(logx2);
    logxData3.append(logx1);logxData3.append(logx2);logxData3.append(logx3);
    logxData4.append(logx1);logxData4.append(logx2);logxData4.append(logx3);logxData4.append(logx4);
    logxData5.append(logx1);logxData5.append(logx2);logxData5.append(logx3);logxData5.append(logx4);logxData5.append(logx5);
    logxData6.append(logx1);logxData6.append(logx2);logxData6.append(logx3);logxData6.append(logx4);logxData6.append(logx5);logxData6.append(logx6);
    logxData7.append(logx1);logxData7.append(logx2);logxData7.append(logx3);logxData7.append(logx4);logxData7.append(logx5);logxData7.append(logx6);logxData7.append(logx7);
    logMainxData.append(logx1);logMainxData.append(logx2);logMainxData.append(logx3);logMainxData.append(logx4);logMainxData.append(logx5);logMainxData.append(logx6);logMainxData.append(logx7);logMainxData.append(logx8);


    /* int Input_Min=0, Input_Max=0;
    QSqlQuery qq;
    qq.prepare("select Input_min,Input_max from Turbidity_Setting where sno=1");
    qq.exec();
    while(qq.next())
    {
        Input_Min=qq.value(0).toInt();
        Input_Max=qq.value(1).toInt();

    }
    int Final_Inten = ((Output_Max-Output_Min)/(Input_Max-Input_Min))*(intensity-Input_Min)+Output_Min;*/
    Turbidity_read_Intensity=intensity;
    qDebug()<<"read Intenr :"<<Turbidity_read_Intensity;
    read_wave_LED=6; //LED
    read_wave135=1; //Photodiode 405nm (135°)
    read_wave180=0; //Photodiode 505nm (180°)
    Afterfiltwave135[0]=Turbidity_reading135();
    Afterfiltwave180[0]=Turbidity_reading180();
    Afterread135=Afterfiltwave135[0];
    Afterread180=Afterfiltwave180[0];
    DeltaIs=Afterread135-read135;
    Result=DeltaIs/read180;
    before_data = std::round(Result * 10000) / 10000; // Round to 4 decimal places
    std::cout << "Rounded value: " << before_data << std::endl;
    //before_data=QString::number(Result,'f',4);
    Data=QString::number(Result,'f',4);
    ui->label_570->setText(Data);
    double fin_data = Data.toDouble();
    Turbi_Current_Read_Point = Turbi_Current_Read_Point+20;
    qDebug()<<"Init Read135 : "<< read135<<" AfterRead135 : "<<Afterread135<<"Init Read180 : "<<read180<<" AfterRead180 : "<<Afterread180<<"Result : "<<Result<<" Current X Data : "<< Turbi_Current_Read_Point<<" "<<"Current Y Data : "<<fin_data;

    addPoint(Turbi_Current_Read_Point,fin_data);
    ui->OD_lbl_val->setText(QString::number(Result,'f',4));
    double A1 = static_cast<double>(Init_Read) / read180;
    double A2 = static_cast<double>(Init_Read) / Afterread180;
    double Od_val = ((log10(A2)) - (log10(A1)));
    qDebug()<<"Data : "<<Data;
    qDebug()<<"A1 : "<<A1<<" "<<"A2 : "<<A2;
    qDebug()<<"OD_Value : "<<Od_val;
    qDebug()<<"Init_Read : "<<Init_Read;
    qDebug()<<"Afterread180 : "<<Afterread180;
    qDebug()<<"read180 : "<<read180;
    qDebug()<<"log val : "<<(log10(Init_Read / Afterread180))<<" "<<(log10(Init_Read / read180))<<"Sub : "<<((log10(Init_Read / Afterread180)) - (log10(Init_Read / read180)));
    qDebug()<<"Countdown end...";
    Turbi_plot_timer->stop();
    clearGraph_Turbidity();
    ui->label_571->setText(QString::number(Od_val , 'f', 4));
    ui->OD_lbl_val_2->setText(QString::number(Od_val , 'f', 4));
    ui->Turbi_Runsample_Btn_5->setEnabled(true);
    ui->Cal1_TestBtn->setEnabled(true);
    ui->Cal2_TestBtn->setEnabled(true);
    ui->Cal3_TestBtn->setEnabled(true);
    ui->Cal4_TestBtn->setEnabled(true);
    ui->Cal5_TestBtn->setEnabled(true);
    ui->Cal6_TestBtn->setEnabled(true);
    ui->Cal7_TestBtn->setEnabled(true);
    ui->Cal8_TestBtn->setEnabled(true);
    ui->Graph_Type_3->setEnabled(true);
    ui->Set_Graph_Btn->setEnabled(true);
    ui->Home_Btn_3->setEnabled(true);
    ui->Home_Btn_26->setEnabled(true);
    ui->Retest_7->setEnabled(true);
    ui->toolButton_44->setEnabled(true);
    ui->toolButton_45->setEnabled(true);
    QString CalAbs,Date;
    QString Data1,Data2,Data3,Data4,Data5,Data6,Data7,Data8;
    QDate date=QDate::currentDate();
    Date= date.toString("yyyy / MM / dd");

    Data1 = Date.remove(" "); // Remove any spaces
    Data2 = Date.remove(" "); // Remove any spaces
    Data3 = Date.remove(" "); // Remove any spaces
    Data4 = Date.remove(" "); // Remove any spaces
    Data5 = Date.remove(" "); // Remove any spaces
    Data6 = Date.remove(" "); // Remove any spaces
    Data7 = Date.remove(" "); // Remove any spaces
    Data8 = Date.remove(" "); // Remove any spaces

    QDate currentDate1 = QDate::fromString(Data1, "yyyy/MM/dd");
    QDate currentDate2 = QDate::fromString(Data2, "yyyy/MM/dd");
    QDate currentDate3 = QDate::fromString(Data3, "yyyy/MM/dd");
    QDate currentDate4 = QDate::fromString(Data4, "yyyy/MM/dd");
    QDate currentDate5 = QDate::fromString(Data5, "yyyy/MM/dd");
    QDate currentDate6 = QDate::fromString(Data6, "yyyy/MM/dd");
    QDate currentDate7 = QDate::fromString(Data7, "yyyy/MM/dd");
    QDate currentDate8 = QDate::fromString(Data8, "yyyy/MM/dd");

    QDate expiryDate1 = calculateExpiryDate1(currentDate1);
    QDate expiryDate2 = calculateExpiryDate2(currentDate2);
    QDate expiryDate3 = calculateExpiryDate3(currentDate3);
    QDate expiryDate4 = calculateExpiryDate4(currentDate4);
    QDate expiryDate5 = calculateExpiryDate5(currentDate5);
    QDate expiryDate6 = calculateExpiryDate6(currentDate6);
    QDate expiryDate7 = calculateExpiryDate7(currentDate7);
    QDate expiryDate8 = calculateExpiryDate8(currentDate8);

    QDate expiryDateOnly1 = expiryDate1;
    QDate expiryDateOnly2 = expiryDate2;
    QDate expiryDateOnly3 = expiryDate3;
    QDate expiryDateOnly4 = expiryDate4;
    QDate expiryDateOnly5 = expiryDate5;
    QDate expiryDateOnly6 = expiryDate6;
    QDate expiryDateOnly7 = expiryDate7;
    QDate expiryDateOnly8 = expiryDate8;

    QString formattedDate1 = expiryDateOnly1.toString(Qt::DateFormat::ISODate);
    QString formattedDate2 = expiryDateOnly2.toString(Qt::DateFormat::ISODate);
    QString formattedDate3 = expiryDateOnly3.toString(Qt::DateFormat::ISODate);
    QString formattedDate4 = expiryDateOnly4.toString(Qt::DateFormat::ISODate);
    QString formattedDate5 = expiryDateOnly5.toString(Qt::DateFormat::ISODate);
    QString formattedDate6 = expiryDateOnly6.toString(Qt::DateFormat::ISODate);
    QString formattedDate7 = expiryDateOnly7.toString(Qt::DateFormat::ISODate);
    QString formattedDate8 = expiryDateOnly8.toString(Qt::DateFormat::ISODate);
    QString Expiry="Expired";

    if (QDate::currentDate() > expiryDateOnly1)
        ui->Expiry1_lbl->setText("<b><font color='red'>"+Expiry+"</font></b>");
    else
        ui->Expiry1_lbl->setText("<b><font color='green'>"+formattedDate1+"</font></b>");

    if (QDate::currentDate() > expiryDateOnly2)
        ui->Expiry2_lbl->setText("<b><font color='red'>"+Expiry+"</font></b>");
    else
        ui->Expiry2_lbl->setText("<b><font color='green'>"+formattedDate2+"</font></b>");

    if (QDate::currentDate() > expiryDateOnly3)
        ui->Expiry3_lbl->setText("<b><font color='red'>"+Expiry+"</font></b>");
    else
        ui->Expiry3_lbl->setText("<b><font color='green'>"+formattedDate3+"</font></b>");

    if (QDate::currentDate() > expiryDateOnly4)
        ui->Expiry4_lbl->setText("<b><font color='red'>"+Expiry+"</font></b>");
    else
        ui->Expiry4_lbl->setText("<b><font color='green'>"+formattedDate4+"</font></b>");

    if (QDate::currentDate() > expiryDateOnly5)
        ui->Expiry5_lbl->setText("<b><font color='red'>"+Expiry+"</font></b>");
    else
        ui->Expiry5_lbl->setText("<b><font color='green'>"+formattedDate5+"</font></b>");

    if (QDate::currentDate() > expiryDateOnly6)
        ui->Expiry6_lbl->setText("<b><font color='red'>"+Expiry+"</font></b>");
    else
        ui->Expiry6_lbl->setText("<b><font color='green'>"+formattedDate6+"</font></b>");

    if (QDate::currentDate() > expiryDateOnly7)
        ui->Expiry7_lbl->setText("<b><font color='red'>"+Expiry+"</font></b>");
    else
        ui->Expiry7_lbl->setText("<b><font color='green'>"+formattedDate7+"</font></b>");

    if (QDate::currentDate() > expiryDateOnly8)
        ui->Expiry8_lbl->setText("<b><font color='red'>"+Expiry+"</font></b>");
    else
        ui->Expiry8_lbl->setText("<b><font color='green'>"+formattedDate8+"</font></b>");

    CalAbs=QString::number(Result,'f',4);
    QSqlQuery qy;
    if(Turbi_Cal1==1)
    {
        qy.prepare("Update Turbidity_test set Abs1='"+CalAbs+"' ,Old_Abs1='"+CalAbs+"' , Cal1_Date='"+Date+"' , Cal1_ExDate='"+formattedDate1+"' where TestName='"+TestName+"'");
        ui->lineEdit_24->setText(QString::number(Result,'f',4));
        double factor = Cal1/before_data;
        QString Fact;
        if(factor>100)
            Fact=QString::number(factor,'f',0);
        else
            Fact=QString::number(factor,'f',2);
        qDebug()<<"The factor value is : "<<Fact;
        QSqlQuery qyy;
        qyy.prepare("Update Turbidity_test set Fact='"+Fact+"' where TestName='"+TestName+"'");
        qyy.exec();
    }
    else if(Turbi_Cal2==1)
    {
        qy.prepare("Update Turbidity_test set Abs2='"+CalAbs+"' ,Old_Abs2='"+CalAbs+"' , Cal2_Date='"+Date+"', Cal2_ExDate='"+formattedDate2+"' where TestName='"+TestName+"'");
        ui->lineEdit_57->setText(QString::number(Result,'f',4));
    }
    else if(Turbi_Cal3==1)
    {
        qy.prepare("Update Turbidity_test set Abs3='"+CalAbs+"' ,Old_Abs3='"+CalAbs+"' , Cal3_Date='"+Date+"', Cal3_ExDate='"+formattedDate3+"' where TestName='"+TestName+"'");
        ui->lineEdit_58->setText(QString::number(Result,'f',4));
    }
    else if(Turbi_Cal4==1)
    {
        qy.prepare("Update Turbidity_test set Abs4='"+CalAbs+"' ,Old_Abs4='"+CalAbs+"' , Cal4_Date='"+Date+"', Cal4_ExDate='"+formattedDate4+"' where TestName='"+TestName+"'");
        ui->lineEdit_67->setText(QString::number(Result,'f',4));
    }
    else if(Turbi_Cal5==1)
    {
        qy.prepare("Update Turbidity_test set Abs5='"+CalAbs+"' ,Old_Abs5='"+CalAbs+"' , Cal5_Date='"+Date+"', Cal5_ExDate='"+formattedDate5+"' where TestName='"+TestName+"'");
        ui->lineEdit_68->setText(QString::number(Result,'f',4));
    }
    else if(Turbi_Cal6==1)
    {
        qy.prepare("Update Turbidity_test set Abs6='"+CalAbs+"' ,Old_Abs6='"+CalAbs+"' , Cal6_Date='"+Date+"', Cal6_ExDate='"+formattedDate6+"' where TestName='"+TestName+"'");
        ui->lineEdit_69->setText(QString::number(Result,'f',4));
    }
    else if(Turbi_Cal7==1)
    {
        qy.prepare("Update Turbidity_test set Abs7='"+CalAbs+"' ,Old_Abs7='"+CalAbs+"' , Cal7_Date='"+Date+"', Cal7_ExDate='"+formattedDate7+"' where TestName='"+TestName+"'");
        ui->lineEdit_70->setText(QString::number(Result,'f',4));
    }
    else if(Turbi_Cal8==1)
    {
        qy.prepare("Update Turbidity_test set Abs8='"+CalAbs+"' ,Old_Abs8='"+CalAbs+"' , Cal8_Date='"+Date+"', Cal8_ExDate='"+formattedDate8+"' where TestName='"+TestName+"'");
        ui->lineEdit_71->setText(QString::number(Result,'f',4));
    }

    qy.exec();
    ui->stackedWidget_16->setVisible(false);
    Turbidity_Graph_plot();
    if(Turbi_Sample==1)
    {
        ui->Home_Btn_26->setEnabled(true);
        ui->RunCal_Btn_4->setEnabled(true);
        ui->Turbi_Runsample_Btn->setEnabled(true);
        ui->Turbi_Runsample_Btn_2->setEnabled(true);

        qDebug()<<"Graph_Type : "<<Graph_Type<<Slop<<Interc;
        Main_Result=Data.toDouble();
        //  Main_Result=ui->lineEdit_24->text().toDouble();
        if(No_of_cal==1)
        {

            double Result=before_data*Cal_fact;
            if(Result>100)
                ui->IsIo_lbl->setText(QString::number(Result,'f',0));
            else
                ui->IsIo_lbl->setText(QString::number(Result,'f',2));
        }
        else
        {

            if(Graph_Type=="Linear")
            {
                double MainResult = (Main_Result-Interc)/Slop;
                if(MainResult>100)
                    ui->IsIo_lbl->setText(QString::number(MainResult,'f',0));
                else
                    ui->IsIo_lbl->setText(QString::number(MainResult,'f',2));

                qDebug()<<"MainResult : "<<MainResult;
            }
            else if(Graph_Type=="Linear-Log")
            {
                double MainResult = (Main_Result-Interc)/Slop;
                double log_val=qPow(10,MainResult);
                if(log_val>100)
                    ui->IsIo_lbl->setText(QString::number(log_val,'f',0));
                else
                    ui->IsIo_lbl->setText(QString::number(log_val,'f',2));
                qDebug()<<"MainResult : "<<MainResult;
            }
            else if(Graph_Type=="Log-Linear")
            {
                double log_val=log10(Main_Result);
                double MainResult = (log_val-Interc)/Slop;
                if(MainResult>100)
                    ui->IsIo_lbl->setText(QString::number(MainResult,'f',0));
                else
                    ui->IsIo_lbl->setText(QString::number(MainResult,'f',2));
                qDebug()<<"MainResult : "<<MainResult;
            }
            else if(Graph_Type=="Log-Log")
            {
                double Result_log=log10(Main_Result);
                double MainResult = (Result_log-Interc)/Slop;
                double log_val=qPow(10,MainResult);
                if(log_val>100)
                    ui->IsIo_lbl->setText(QString::number(log_val,'f',0));
                else
                    ui->IsIo_lbl->setText(QString::number(log_val,'f',2));
                qDebug()<<"MainResult : "<<MainResult;
            }
            else if(Graph_Type=="Point-Point")
            {
                double slope=0, intercept=0,res=0;
                if(Rctn=="Increasing")
                {
                    if(No_of_cal==1 || No_of_cal==2)
                    {
                        if (Main_Result >= y1) // set 1 (56-110)
                        {
                            slope= (y2-y1)/(x2-x1);
                            intercept = y1-(slope*x1);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                    }
                    else if(No_of_cal==3)
                    {
                        if (Main_Result <= y2) // set 1 (56-110)
                        {
                            slope= (y2-y1)/(x2-x1);
                            intercept = y1-(slope*x1);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y2) // set 2 (110-170)
                        {
                            slope = (y3-y2)/(x3-x2);
                            intercept = y2-(slope*x2);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                    }
                    else if(No_of_cal==4)
                    {
                        if (Main_Result <= y2) // set 1 (56-110)
                        {
                            slope= (y2-y1)/(x2-x1);
                            intercept = y1-(slope*x1);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y2 && Main_Result <= y3) // set 2 (110-170)
                        {
                            slope = (y3-y2)/(x3-x2);
                            intercept = y2-(slope*x2);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y3) //set 3 (170-220)
                        {
                            slope = (y4-y3)/(x4-x3);
                            intercept = y3-(slope*x3);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                    }
                    else if(No_of_cal==5)
                    {
                        if (Main_Result <= y2) // set 1 (56-110)
                        {
                            slope= (y2-y1)/(x2-x1);
                            intercept = y1-(slope*x1);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y2 && Main_Result <= y3) // set 2 (110-170)
                        {
                            slope = (y3-y2)/(x3-x2);
                            intercept = y2-(slope*x2);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y3 && Main_Result <= y4) //set 3 (170-220)
                        {
                            slope = (y4-y3)/(x4-x3);
                            intercept = y3-(slope*x3);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y4) //set 4 (220-280)
                        {
                            slope = (y5-y4)/(x5-x4);
                            intercept = y4-(slope*x4);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                    }
                    else if(No_of_cal==6)
                    {
                        if (Main_Result <= y2) // set 1 (56-110)
                        {
                            slope= (y2-y1)/(x2-x1);
                            intercept = y1-(slope*x1);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y2 && Main_Result <= y3) // set 2 (110-170)
                        {
                            slope = (y3-y2)/(x3-x2);
                            intercept = y2-(slope*x2);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y3 && Main_Result <= y4) //set 3 (170-220)
                        {
                            slope = (y4-y3)/(x4-x3);
                            intercept = y3-(slope*x3);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y4 && Main_Result <= y5) //set 4 (220-280)
                        {
                            slope = (y5-y4)/(x5-x4);
                            intercept = y4-(slope*x4);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y5) //set 4 (220-280)
                        {
                            slope = (y6-y5)/(x6-x5);
                            intercept = y5-(slope*x5);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                    }
                    else if(No_of_cal==7 || No_of_cal==8)
                    {
                        if (Main_Result <= y2) // set 1 (56-110)
                        {
                            slope= (y2-y1)/(x2-x1);
                            intercept = y1-(slope*x1);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y2 && Main_Result <= y3) // set 2 (110-170)
                        {
                            slope = (y3-y2)/(x3-x2);
                            intercept = y2-(slope*x2);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y3 && Main_Result <= y4) //set 3 (170-220)
                        {
                            slope = (y4-y3)/(x4-x3);
                            intercept = y3-(slope*x3);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y4 && Main_Result <= y5) //set 4 (220-280)
                        {
                            slope = (y5-y4)/(x5-x4);
                            intercept = y4-(slope*x4);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y5 && Main_Result <= y6) //set 4 (220-280)
                        {
                            slope = (y6-y5)/(x6-x5);
                            intercept = y5-(slope*x5);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y6 && Main_Result <= y7) //set 4 (220-280)
                        {
                            slope = (y7-y6)/(x7-x6);
                            intercept = y6-(slope*x6);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result > y7) //set 4 (220-280)
                        {
                            slope = (y8-y7)/(x8-x7);
                            intercept = y7-(slope*x7);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                    }
                }
                else if(Rctn=="Decreasing")
                {
                    if(No_of_cal==1 || No_of_cal==2)
                    {
                        if (Main_Result <= y1 || Main_Result>=y1) // set 1 (56-110)
                        {
                            slope= (y2-y1)/(x2-x1);
                            intercept = y1-(slope*x1);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                    }
                    else if(No_of_cal==3)
                    {
                        if (Main_Result >= y2) // set 1 (56-110)
                        {
                            slope= (y2-y1)/(x2-x1);
                            intercept = y1-(slope*x1);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y2) // set 2 (110-170)
                        {
                            slope = (y3-y2)/(x3-x2);
                            intercept = y2-(slope*x2);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                    }
                    else if(No_of_cal==4)
                    {
                        if (Main_Result >= y2) // set 1 (56-110)
                        {
                            slope= (y2-y1)/(x2-x1);
                            intercept = y1-(slope*x1);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y2 && Main_Result >= y3) // set 2 (110-170)
                        {
                            slope = (y3-y2)/(x3-x2);
                            intercept = y2-(slope*x2);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y3) //set 3 (170-220)
                        {
                            slope = (y4-y3)/(x4-x3);
                            intercept = y3-(slope*x3);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                    }
                    else if(No_of_cal==5)
                    {
                        if (Main_Result >= y2) // set 1 (56-110)
                        {
                            slope= (y2-y1)/(x2-x1);
                            intercept = y1-(slope*x1);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y2 && Main_Result >= y3) // set 2 (110-170)
                        {
                            slope = (y3-y2)/(x3-x2);
                            intercept = y2-(slope*x2);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y3 && Main_Result >= y4) //set 3 (170-220)
                        {
                            slope = (y4-y3)/(x4-x3);
                            intercept = y3-(slope*x3);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y4) //set 4 (220-280)
                        {
                            slope = (y5-y4)/(x5-x4);
                            intercept = y4-(slope*x4);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                    }
                    else if(No_of_cal==6)
                    {
                        if (Main_Result >= y2) // set 1 (56-110)
                        {
                            slope= (y2-y1)/(x2-x1);
                            intercept = y1-(slope*x1);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y2 && Main_Result >= y3) // set 2 (110-170)
                        {
                            slope = (y3-y2)/(x3-x2);
                            intercept = y2-(slope*x2);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y3 && Main_Result >= y4) //set 3 (170-220)
                        {
                            slope = (y4-y3)/(x4-x3);
                            intercept = y3-(slope*x3);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y4 && Main_Result >= y5) //set 4 (220-280)
                        {
                            slope = (y5-y4)/(x5-x4);
                            intercept = y4-(slope*x4);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y5) //set 4 (220-280)
                        {
                            slope = (y6-y5)/(x6-x5);
                            intercept = y5-(slope*x5);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                    }
                    else if(No_of_cal==7 || No_of_cal==8)
                    {
                        if (Main_Result >= y2) // set 1 (56-110)
                        {
                            slope= (y2-y1)/(x2-x1);
                            intercept = y1-(slope*x1);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y2 && Main_Result >= y3) // set 2 (110-170)
                        {
                            slope = (y3-y2)/(x3-x2);
                            intercept = y2-(slope*x2);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y3 && Main_Result >= y4) //set 3 (170-220)
                        {
                            slope = (y4-y3)/(x4-x3);
                            intercept = y3-(slope*x3);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y4 && Main_Result >= y5) //set 4 (220-280)
                        {
                            slope = (y5-y4)/(x5-x4);
                            intercept = y4-(slope*x4);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y5 && Main_Result >= y6) //set 4 (220-280)
                        {
                            slope = (y6-y5)/(x6-x5);
                            intercept = y5-(slope*x5);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y6 && Main_Result >= y7) //set 4 (220-280)
                        {
                            slope = (y7-y6)/(x7-x6);
                            intercept = y6-(slope*x6);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                        else if (Main_Result < y7) //set 4 (220-280)
                        {
                            slope = (y8-y7)/(x8-x7);
                            intercept = y7-(slope*x7);
                            res= (Main_Result-intercept)/slope;
                            if(res>100)
                                ui->IsIo_lbl->setText(QString::number(res,'f',0));
                            else
                                ui->IsIo_lbl->setText(QString::number(res,'f',2));
                        }
                    }
                }
                qDebug()<<"Slope : "<<slope;
                qDebug()<<"Intercept : "<<intercept;
                qDebug()<<"Res : "<<res;
            }

            else if(Graph_Type=="Ply-2nd")
            {
                real_1d_array x;
                real_1d_array y;
                qDebug()<<"entered else  if";
                if(No_of_cal==1)
                {
                    x.setlength(1);
                    y.setlength(1);
                    x[0]=yData1[0];
                    y[0]=xData1[0];

                }
                else if(No_of_cal==2)
                {
                    x.setlength(2);
                    y.setlength(2);
                    for(int i=0;i<2;i++)
                    {

                        x[i]=yData2[i];
                        y[i]=xData2[i];
                    }
                }
                else if(No_of_cal==3)
                {
                    x.setlength(3);
                    y.setlength(3);
                    for(int i=0;i<3;i++)
                    {
                        x[i]=yData3[i];
                        y[i]=xData3[i];
                    }
                }
                else if(No_of_cal==4)
                {
                    x.setlength(4);
                    y.setlength(4);
                    for(int i=0;i<4;i++)
                    {
                        x[i]=yData4[i];
                        y[i]=xData4[i];
                    }
                }
                else if(No_of_cal==5)
                {
                    x.setlength(5);
                    y.setlength(5);
                    for(int i=0;i<5;i++)
                    {
                        x[i]=yData5[i];
                        y[i]=xData5[i];
                    }
                }
                else if(No_of_cal==6)
                {
                    x.setlength(6);
                    y.setlength(6);
                    for(int i=0;i<6;i++)
                    {
                        x[i]=yData6[i];
                        y[i]=xData6[i];
                    }
                }
                else if(No_of_cal==7)
                {
                    x.setlength(7);
                    y.setlength(7);
                    for(int i=0;i<7;i++)
                    {
                        x[i]=yData7[i];
                        y[i]=xData7[i];
                    }
                }
                else if(No_of_cal==8)
                {
                    x.setlength(8);
                    y.setlength(8);
                    for(int i=0;i<8;i++)
                    {
                        qDebug()<<"data"<<MainyData[i];
                        x[i]=MainyData[i];
                        y[i]=MainxData[i];
                    }
                }

                for(int i=0;i<No_of_cal;i++)
                {
                    qDebug()<<x[i];
                    qDebug()<<y[i];
                }

                ae_int_t m = 3;
                //ae_int_t n=11;
                double t=Result;
                //double t = ui->label_144->text().toDouble();
                barycentricinterpolant p;
                polynomialfitreport rep;
                double v;
                polynomialfit(x, y, m, p, rep);
                v = barycentriccalc(p, t);
                printf("%.2f\n", double(v)); // EXPECTED: 2.011
                qDebug()<<(double(v));
                QString results=QString::number(v);
                if(v>100)
                    ui->IsIo_lbl->setText(QString::number(v,'f',0));
                else
                    ui->IsIo_lbl->setText(QString::number(v,'f',2));
                qDebug()<<(results);
            }
            else if(Graph_Type=="Ply-3rd")
            {
                real_1d_array x;
                real_1d_array y;
                qDebug()<<"entered else  if";
                if(No_of_cal==1)
                {
                    x.setlength(1);
                    y.setlength(1);
                    x[0]=yData1[0];
                    y[0]=xData1[0];

                }
                else if(No_of_cal==2)
                {
                    x.setlength(2);
                    y.setlength(2);
                    for(int i=0;i<2;i++)
                    {

                        x[i]=yData2[i];
                        y[i]=xData2[i];
                    }
                }
                else if(No_of_cal==3)
                {
                    x.setlength(3);
                    y.setlength(3);
                    for(int i=0;i<3;i++)
                    {
                        x[i]=yData3[i];
                        y[i]=xData3[i];
                    }
                }
                else if(No_of_cal==4)
                {
                    x.setlength(4);
                    y.setlength(4);
                    for(int i=0;i<4;i++)
                    {
                        x[i]=yData4[i];
                        y[i]=xData4[i];
                    }
                }
                else if(No_of_cal==5)
                {
                    x.setlength(5);
                    y.setlength(5);
                    for(int i=0;i<5;i++)
                    {
                        x[i]=yData5[i];
                        y[i]=xData5[i];
                    }
                }
                else if(No_of_cal==6)
                {
                    x.setlength(6);
                    y.setlength(6);
                    for(int i=0;i<6;i++)
                    {
                        x[i]=yData6[i];
                        y[i]=xData6[i];
                    }
                }
                else if(No_of_cal==7)
                {
                    x.setlength(7);
                    y.setlength(7);
                    for(int i=0;i<7;i++)
                    {
                        x[i]=yData7[i];
                        y[i]=xData7[i];
                    }
                }
                else if(No_of_cal==8)
                {
                    x.setlength(8);
                    y.setlength(8);
                    for(int i=0;i<8;i++)
                    {
                        qDebug()<<"data"<<MainyData[i];
                        x[i]=MainyData[i];
                        y[i]=MainxData[i];
                    }
                }
                for(int i=0;i<No_of_cal;i++)
                {
                    qDebug()<<x[i];
                    qDebug()<<y[i];
                }

                ae_int_t m = 4;
                //ae_int_t n=11;
                double t=Result;
                //double t = ui->label_144->text().toDouble();
                barycentricinterpolant p;
                polynomialfitreport rep;
                double v;
                polynomialfit(x, y, m, p, rep);
                v = barycentriccalc(p, t);
                printf("%.2f\n", double(v)); // EXPECTED: 2.011
                qDebug()<<(double(v));
                QString results=QString::number(v);
                if(v>100)
                    ui->IsIo_lbl->setText(QString::number(v,'f',0));
                else
                    ui->IsIo_lbl->setText(QString::number(v,'f',2));
                qDebug()<<(results);
            }
            else if(Graph_Type=="4PL")
            {
                double X;
                double Y=Result;
                //   double Y=ui->lineEdit_24->text().toDouble();
                X=C_Val*pow((A_Val-D_Val)/(Y-D_Val)-1,1/B_Val);
                if(Rctn=="Increasing")
                {
                    if(No_of_cal==1)
                    {
                        xmin= xData1.first();
                        xmax= xData1.last();
                        ymin= yData1.first();
                        ymax= yData1.last();
                    }
                    else if(No_of_cal==2)
                    {
                        xmin= xData2.first();
                        xmax= xData2.last();
                        ymin= yData2.first();
                        ymax= yData2.last();
                    }
                    else if(No_of_cal==3)
                    {
                        xmin= xData3.first();
                        xmax= xData3.last();
                        ymin= yData3.first();
                        ymax= yData3.last();
                    }
                    else if(No_of_cal==4)
                    {
                        xmin= xData4.first();
                        xmax= xData4.last();
                        ymin= yData4.first();
                        ymax= yData4.last();
                    }
                    else if(No_of_cal==5)
                    {
                        xmin= xData5.first();
                        xmax= xData5.last();
                        ymin= yData5.first();
                        ymax= yData5.last();
                    }
                    else if(No_of_cal==6)
                    {
                        xmin= xData6.first();
                        xmax= xData6.last();
                        ymin= yData6.first();
                        ymax= yData6.last();
                    }
                    else if(No_of_cal==7)
                    {
                        xmin= xData7.first();
                        xmax= xData7.last();
                        ymin= yData7.first();
                        ymax= yData7.last();
                    }
                    else if(No_of_cal==8)
                    {
                        xmin= MainxData.first();
                        xmax= MainxData.last();
                        ymin= MainyData.first();
                        ymax= MainyData.last();
                    }
                }
                else if(Rctn=="Decreasing")
                {
                    if(No_of_cal==1)
                    {
                        xmin= xData1.last();
                        xmax= xData1.first();
                        ymin= yData1.last();
                        ymax= yData1.first();
                    }
                    else if(No_of_cal==2)
                    {
                        xmin= xData2.last();
                        xmax= xData2.first();
                        ymin= yData2.last();
                        ymax= yData2.first();
                    }
                    else if(No_of_cal==3)
                    {
                        xmin= xData3.last();
                        xmax= xData3.first();
                        ymin= yData3.last();
                        ymax= yData3.first();
                    }
                    else if(No_of_cal==4)
                    {
                        xmin= xData4.last();
                        xmax= xData4.first();
                        ymin= yData4.last();
                        ymax= yData4.first();
                    }
                    else if(No_of_cal==5)
                    {
                        xmin= xData5.last();
                        xmax= xData5.first();
                        ymin= yData5.last();
                        ymax= yData5.first();
                    }
                    else if(No_of_cal==6)
                    {
                        xmin= xData6.last();
                        xmax= xData6.first();
                        ymin= yData6.last();
                        ymax= yData6.first();
                    }
                    else if(No_of_cal==7)
                    {
                        xmin= xData7.last();
                        xmax= xData7.first();
                        ymin= yData7.last();
                        ymax= yData7.first();
                    }
                    else if(No_of_cal==8)
                    {
                        xmin= MainxData.last();
                        xmax= MainxData.first();
                        ymin= MainyData.last();
                        ymax= MainyData.first();
                    }

                }
                qDebug()<<xmin<<xmax<<ymin<<ymax<<"X : "<<X;
                QString xs=QString::number(X);
                QString highX=QString::number(xmax);
                QString lowX=QString::number(xmin);
                int j=0;
                if(Y>ymax){
                    j=1;
                    qDebug()<<("> "+highX);
                    if(Y>100)
                        ui->IsIo_lbl->setText("> "+QString::number(xmax,'f',0));
                    else
                        ui->IsIo_lbl->setText("> "+QString::number(xmax,'f',2));
                }
                else if(Y<ymin){
                    if(xmin!=0.0){
                        j=1;
                        qDebug()<<("< "+lowX);
                        if(Y>100)
                            ui->IsIo_lbl->setText("< "+QString::number(xmin,'f',0));
                        else
                            ui->IsIo_lbl->setText("< "+QString::number(xmin,'f',2));
                    }
                    else{
                        j=1;
                        qDebug()<<("0");
                        ui->IsIo_lbl->setText("0");
                    }
                }
                if(j==0){
                    qDebug()<<(xs);
                    if(x1>100)
                        ui->IsIo_lbl->setText(QString::number(X,'f',0));
                    else
                        ui->IsIo_lbl->setText(QString::number(X,'f',2));
                }

            }
            else if(Graph_Type=="5PL")
            {
                if(Rctn=="Increasing")
                {
                    if(No_of_cal==1)
                    {
                        xmin= xData1.first();
                        xmax= xData1.last();
                        ymin= yData1.first();
                        ymax= yData1.last();
                    }
                    else if(No_of_cal==2)
                    {
                        xmin= xData2.first();
                        xmax= xData2.last();
                        ymin= yData2.first();
                        ymax= yData2.last();
                    }
                    else if(No_of_cal==3)
                    {
                        xmin= xData3.first();
                        xmax= xData3.last();
                        ymin= yData3.first();
                        ymax= yData3.last();
                    }
                    else if(No_of_cal==4)
                    {
                        xmin= xData4.first();
                        xmax= xData4.last();
                        ymin= yData4.first();
                        ymax= yData4.last();
                    }
                    else if(No_of_cal==5)
                    {
                        xmin= xData5.first();
                        xmax= xData5.last();
                        ymin= yData5.first();
                        ymax= yData5.last();
                    }
                    else if(No_of_cal==6)
                    {
                        xmin= xData6.first();
                        xmax= xData6.last();
                        ymin= yData6.first();
                        ymax= yData6.last();
                    }
                    else if(No_of_cal==7)
                    {
                        xmin= xData7.first();
                        xmax= xData7.last();
                        ymin= yData7.first();
                        ymax= yData7.last();
                    }
                    else if(No_of_cal==8)
                    {
                        xmin= MainxData.first();
                        xmax= MainxData.last();
                        ymin= MainyData.first();
                        ymax= MainyData.last();
                    }
                }
                else if(Rctn=="Decreasing")
                {
                    if(No_of_cal==1)
                    {
                        xmin= xData1.last();
                        xmax= xData1.first();
                        ymin= yData1.last();
                        ymax= yData1.first();
                    }
                    else if(No_of_cal==2)
                    {
                        xmin= xData2.last();
                        xmax= xData2.first();
                        ymin= yData2.last();
                        ymax= yData2.first();
                    }
                    else if(No_of_cal==3)
                    {
                        xmin= xData3.last();
                        xmax= xData3.first();
                        ymin= yData3.last();
                        ymax= yData3.first();
                    }
                    else if(No_of_cal==4)
                    {
                        xmin= xData4.last();
                        xmax= xData4.first();
                        ymin= yData4.last();
                        ymax= yData4.first();
                    }
                    else if(No_of_cal==5)
                    {
                        xmin= xData5.last();
                        xmax= xData5.first();
                        ymin= yData5.last();
                        ymax= yData5.first();
                    }
                    else if(No_of_cal==6)
                    {
                        xmin= xData6.last();
                        xmax= xData6.first();
                        ymin= yData6.last();
                        ymax= yData6.first();
                    }
                    else if(No_of_cal==7)
                    {
                        xmin= xData7.last();
                        xmax= xData7.first();
                        ymin= yData7.last();
                        ymax= yData7.first();
                    }
                    else if(No_of_cal==8)
                    {
                        xmin= MainxData.last();
                        xmax= MainxData.first();
                        ymin= MainyData.last();
                        ymax= MainyData.first();
                    }
                }

                double X;
                double Y=Result;
                // double Y=ui->lineEdit_24->text().toDouble();
                X=C_Val*pow(pow((A_Val-D_Val)/(Y-D_Val),1/G_Val)-1,1/B_Val);
                qDebug()<<xmin<<xmax<<ymin<<ymax;
                QString xs=QString::number(X);
                QString highX=QString::number(xmax);
                QString lowX=QString::number(xmin);
                int j=0;
                if(Y>ymax)
                {
                    j=1;
                    qDebug()<<("> "+highX);
                    if(X>100)
                        ui->IsIo_lbl->setText("> "+QString::number(xmax,'f',0));
                    else
                        ui->IsIo_lbl->setText("> "+QString::number(xmax,'f',2));
                }
                else if(Y<ymin)
                {
                    if(xmin!=0.0)
                    {
                        j=1;
                        qDebug()<<("< "+lowX);
                        if(x1>100)
                            ui->IsIo_lbl->setText("< "+QString::number(xmin,'f',0));
                        else
                            ui->IsIo_lbl->setText("< "+QString::number(xmin,'f',2));
                    }
                    else
                    {
                        j=1;
                        qDebug()<<("0");
                        ui->IsIo_lbl->setText("0");
                    }
                }
                if(j==0)
                {
                    qDebug()<<(xs);
                    if(X>100)
                        ui->IsIo_lbl->setText(QString::number(X,'f',0));
                    else
                        ui->IsIo_lbl->setText(QString::number(X,'f',2));
                }
            }

        }
    }
    ui->stackedWidget_13->setCurrentIndex(0);
    ui->stackedWidget->setCurrentIndex(32);
}

void MainWindow::Turbidity_Graph_plot()
{
    QString Graph_Type;
    double Cal1=0,Cal2=0,Cal3=0,Cal4=0,Cal5=0,Cal6=0,Cal7=0,Cal8=0,Abs1=0,Abs2=0,Abs3=0,Abs4=0,Abs5=0,Abs6=0,Abs7=0,Abs8=0;
    //int No_of_Cal=0;
    QString abs,Rctn_type;
    QSqlQuery qy;
    qy.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
    qy.exec();
    while(qy.next())
    {
        Rctn_type=qy.value(81).toString();
        Cal1=qy.value(11).toDouble();
        Cal2=qy.value(12).toDouble();
        Cal3=qy.value(13).toDouble();
        Cal4=qy.value(14).toDouble();
        Cal5=qy.value(15).toDouble();
        Cal6=qy.value(16).toDouble();
        Cal7=qy.value(17).toDouble();
        Cal8=qy.value(18).toDouble();

        Abs1=qy.value(19).toDouble();
        abs=qy.value(19).toString();
        Abs2=qy.value(20).toDouble();
        Abs3=qy.value(21).toDouble();
        Abs4=qy.value(22).toDouble();
        Abs5=qy.value(23).toDouble();
        Abs6=qy.value(24).toDouble();
        Abs7=qy.value(25).toDouble();
        Abs8=qy.value(26).toDouble();
        //No_of_Cal=qy.value(10).toInt();
        Graph_Type=qy.value(9).toString();
    }
    qDebug()<<"Graph_Type : "<<Graph_Type;
    qDebug()<<"Cal1 : "<<Cal1 << " "<<"Abs1 : "<<Abs1<<"abs : "<<abs;
    qDebug()<<"Cal2 : "<<Cal2 << " "<<"Abs2 : "<<Abs2;
    qDebug()<<"Cal3 : "<<Cal3 << " "<<"Abs3 : "<<Abs3;
    qDebug()<<"Cal4 : "<<Cal4 << " "<<"Abs4 : "<<Abs4;
    qDebug()<<"Cal5 : "<<Cal5 << " "<<"Abs5 : "<<Abs5;
    qDebug()<<"Cal6 : "<<Cal6 << " "<<"Abs6 : "<<Abs6;
    qDebug()<<"Cal7 : "<<Cal7 << " "<<"Abs7 : "<<Abs7;
    qDebug()<<"Cal8 : "<<Cal8 << " "<<"Abs8 : "<<Abs8;

    Slope=0;
    Intercept=0;
    QVector<double> MainxData, MainyData;
    QVector<double> xData1, yData1;
    QVector<double> xData2, yData2;
    QVector<double> xData3, yData3;
    QVector<double> xData4, yData4;
    QVector<double> xData5, yData5;
    QVector<double> xData6, yData6;
    QVector<double> xData7, yData7;
    QVector<double> logxData1, logxData2,logxData3,logxData4,logxData5,logxData6,logxData7,logMainxData;
    QVector<double> logyData1, logyData2,logyData3,logyData4,logyData5,logyData6,logyData7,logMainyData;
    double x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0,x8=0;
    double y1=0,y2=0,y3=0,y4=0,y5=0,y6=0,y7=0,y8=0;
    double logx1=0,logx2=0,logx3=0,logx4=0,logx5=0,logx6=0,logx7=0,logx8=0;
    double logy1=0,logy2=0,logy3=0,logy4=0,logy5=0,logy6=0,logy7=0,logy8=0;

    x1=Cal1;
    x2=Cal2;
    x3=Cal3;
    x4=Cal4;
    x5=Cal5;
    x6=Cal6;
    x7=Cal7;
    x8=Cal8;

    y1=Abs1;
    y2=Abs2;
    y3=Abs3;
    y4=Abs4;
    y5=Abs5;
    y6=Abs6;
    y7=Abs7;
    y8=Abs8;


    xData1.append(x1);
    yData1.append(y1);
    xData2.append(x1);xData2.append(x2);
    yData2.append(y1);yData2.append(y2);
    xData3.append(x1);xData3.append(x2);xData3.append(x3);
    yData3.append(y1);yData3.append(y2);yData3.append(y3);
    xData4.append(x1);xData4.append(x2);xData4.append(x3);xData4.append(x4);
    yData4.append(y1);yData4.append(y2);yData4.append(y3);yData4.append(y4);
    xData5.append(x1);xData5.append(x2);xData5.append(x3);xData5.append(x4);xData5.append(x5);
    yData5.append(y1);yData5.append(y2);yData5.append(y3);yData5.append(y4);yData5.append(y5);
    xData6.append(x1);xData6.append(x2);xData6.append(x3);xData6.append(x4);xData6.append(x5);xData6.append(x6);
    yData6.append(y1);yData6.append(y2);yData6.append(y3);yData6.append(y4);yData6.append(y5);yData6.append(y6);
    xData7.append(x1);xData7.append(x2);xData7.append(x3);xData7.append(x4);xData7.append(x5);xData7.append(x6);xData7.append(x7);
    yData7.append(y1);yData7.append(y2);yData7.append(y3);yData7.append(y4);yData7.append(y5);yData7.append(y6);yData7.append(y7);
    MainxData.append(x1);MainxData.append(x2);MainxData.append(x3);MainxData.append(x4);MainxData.append(x5);MainxData.append(x6);MainxData.append(x7);MainxData.append(x8);
    MainyData.append(y1);MainyData.append(y2);MainyData.append(y3);MainyData.append(y4);MainyData.append(y5);MainyData.append(y6);MainyData.append(y7);MainyData.append(y8);

    logy1=log10(y1);
    logy2=log10(y2);
    logy3=log10(y3);
    logy4=log10(y4);
    logy5=log10(y5);
    logy6=log10(y6);
    logy7=log10(y7);
    logy8=log10(y8);

    logyData1.append(logy1);
    logyData2.append(logy1);logyData2.append(logy2);
    logyData3.append(logy1);logyData3.append(logy2);logyData3.append(logy3);
    logyData4.append(logy1);logyData4.append(logy2);logyData4.append(logy3);logyData4.append(logy4);
    logyData5.append(logy1);logyData5.append(logy2);logyData5.append(logy3);logyData5.append(logy4);logyData5.append(logy5);
    logyData6.append(logy1);logyData6.append(logy2);logyData6.append(logy3);logyData6.append(logy4);logyData6.append(logy5);logyData6.append(logy6);
    logyData7.append(logy1);logyData7.append(logy2);logyData7.append(logy3);logyData7.append(logy4);logyData7.append(logy5);logyData7.append(logy6);logyData7.append(logy7);
    logMainyData.append(logy1);logMainyData.append(logy2);logMainyData.append(logy3);logMainyData.append(logy4);logMainyData.append(logy5);logMainyData.append(logy6);logMainyData.append(logy7);logMainyData.append(logy8);

    logx1=log10(x1);
    logx2=log10(x2);
    logx3=log10(x3);
    logx4=log10(x4);
    logx5=log10(x5);
    logx6=log10(x6);
    logx7=log10(x7);
    logx8=log10(x8);

    logxData1.append(logx1);
    logxData2.append(logx1);logxData2.append(logx2);
    logxData3.append(logx1);logxData3.append(logx2);logxData3.append(logx3);
    logxData4.append(logx1);logxData4.append(logx2);logxData4.append(logx3);logxData4.append(logx4);
    logxData5.append(logx1);logxData5.append(logx2);logxData5.append(logx3);logxData5.append(logx4);logxData5.append(logx5);
    logxData6.append(logx1);logxData6.append(logx2);logxData6.append(logx3);logxData6.append(logx4);logxData6.append(logx5);logxData6.append(logx6);
    logxData7.append(logx1);logxData7.append(logx2);logxData7.append(logx3);logxData7.append(logx4);logxData7.append(logx5);logxData7.append(logx6);logxData7.append(logx7);
    logMainxData.append(logx1);logMainxData.append(logx2);logMainxData.append(logx3);logMainxData.append(logx4);logMainxData.append(logx5);logMainxData.append(logx6);logMainxData.append(logx7);logMainxData.append(logx8);


    if(Graph_Type=="Linear")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        ui->customPlot_6->addGraph();
        ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
        ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsLine);
        if(Rctn_type=="Increasing")
        {
            if(Turbi_Cal1==1)
            {
                ui->customPlot_6->graph(0)->setData(xData1, yData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData1, yData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData1.first()-2.5, xData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData1.first()-0.25, yData1.last()+0.25);
            }
            else if(Turbi_Cal2==1)
            {
                ui->customPlot_6->graph(0)->setData(xData2, yData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData2, yData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData2.first()-2.5, xData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData2.first()-0.25, yData2.last()+0.25);
            }
            else if(Turbi_Cal3==1)
            {
                ui->customPlot_6->graph(0)->setData(xData3, yData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData3, yData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData3.first()-2.5, xData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData3.first()-0.25, yData3.last()+0.25);
            }
            else if(Turbi_Cal4==1)
            {
                ui->customPlot_6->graph(0)->setData(xData4, yData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData4, yData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData4.first()-2.5, xData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData4.first()-0.25, yData4.last()+0.25);
            }
            else if(Turbi_Cal5==1)
            {
                ui->customPlot_6->graph(0)->setData(xData5, yData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData5, yData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData5.first()-2.5, xData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData5.first()-0.25, yData5.last()+0.25);
            }
            else if(Turbi_Cal6==1)
            {
                ui->customPlot_6->graph(0)->setData(xData6, yData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData6, yData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData6.first()-2.5, xData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData6.first()-0.25, yData6.last()+0.25);
            }
            else if(Turbi_Cal7==1)
            {
                ui->customPlot_6->graph(0)->setData(xData7, yData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData7, yData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData7.first()-2.5, xData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData7.first()-0.25, yData7.last()+0.25);
            }
            else if(Turbi_Cal8==1)
            {
                ui->customPlot_6->graph(0)->setData(MainxData, MainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(MainxData, MainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(MainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5, MainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(MainyData.first()-0.25, MainyData.last()+0.25);
            }
        }
        else if(Rctn_type=="Decreasing")
        {
            if(Turbi_Cal1==1)
            {
                ui->customPlot_6->graph(0)->setData(xData1, yData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData1, yData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData1.first()-2.5, xData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData1.last()-0.25, yData1.first()+0.25);
            }
            else if(Turbi_Cal2==1)
            {
                ui->customPlot_6->graph(0)->setData(xData2, yData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData2, yData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData2.first()-2.5, xData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData2.last()-0.25, yData2.first()+0.25);
            }
            else if(Turbi_Cal3==1)
            {
                ui->customPlot_6->graph(0)->setData(xData3, yData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData3, yData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData3.first()-2.5, xData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData3.last()-0.25, yData3.first()+0.25);
            }
            else if(Turbi_Cal4==1)
            {
                ui->customPlot_6->graph(0)->setData(xData4, yData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData4, yData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData4.first()-2.5, xData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData4.last()-0.25, yData4.first()+0.25);
            }
            else if(Turbi_Cal5==1)
            {
                ui->customPlot_6->graph(0)->setData(xData5, yData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData5, yData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData5.first()-2.5, xData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData5.last()-0.25, yData5.first()+0.25);
            }
            else if(Turbi_Cal6==1)
            {
                ui->customPlot_6->graph(0)->setData(xData6, yData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData6, yData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData6.first()-2.5, xData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData6.last()-0.25, yData6.first()+0.25);
            }
            else if(Turbi_Cal7==1)
            {
                ui->customPlot_6->graph(0)->setData(xData7, yData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData7, yData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData7.first()-2.5, xData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData7.last()-0.25, yData7.first()+0.25);
            }
            else if(Turbi_Cal8==1)
            {
                ui->customPlot_6->graph(0)->setData(MainxData, MainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(MainxData, MainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(MainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5, MainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(MainyData.last()-0.25, MainyData.first()+0.25);
            }
        }

        ui->customPlot_6->update();
        ui->customPlot_6->replot();
    }
    else if(Graph_Type=="Log-Linear")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        ui->customPlot_6->addGraph();
        ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
        ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsLine);
        if(Rctn_type=="Increasing")
        {
            if(Turbi_Cal1==1)
            {
                ui->customPlot_6->graph(0)->setData(xData1, logyData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData1, logyData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData1.first()-2.5, xData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData1.first()-0.25, logyData1.last()+0.25);
            }
            else if(Turbi_Cal2==1)
            {
                ui->customPlot_6->graph(0)->setData(xData2, logyData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData2, logyData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData2.first()-2.5, xData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData2.first()-0.25, logyData2.last()+0.25);
            }
            else if(Turbi_Cal3==1)
            {
                ui->customPlot_6->graph(0)->setData(xData3, logyData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData3, logyData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData3.first()-2.5, xData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData3.first()-0.25, logyData3.last()+0.25);
            }
            else if(Turbi_Cal4==1)
            {
                ui->customPlot_6->graph(0)->setData(xData4, logyData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData4, logyData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData4.first()-2.5, xData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData4.first()-0.25, logyData4.last()+0.25);
            }
            else if(Turbi_Cal5==1)
            {
                ui->customPlot_6->graph(0)->setData(xData5, logyData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData5, logyData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData5.first()-2.5, xData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData5.first()-0.25, logyData5.last()+0.25);
            }
            else if(Turbi_Cal6==1)
            {
                ui->customPlot_6->graph(0)->setData(xData6, logyData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData6, logyData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData6.first()-2.5, xData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData6.first()-0.25, logyData6.last()+0.25);
            }
            else if(Turbi_Cal7==1)
            {
                ui->customPlot_6->graph(0)->setData(xData7, logyData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData7, logyData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData7.first()-2.5, xData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData7.first()-0.25, logyData7.last()+0.25);
            }
            else if(Turbi_Cal8==1)
            {
                ui->customPlot_6->graph(0)->setData(MainxData, logMainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(MainxData, logMainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(MainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5, MainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logMainyData.first()-0.25, logMainyData.last()+0.25);
            }
        }
        else if(Rctn_type=="Decreasing")
        {

            if(Turbi_Cal1==1)
            {
                ui->customPlot_6->graph(0)->setData(xData1, logyData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData1, logyData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData1.first()-2.5, xData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData1.last()-0.25, logyData1.first()+0.25);
            }
            else if(Turbi_Cal2==1)
            {
                ui->customPlot_6->graph(0)->setData(xData2, logyData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData2, logyData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData2.first()-2.5, xData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData2.last()-0.25, logyData2.first()+0.25);
            }
            else if(Turbi_Cal3==1)
            {
                ui->customPlot_6->graph(0)->setData(xData3, logyData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData3, logyData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData3.first()-2.5, xData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData3.last()-0.25, logyData3.first()+0.25);
            }
            else if(Turbi_Cal4==1)
            {
                ui->customPlot_6->graph(0)->setData(xData4, logyData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData4, logyData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData4.first()-2.5, xData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData4.last()-0.25, logyData4.first()+0.25);
            }
            else if(Turbi_Cal5==1)
            {
                ui->customPlot_6->graph(0)->setData(xData5, logyData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData5, logyData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData5.first()-2.5, xData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData5.last()-0.25, logyData5.first()+0.25);
            }
            else if(Turbi_Cal6==1)
            {
                ui->customPlot_6->graph(0)->setData(xData6, logyData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData6, logyData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData6.first()-2.5, xData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData6.last()-0.25, logyData6.first()+0.25);
            }
            else if(Turbi_Cal7==1)
            {
                ui->customPlot_6->graph(0)->setData(xData7, logyData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData7, logyData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData7.first()-2.5, xData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData7.last()-0.25, logyData7.first()+0.25);
            }
            else if(Turbi_Cal8==1)
            {
                ui->customPlot_6->graph(0)->setData(MainxData, logMainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(MainxData, logMainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(MainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5, MainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logMainyData.last()-0.25, logMainyData.first()+0.25);
            }
        }

        ui->customPlot_6->update();
        ui->customPlot_6->replot();
    }
    else if(Graph_Type=="Linear-Log")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        ui->customPlot_6->addGraph();
        ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
        ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsLine);
        if(Rctn_type=="Increasing")
        {
            if(Turbi_Cal1==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData1, yData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData1, yData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData1.first()-2.5, logxData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData1.first()-0.25, yData1.last()+0.25);
            }
            else if(Turbi_Cal2==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData2, yData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData2, yData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData2.first()-2.5, logxData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData2.first()-0.25, yData2.last()+0.25);
            }
            else if(Turbi_Cal3==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData3, yData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData3, yData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData3.first()-2.5, logxData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData3.first()-0.25, yData3.last()+0.25);
            }
            else if(Turbi_Cal4==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData4, yData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData4, yData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData4.first()-2.5, logxData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData4.first()-0.25, yData4.last()+0.25);
            }
            else if(Turbi_Cal5==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData5, yData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData5, yData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData5.first()-2.5, logxData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData5.first()-0.25, yData5.last()+0.25);
            }
            else if(Turbi_Cal6==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData6, yData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData6, yData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData6.first()-2.5, logxData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData6.first()-0.25, yData6.last()+0.25);
            }
            else if(Turbi_Cal7==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData7, yData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData7, yData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData7.first()-2.5, logxData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData7.first()-0.25, yData7.last()+0.25);
            }
            else if(Turbi_Cal8==1)
            {
                ui->customPlot_6->graph(0)->setData(logMainxData, MainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logMainxData, MainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logMainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logMainxData.first()-2.5, logMainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(MainyData.first()-0.25, MainyData.last()+0.25);
            }
        }
        else if(Rctn_type=="Decreasing")
        {
            if(Turbi_Cal1==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData1, yData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData1, yData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData1.first()-2.5, logxData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData1.last()-0.25, yData1.first()+0.25);
            }
            else if(Turbi_Cal2==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData2, yData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData2, yData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData2.first()-2.5, logxData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData2.last()-0.25, yData2.first()+0.25);
            }
            else if(Turbi_Cal3==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData3, yData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData3, yData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData3.first()-2.5, logxData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData3.last()-0.25, yData3.first()+0.25);
            }
            else if(Turbi_Cal4==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData4, yData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData4, yData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData4.first()-2.5, logxData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData4.last()-0.25, yData4.first()+0.25);
            }
            else if(Turbi_Cal5==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData5, yData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData5, yData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData5.first()-2.5, logxData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData5.last()-0.25, yData5.first()+0.25);
            }
            else if(Turbi_Cal6==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData6, yData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData6, yData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData6.first()-2.5, logxData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData6.last()-0.25, yData6.first()+0.25);
            }
            else if(Turbi_Cal7==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData7, yData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData7, yData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData7.first()-2.5, logxData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData7.last()-0.25, yData7.first()+0.25);
            }
            else if(Turbi_Cal8==1)
            {
                ui->customPlot_6->graph(0)->setData(logMainxData, MainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logMainxData, MainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logMainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logMainxData.first()-2.5, logMainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(MainyData.last()-0.25, MainyData.first()+0.25);
            }
        }


        ui->customPlot_6->update();
        ui->customPlot_6->replot();
    }
    else if(Graph_Type=="Log-Log")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        ui->customPlot_6->addGraph();
        ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
        ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsLine);
        if(Rctn_type=="Increasing")
        {
            if(Turbi_Cal1==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData1, logyData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData1, logyData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData1.first()-2.5, logxData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData1.first()-0.25, logyData1.last()+0.25);
            }
            else if(Turbi_Cal2==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData2, logyData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData2, logyData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData2.first()-2.5, logxData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData2.first()-0.25, logyData2.last()+0.25);
            }
            else if(Turbi_Cal3==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData3, logyData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData3, logyData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData3.first()-2.5, logxData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData3.first()-0.25, logyData3.last()+0.25);
            }
            else if(Turbi_Cal4==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData4, logyData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData4, logyData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData4.first()-2.5, logxData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData4.first()-0.25, logyData4.last()+0.25);
            }
            else if(Turbi_Cal5==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData5, logyData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData5, logyData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData5.first()-2.5, logxData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData5.first()-0.25, logyData5.last()+0.25);
            }
            else if(Turbi_Cal6==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData6, logyData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData6, logyData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData6.first()-2.5, logxData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData6.first()-0.25, logyData6.last()+0.25);
            }
            else if(Turbi_Cal7==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData7, logyData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData7, logyData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData7.first()-2.5, logxData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData7.first()-0.25, logyData7.last()+0.25);
            }
            else if(Turbi_Cal8==1)
            {
                ui->customPlot_6->graph(0)->setData(logMainxData, logMainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logMainxData, MainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logMainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logMainxData.first()-2.5, logMainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logMainyData.first()-0.25, logMainyData.last()+0.25);
            }
        }
        else if(Rctn_type=="Decreasing")
        {
            if(Turbi_Cal1==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData1, logyData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData1, logyData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData1.first()-2.5, logxData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData1.last()-0.25, logyData1.first()+0.25);
            }
            else if(Turbi_Cal2==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData2, logyData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData2, logyData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData2.first()-2.5, logxData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData2.last()-0.25, logyData2.first()+0.25);
            }
            else if(Turbi_Cal3==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData3, logyData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData3, logyData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData3.first()-2.5, logxData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData3.last()-0.25, logyData3.first()+0.25);
            }
            else if(Turbi_Cal4==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData4, logyData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData4, logyData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData4.first()-2.5, logxData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData4.last()-0.25, logyData4.first()+0.25);
            }
            else if(Turbi_Cal5==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData5, logyData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData5, logyData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData5.first()-2.5, logxData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData5.last()-0.25, logyData5.first()+0.25);
            }
            else if(Turbi_Cal6==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData6, logyData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData6, logyData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData6.first()-2.5, logxData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData6.last()-0.25, logyData6.first()+0.25);
            }
            else if(Turbi_Cal7==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData7, logyData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData7, logyData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData7.first()-2.5, logxData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData7.last()-0.25, logyData7.first()+0.25);
            }
            else if(Turbi_Cal8==1)
            {
                ui->customPlot_6->graph(0)->setData(logMainxData, logMainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logMainxData, MainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logMainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logMainxData.first()-2.5, logMainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logMainyData.last()-0.25, logMainyData.first()+0.25);
            }
        }
        ui->customPlot_6->update();
        ui->customPlot_6->replot();
    }
    else if(Graph_Type=="Point-Point")
    {
        ui->label_465->setVisible(false);
        ui->label_466->setVisible(false);
        qDebug()<<"enter point-point";
        ui->customPlot_6->addGraph();
        ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
        ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsLine);
        if(Rctn_type=="Increasing")
        {
            if(Turbi_Cal1==1)
            {
                ui->customPlot_6->graph(0)->setData(xData1, yData1);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData1.first()-2.5, xData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData1.first()-0.25, yData1.last()+0.25);
            }
            else if(Turbi_Cal2==1)
            {
                ui->customPlot_6->graph(0)->setData(xData2, yData2);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData2.first()-2.5, xData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData2.first()-0.25, yData2.last()+0.25);
            }
            else if(Turbi_Cal3==1)
            {
                ui->customPlot_6->graph(0)->setData(xData3, yData3);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData3.first()-2.5, xData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData3.first()-0.25, yData3.last()+0.25);
            }
            else if(Turbi_Cal4==1)
            {
                ui->customPlot_6->graph(0)->setData(xData4, yData4);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData4.first()-2.5, xData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData4.first()-0.25, yData4.last()+0.25);
            }
            else if(Turbi_Cal5==1)
            {
                ui->customPlot_6->graph(0)->setData(xData5, yData5);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData5.first()-2.5, xData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData5.first()-0.25, yData5.last()+0.25);
            }
            else if(Turbi_Cal6==1)
            {
                ui->customPlot_6->graph(0)->setData(xData6, yData6);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData6.first()-2.5, xData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData6.first()-0.25, yData6.last()+0.25);
            }
            else if(Turbi_Cal7==1)
            {
                ui->customPlot_6->graph(0)->setData(xData7, yData7);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData7.first()-2.5, xData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData7.first()-0.25, yData7.last()+0.25);
            }
            else if(Turbi_Cal8==1)
            {
                ui->customPlot_6->graph(0)->setData(MainxData, MainyData);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5, MainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(MainyData.first()-0.25, MainyData.last()+0.25);
            }
        }
        else if(Rctn_type=="Decreasing")
        {
            if(Turbi_Cal1==1)
            {
                ui->customPlot_6->graph(0)->setData(xData1, yData1);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData1.first()-2.5, xData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData1.last()-0.25, yData1.first()+0.25);
            }
            else if(Turbi_Cal2==1)
            {
                ui->customPlot_6->graph(0)->setData(xData2, yData2);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData2.first()-2.5, xData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData2.last()-0.25, yData2.first()+0.25);
            }
            else if(Turbi_Cal3==1)
            {
                ui->customPlot_6->graph(0)->setData(xData3, yData3);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData3.first()-2.5, xData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData3.last()-0.25, yData3.first()+0.25);
            }
            else if(Turbi_Cal4==1)
            {
                ui->customPlot_6->graph(0)->setData(xData4, yData4);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData4.first()-2.5, xData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData4.last()-0.25, yData4.first()+0.25);
            }
            else if(Turbi_Cal5==1)
            {
                ui->customPlot_6->graph(0)->setData(xData5, yData5);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData5.first()-2.5, xData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData5.last()-0.25, yData5.first()+0.25);
            }
            else if(Turbi_Cal6==1)
            {
                ui->customPlot_6->graph(0)->setData(xData6, yData6);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData6.first()-2.5, xData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData6.last()-0.25, yData6.first()+0.25);
            }
            else if(Turbi_Cal7==1)
            {
                ui->customPlot_6->graph(0)->setData(xData7, yData7);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData7.first()-2.5, xData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData7.last()-0.25, yData7.first()+0.25);
            }
            else if(Turbi_Cal8==1)
            {
                ui->customPlot_6->graph(0)->setData(MainxData, MainyData);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5, MainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(MainyData.last()-0.25, MainyData.first()+0.25);
            }
        }

        ui->customPlot_6->update();
        ui->customPlot_6->replot();
    }
    else if(Graph_Type=="Ply-2nd")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        qDebug()<<"enter ply-2nd "<<Rctn_type;;
        if(Rctn_type=="Increasing")
        {
            if(Turbi_Cal1==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<1;i++){
                    polyx.append(xData1[i]);
                    qDebug()<<xData1[i]<<"x value";
                    polyy.append(yData1[i]);
                    qDebug()<<yData1[i]<<"y value";
                }
                dummyk=2;
                polycal=1;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal2==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<2;i++){
                    polyx.append(xData2[i]);
                    qDebug()<<xData2<<"x value";
                    polyy.append(yData2[i]);
                    qDebug()<<yData2<<"y value";
                }
                dummyk=2;
                polycal=2;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal3==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<3;i++){
                    polyx.append(xData3[i]);
                    qDebug()<<xData3<<"x value";
                    polyy.append(yData3[i]);
                    qDebug()<<xData3<<"y value";
                }
                dummyk=2;
                polycal=3;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal4==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<4;i++){
                    polyx.append(xData4[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData4[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=4;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal5==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<5;i++){
                    polyx.append(xData5[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData5[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=5;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal6==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<6;i++){
                    polyx.append(xData6[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData6[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=6;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal7==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<7;i++){
                    polyx.append(xData7[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData7[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=7;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal8==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<8;i++){
                    polyx.append(MainxData[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(MainyData[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=8;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
        }
        else if(Rctn_type=="Decreasing")
        {
            if(Turbi_Cal1==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<1;i++){
                    polyx.append(xData1[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData1[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=1;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal2==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<2;i++){
                    polyx.append(xData2[i]);
                    qDebug()<<xData2<<"x value";
                    polyy.append(yData2[i]);
                    qDebug()<<xData2<<"y value";
                }
                dummyk=2;
                polycal=2;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal3==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<3;i++){
                    polyx.append(xData3[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData3[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=3;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal4==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<4;i++){
                    polyx.append(xData4[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData4[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=4;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal5==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<5;i++){
                    polyx.append(xData5[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData5[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=5;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal6==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<6;i++){
                    polyx.append(xData6[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData6[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=6;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal7==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<7;i++){
                    polyx.append(xData7);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData7);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=7;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal8==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<8;i++){
                    polyx.append(MainxData[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(MainyData[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=8;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
        }
    }

    else if(Graph_Type=="Ply-3rd")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        if(Rctn_type=="Increasing")
        {
            if(Turbi_Cal1==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<1;i++){
                    polyx.append(xData1[i]);
                    qDebug()<<xData1[i]<<"x value";
                    polyy.append(yData1[i]);
                    qDebug()<<yData1[i]<<"y value";
                }
                dummyk=3;
                polycal=1;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal2==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<2;i++){
                    polyx.append(xData2[i]);
                    qDebug()<<xData2<<"x value";
                    polyy.append(yData2[i]);
                    qDebug()<<yData2<<"y value";
                }
                dummyk=3;
                polycal=2;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal3==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<3;i++){
                    polyx.append(xData3[i]);
                    qDebug()<<xData3<<"x value";
                    polyy.append(yData3[i]);
                    qDebug()<<xData3<<"y value";
                }
                dummyk=3;
                polycal=3;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal4==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<4;i++){
                    polyx.append(xData4[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData4[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=4;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal5==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<5;i++){
                    polyx.append(xData5[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData5[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=5;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal6==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<6;i++){
                    polyx.append(xData6[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData6[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=6;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal7==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<7;i++){
                    polyx.append(xData7[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData7[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=7;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal8==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<8;i++){
                    polyx.append(MainxData[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(MainyData[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=8;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
        }
        else if(Rctn_type=="Decreasing")
        {
            if(Turbi_Cal1==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<1;i++){
                    polyx.append(xData1[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData1[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=1;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal2==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<2;i++){
                    polyx.append(xData2[i]);
                    qDebug()<<xData2<<"x value";
                    polyy.append(yData2[i]);
                    qDebug()<<xData2<<"y value";
                }
                dummyk=3;
                polycal=2;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal3==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<3;i++){
                    polyx.append(xData3[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData3[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=3;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal4==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<4;i++){
                    polyx.append(xData4[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData4[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=4;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal5==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<5;i++){
                    polyx.append(xData5[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData5[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=5;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal6==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<6;i++){
                    polyx.append(xData6[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData6[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=6;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal7==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<7;i++){
                    polyx.append(xData7);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData7);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=7;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(Turbi_Cal8==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<8;i++){
                    polyx.append(MainxData[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(MainyData[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=8;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }

        }
    }

    else if(Graph_Type=="4PL")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        if(Turbi_Cal1==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 1;
                n1=n;
                x.setlength(xData1.size()); // Set the length of the real_1d_array

                for (int i = 0; i < xData1.size(); ++i) {
                    x[i] = xData1[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(yData1.size()); // Set the length of the real_1d_array

                for (int i = 0; i < yData1.size(); ++i) {
                    y[i] = yData1[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData1, yData1);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData1.first()-2.5,xData1.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData1.begin() , yData1.end())-0.25,*std::max_element(yData1.begin() , yData1.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData1[0] + i * (xData1[xData1.size() - 1] - xData1[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(Turbi_Cal2==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 2;
                n1=n;
                x.setlength(xData2.size()); // Set the length of the real_1d_array

                for (int i = 0; i < xData2.size(); ++i) {
                    x[i] = xData2[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(yData2.size()); // Set the length of the real_1d_array

                for (int i = 0; i < yData2.size(); ++i) {
                    y[i] = yData2[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData2, yData2);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData2.first()-2.5,xData2.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData2.begin() , yData2.end())-0.25,*std::max_element(yData2.begin() , yData2.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData2[0] + i * (xData2[xData2.size() - 1] - xData2[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(Turbi_Cal3==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 3;
                n1=n;
                x.setlength(xData3.size()); // Set the length of the real_1d_array

                for (int i = 0; i < xData3.size(); ++i) {
                    x[i] = xData3[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(yData3.size()); // Set the length of the real_1d_array

                for (int i = 0; i < yData3.size(); ++i) {
                    y[i] = yData3[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData3, yData3);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData3.first()-2.5,xData3.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData3.begin() , yData3.end())-0.25,*std::max_element(yData3.begin() , yData3.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData3[0] + i * (xData3[xData3.size() - 1] - xData3[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(Turbi_Cal4==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 4;
                n1=n;
                x.setlength(xData4.size()); // Set the length of the real_1d_array

                for (int i = 0; i < xData4.size(); ++i) {
                    x[i] = xData4[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(yData4.size()); // Set the length of the real_1d_array

                for (int i = 0; i < yData4.size(); ++i) {
                    y[i] = yData4[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData4, yData4);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData4.first()-2.5,xData4.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData4.begin() , yData4.end())-0.25,*std::max_element(yData4.begin() , yData4.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData4[0] + i * (xData4[xData4.size() - 1] - xData4[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(Turbi_Cal5==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 5;
                n1=n;
                x.setlength(xData5.size()); // Set the length of the real_1d_array

                for (int i = 0; i < xData5.size(); ++i) {
                    x[i] = xData5[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(yData5.size()); // Set the length of the real_1d_array

                for (int i = 0; i < yData5.size(); ++i) {
                    y[i] = yData5[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData5, yData5);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData5.first()-2.5,xData5.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData5.begin() , yData5.end())-0.25,*std::max_element(yData5.begin() , yData5.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData5[0] + i * (xData5[xData5.size() - 1] - xData5[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(Turbi_Cal6==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 6;
                n1=n;
                x.setlength(xData6.size()); // Set the length of the real_1d_array

                for (int i = 0; i < xData6.size(); ++i) {
                    x[i] = xData6[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(yData6.size()); // Set the length of the real_1d_array

                for (int i = 0; i < yData6.size(); ++i) {
                    y[i] = yData6[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData6, yData6);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData6.first()-2.5,xData6.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData6.begin() , yData6.end())-0.25,*std::max_element(yData6.begin() , yData6.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData6[0] + i * (xData6[xData6.size() - 1] - xData6[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(Turbi_Cal7==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 7;
                n1=n;
                x.setlength(xData7.size()); // Set the length of the real_1d_array

                for (int i = 0; i < xData7.size(); ++i) {
                    x[i] = xData7[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(yData7.size()); // Set the length of the real_1d_array

                for (int i = 0; i < yData7.size(); ++i) {
                    y[i] = yData7[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData7, yData7);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData7.first()-2.5,xData7.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData7.begin() , yData7.end())-0.25,*std::max_element(yData7.begin() , yData7.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData7[0] + i * (xData7[xData7.size() - 1] - xData7[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(Turbi_Cal8==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 8;
                n1=n;
                x.setlength(MainxData.size()); // Set the length of the real_1d_array

                for (int i = 0; i < MainxData.size(); ++i) {
                    x[i] = MainxData[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(MainyData.size()); // Set the length of the real_1d_array

                for (int i = 0; i < MainyData.size(); ++i) {
                    y[i] = MainyData[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(MainxData, MainyData);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5,MainxData.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(MainyData.begin() , MainyData.end())-0.25,*std::max_element(MainyData.begin() , MainyData.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = MainxData[0] + i * (MainxData[MainxData.size() - 1] - MainxData[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
    }
    else if(Graph_Type=="5PL")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        if(Turbi_Cal1==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 1;
                n1=n;
                x.setlength(xData1.size());

                for (int i = 0; i < xData1.size(); ++i) {
                    x[i] = xData1[i];
                }
                y.setlength(yData1.size());

                for (int i = 0; i < yData1.size(); ++i) {
                    y[i] = yData1[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);


                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData1, yData1);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData1.first()-2.5,xData1.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData1.begin() , yData1.end())-0.25,*std::max_element(yData1.begin() , yData1.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData1[0] + i * (xData1[xData1.size() - 1] - xData1[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(Turbi_Cal2==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 2;
                n1=n;
                x.setlength(xData2.size());

                for (int i = 0; i < xData2.size(); ++i) {
                    x[i] = xData2[i];
                }
                y.setlength(yData2.size());

                for (int i = 0; i < yData2.size(); ++i) {
                    y[i] = yData2[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);


                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData2, yData2);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData2.first()-2.5,xData2.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData2.begin() , yData2.end())-0.25,*std::max_element(yData2.begin() , yData2.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData2[0] + i * (xData2[xData2.size() - 1] - xData2[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(Turbi_Cal3==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 3;
                n1=n;
                x.setlength(xData3.size());

                for (int i = 0; i < xData3.size(); ++i) {
                    x[i] = xData3[i];
                }
                y.setlength(yData3.size());

                for (int i = 0; i < yData3.size(); ++i) {
                    y[i] = yData3[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);


                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData3, yData3);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData3.first()-2.5,xData3.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData3.begin() , yData3.end())-0.25,*std::max_element(yData3.begin() , yData3.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData3[0] + i * (xData3[xData3.size() - 1] - xData3[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(Turbi_Cal4==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 4;
                n1=n;
                x.setlength(xData4.size());

                for (int i = 0; i < xData4.size(); ++i) {
                    x[i] = xData4[i];
                }
                y.setlength(yData4.size());

                for (int i = 0; i < yData4.size(); ++i) {
                    y[i] = yData4[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);


                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData4, yData4);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData4.first()-2.5,xData4.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData4.begin() , yData4.end())-0.25,*std::max_element(yData4.begin() , yData4.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData4[0] + i * (xData4[xData4.size() - 1] - xData4[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(Turbi_Cal5==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 5;
                n1=n;
                x.setlength(xData5.size());

                for (int i = 0; i < xData5.size(); ++i) {
                    x[i] = xData5[i];
                }
                y.setlength(yData5.size());

                for (int i = 0; i < yData5.size(); ++i) {
                    y[i] = yData5[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);


                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData5, yData5);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData5.first()-2.5,xData5.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData5.begin() , yData5.end())-0.25,*std::max_element(yData5.begin() , yData5.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData5[0] + i * (xData5[xData5.size() - 1] - xData5[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(Turbi_Cal6==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 6;
                n1=n;
                x.setlength(xData6.size());

                for (int i = 0; i < xData6.size(); ++i) {
                    x[i] = xData6[i];
                }
                y.setlength(yData6.size());

                for (int i = 0; i < yData6.size(); ++i) {
                    y[i] = yData6[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);


                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData6, yData6);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData6.first()-2.5,xData6.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData6.begin() , yData6.end())-0.25,*std::max_element(yData6.begin() , yData6.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData6[0] + i * (xData6[xData6.size() - 1] - xData6[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(Turbi_Cal7==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 7;
                n1=n;
                x.setlength(xData7.size());

                for (int i = 0; i < xData7.size(); ++i) {
                    x[i] = xData7[i];
                }
                y.setlength(yData7.size());

                for (int i = 0; i < yData7.size(); ++i) {
                    y[i] = yData7[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);

                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData7, yData7);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData7.first()-2.5,xData7.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData7.begin() , yData7.end())-0.25,*std::max_element(yData7.begin() , yData7.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData7[0] + i * (xData7[xData7.size() - 1] - xData7[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(Turbi_Cal8)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 8;
                n1=n;
                x.setlength(MainxData.size());

                for (int i = 0; i < MainxData.size(); ++i) {
                    x[i] = MainxData[i];
                }
                y.setlength(MainyData.size());

                for (int i = 0; i < MainyData.size(); ++i) {
                    y[i] = MainyData[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);

                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(MainxData, MainxData);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5,MainxData.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(MainyData.begin() , MainyData.end())-0.25,*std::max_element(MainyData.begin() , MainyData.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = MainxData[0] + i * (MainxData[MainxData.size() - 1] - MainxData[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
    }
}

void MainWindow::Polynomial()
{
    cout << "Polynomial fit!" << endl;
    cout << "x count value" << polycal << endl;
    // Input values
    // **********************
    size_t k=dummyk;
    qDebug()<<k<<"order";
    bool fixed=true;// Polynomial order
    bool fixedinter = false;
    if(rec==1){
        fixedinter = true;
    }                    // Fixed the intercept (coefficient A0)
    else if(rec==0){
        fixedinter =  false;
    }
    int wtype = 0;                                   // Weight: 0 = none (default), 1 = sigma, 2 = 1/sigma^2
    double fixedinterval = 0.;                       // The fixed intercept value (if applicable)
    double alphaval = 0.05;                          // Critical apha value

    double y[100];
    for(int i=0;i<polycal;i++){
        y[i]=polyx[i];
        cout<<"poly xvalues"<<y[i];
    }
    double x[100];
    for(int i=0;i<polycal;i++){
        x[i]=polyy[i];
        qDebug()<<x[i]<<"poly y values";
    }
    double erry[] = {0.1, 0.3, 0.2, 0.4, 0.1, 0.3};       // Data points (err on y) (if applicable)

    // Definition of other variables
    // **********************
    size_t n = 0;                                    // Number of data points (adjusted later)
    size_t nstar = 0;                                // equal to n (fixed intercept) or (n-1) not fixed
    double coefbeta[k+1];                            // Coefficients of the polynomial
    double serbeta[k+1];                             // Standard error on coefficients
    double tstudentval = 0.;                         // Student t value
    double SE = 0.;                                  // Standard error

    double **XTWXInv;                                // Matrix XTWX Inverse [k+1,k+1]
    double **Weights;                                // Matrix Weights [n,n]
    cout << "size of x " << sizeof(x) <<polycal << endl;
    if(polycal==1){
        n=1*8;
        cout << "n value" << n <<polycal << endl;
    }
    else if(polycal==2){
        n=2*8;
        cout << "n value" << n <<polycal << endl;
    }
    else if(polycal==3){
        n=3*8;
        cout << "n value" << n <<polycal << endl;
    }
    else if(polycal==4){
        n=4*8;
        cout << "n value" << n <<polycal << endl;
    }
    else if(polycal==5){
        n=5*8;
        cout << "n value" << n <<polycal << endl;
    }
    else if(polycal==6){
        n=6*8;
        cout << "n value" << n <<polycal << endl;
    }
    else if(polycal==7){
        n=7*8;
        cout << "n value" << n <<polycal << endl;
    }
    else if(polycal==8){
        n=8*8;
        cout << "n value" << n <<polycal << endl;
    }

    cout << "n value" << n <<polycal << endl;
    // Initialize values
    // **********************
    n = n/sizeof(double);
    nstar = n-1;
    if (fixedinter) nstar = n;

    cout << "Number of points: " << n << endl;
    cout << "Polynomial order: " << k << endl;
    if (fixedinter) {
        cout << "A0 is fixed!" << endl;
    } else {
        cout << "A0 is adjustable!" << endl;
    }

    if (k>nstar) {
        cout << "The polynomial order is too high. Max should be " << n << " for adjustable A0 ";
        cout << "and " << n-1 << " for fixed A0. ";
        cout << "Program stopped" << endl;

    }

    if (k==nstar) {
        cout << "The degree of freedom is equal to the number of points. ";
        cout << "The fit will be exact." << endl;
    }
    XTWXInv = Make2DArray(k+1,k+1);
    Weights = Make2DArray(n,n);

    // Build the weight matrix
    // **********************
    CalculateWeights(erry, Weights, n, wtype);
    cout << "Weights" << endl;
    displayMat(Weights,n,n);
    if (determinant(Weights,n)==0.) {
        cout << "One or more points have 0 error. Review the errors on points or use no weighting. ";
        cout << "Program stopped" << endl;
    }
    // Calculate the coefficients of the fit
    // **********************
    PolyFit(x,y,n,k,fixedinter,fixedinterval,coefbeta,Weights,XTWXInv);
    // Calculate related values
    // **********************
    double RSS = CalculateRSS(x,y,coefbeta,Weights,fixed,n,k+1);
    double TSS = CalculateTSS(x,y,coefbeta,Weights,fixedinter,n,k+1);
    double R2 = CalculateR2COD(x,y,coefbeta,Weights,fixedinter,n,k+1);
    double R2Adj = CalculateR2Adj(x,y,coefbeta,Weights,fixedinter,n,k+1);
    if ((nstar-k)>0) {
        SE = sqrt(RSS/(nstar-k));
        tstudentval = fabs(CalculateTValueStudent(nstar-k, 1.-0.5*alphaval));
    }
    qDebug()<<"CalculateTValueStudent finished";
    cout << "t-student value: " << tstudentval << endl << endl;

    // Calculate the standard errors on the coefficients
    // **********************;
    CalculateSERRBeta(fixedinter,SE,k,serbeta,XTWXInv);

    // Display polynomial
    // **********************
    DisplayPolynomial(k);

    // Display polynomial coefficients
    // **********************
    DisplayCoefs(k, nstar, tstudentval, coefbeta, serbeta);

    // Display statistics
    // **********************
    DisplayStatistics(n,nstar,k,RSS,R2,R2Adj,SE);

    // Display ANOVA table
    // **********************
    DisplayANOVA(nstar, k, TSS, RSS);

    // Write the prediction and confidence intervals
    // **********************
    WriteCIBands("CIBands2.dat",x,coefbeta,XTWXInv,tstudentval,SE,n,k);

    // Display the covariance and correlation matrix
    // **********************
    DisplayCovCorrMatrix(k, SE, fixedinter, XTWXInv);
}
QVector<double> MainWindow::calculateTrendline(const QVector<double> &xData, const QVector<double> &yData) {
    double sumX = 0, sumY = 0, sumXY = 0, sumXX = 0;
    int n = xData.size();

    for (int i = 0; i < n; ++i) {
        sumX += xData[i];
        sumY += yData[i];
        sumXY += xData[i] * yData[i];
        sumXX += xData[i] * xData[i];
    }
    Slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
    Intercept = (sumY -  Slope* sumX) / n;
    qDebug()<<"sumX : "<<sumX;
    qDebug()<<"sumY : "<<sumY;
    qDebug()<<"sumXY : "<<sumXY;
    qDebug()<<"sumXX : "<<sumXX;
    qDebug()<<"Slope : "<<(QString::number(Slope,'f',4));
    qDebug()<<"interCept : "<<(QString::number(Intercept,'f',4));

    QSqlQuery qy;
    qy.prepare("Update Turbidity_test set Slope='"+QString::number(Slope,'f',4)+"',Intercept='"+QString::number(Intercept,'f',4)+"' where TestName='"+TestName+"'");
    qy.exec();

    QVector<double> trendline;
    for (int i = 0; i < n; ++i) {
        trendline.append(Slope * xData[i] + Intercept);
    }
    // Calculate and print R-squared
    double rSquared = calculateRSquared(xData, yData, Slope, Intercept);
    qDebug() << "R-squared: " << rSquared;

    ui->label_465->setText(QString::number(rSquared,'f',4));
    return trendline;
}

double MainWindow::calculateRSquared(const QVector<double> &xData, const QVector<double> &yData, double slope, double intercept) {
    int n = xData.size();
    double sumY = 0, sumYY = 0, sumYhat = 0, sumYhatY = 0;

    // Calculate sums
    for (int i = 0; i < n; ++i) {
        sumY += yData[i];
        sumYY += yData[i] * yData[i];
        double yHat = slope * xData[i] + intercept;
        sumYhat += yHat;
        sumYhatY += yHat * yData[i];
    }

    // Calculate R-squared
    //double meanY = sumY / n;
    double SSreg = sumYhatY - (sumY * sumY) / n;
    double SStot = sumYY - (sumY * sumY) / n;
    double rSquared = SSreg / SStot;

    return rSquared;
}


// Calculate the weights matrix
// **********************
void MainWindow::CalculateWeights(const double *erry, double **Weights, const size_t n,
                                  const int type) {


    for(size_t i = 0; i < n; i++) {

        switch (type) {
        case 0:
            Weights[i][i] = 1.;
            break;
        case 1:
            Weights[i][i] = erry[i];
            break;
        case 2:
            if (erry[i]>0.) {
                Weights[i][i] = 1./(erry[i]*erry[i]);
            }
            else {
                Weights[i][i] = 0.;
            }
            break;
        }
    }
}

// Perform the fit of data n data points (x,y) with a polynomial of order k
// **********************
void MainWindow::PolyFit(const double *x, double *y, const size_t n, const size_t k, const bool fixedinter,
                         const double fixedinterval, double *beta, double **Weights, double **XTWXInv) {

    // Definition of variables
    // **********************
    double **X = Make2DArray(n,k+1);           // [n,k+1]
    double **XT;                               // [k+1,n]
    double **XTW;                              // [k+1,n]
    double **XTWX;                             // [k+1,k+1]

    double *XTWY = new double[k+1];
    double *Y = new double[n];

    size_t begin = 0;
    if (fixedinter) begin = 1;

    // Initialize X
    // **********************
    for (size_t i=0; i<n; i++) {
        for (size_t j=begin; j<(k+1); j++) {  // begin
            X[i][j]=pow(x[i],j);
        }
    }

    // Matrix calculations
    // **********************
    XT = MatTrans(X, n, k+1);                 // Calculate XT
    XTW = MatMul(k+1,n,n,XT,Weights);         // Calculate XT*W
    XTWX = MatMul(k+1,n,k+1,XTW,X);           // Calculate (XTW)*X

    if (fixedinter) XTWX[0][0] = 1.;

    cofactor(XTWX, XTWXInv, k+1);             // Calculate (XTWX)^-1

    for (size_t m=0; m<n; m++) {
        if (fixedinter) {
            Y[m]= y[m]-fixedinterval;
        }
        else {
            Y[m] = y[m];
        }
    }
    MatVectMul(k+1,n,XTW,Y,XTWY);             // Calculate (XTW)*Y
    MatVectMul(k+1,k+1,XTWXInv,XTWY,beta);    // Calculate beta = (XTWXInv)*XTWY

    if (fixedinter) beta[0] = fixedinterval;

    cout << "Matrix X" << endl;
    displayMat(X,n,k+1);

    cout << "Matrix XT" << endl;
    displayMat(XT,k+1,n);

    cout << "Matrix XTW" << endl;
    displayMat(XTW,k+1,n);

    cout << "Matrix XTWXInv" << endl;
    displayMat(XTWXInv,k+1,k+1);
}

// Perform the multiplication of matrix A[m1,m2] by B[m2,m3]
// **********************
double **MainWindow::MatMul(const size_t m1, const size_t m2, const size_t m3, double **A, double **B) {

    double **array = Make2DArray(m1,m3);

    for (size_t i=0; i<m1; i++) {
        for (size_t j=0; j<m3; j++) {
            array[i][j]=0.;
            for (size_t m=0; m<m2; m++) {
                array[i][j]+=A[i][m]*B[m][j];
            }
        }
    }
    return array;
}


// Calculates the cofactors
// **********************
void MainWindow::cofactor(double **num, double **inverse, const size_t f)
{

    double **b = Make2DArray(f,f);
    double **fac = Make2DArray(f,f);

    size_t m;
    size_t n;

    for (size_t q=0; q<f; q++) {

        for (size_t p=0; p<f; p++) {

            m = 0;
            n = 0;

            for (size_t i=0; i<f; i++) {

                for (size_t j=0; j<f; j++) {

                    if (i != q && j != p) {

                        b[m][n] = num[i][j];

                        if (n < (f - 2)) {
                            n++;
                        }
                        else
                        {
                            n = 0;
                            m++;
                        }
                    }
                }
            }
            fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
        }
    }

    transpose(num, fac, inverse, f);

}


// Perform the
// **********************
void MainWindow::transpose(double **num, double **fac, double **inverse, const size_t r) {

    double **b = Make2DArray(r,r);
    double deter;

    for (size_t i=0; i<r; i++) {
        for (size_t j=0; j<r; j++) {
            b[i][j] = fac[j][i];
        }
    }

    deter = determinant(num, r);

    for (size_t i=0; i<r; i++) {
        for (size_t j=0; j<r; j++) {
            inverse[i][j] = b[i][j] / deter;
        }
    }

}
// Calculates the determinant of a matrix
// **********************
double MainWindow::determinant(double **a, const size_t k) {
    //qDebug()<<"entered determinant";

    double s = 1;
    double det = 0.;
    double **b = Make2DArray(k,k);
    //qDebug()<<" finised Make2DArray";
    size_t m;
    size_t n;

    if (k == 1) return (a[0][0]);

    for (size_t c=0; c<k; c++) {

        m = 0;
        n = 0;

        for (size_t i = 0; i < k; i++) {

            for (size_t j = 0; j < k; j++) {

                b[i][j] = 0;

                if (i != 0 && j != c) {

                    b[m][n] = a[i][j];
                    if (n < (k - 2)) {
                        n++;
                    }
                    else
                    {
                        n = 0;
                        m++;
                    }
                }
            }
        }

        //qDebug()<<"entered determinant again";
        det = det + s * (a[0][c] * determinant(b, k - 1));
        s = -1 * s;

    }
    /*  q++;
    qDebug()<<q;*/
    return (det);

}

// Perform the multiplication of matrix A[m1,m2] by vector v[m2,1]
// **********************
void MainWindow::MatVectMul(const size_t m1, const size_t m2, double **A, double *v, double *Av) {


    for (size_t i=0; i<m1; i++) {
        Av[i]=0.;
        for (size_t j=0; j<m2; j++) {
            Av[i]+=A[i][j]*v[j];
        }
    }


}

// Transpose a 2D array
// **********************
double **MainWindow::MatTrans(double **arrayd, const size_t rows, const size_t cols) {

    double **arrayT = Make2DArray(cols,rows);

    for(size_t i = 0; i < rows; i++) {
        for(size_t j = 0; j < cols; j++) {
            arrayT[j][i] = arrayd[i][j];
        }
    }

    return arrayT;

}
// Calculate coefficient R2 - COD
// **********************
double MainWindow::CalculateR2COD(const double *x, const double *y, const double *a, double **Weights,
                                  const bool fixed, const size_t N, const size_t n) {

    double RSS = CalculateRSS(x,y,a,Weights,fixed,N,n);
    double TSS = CalculateTSS(x,y,a,Weights,fixed,N,n);
    double R2 = 1.-RSS/TSS;

    return R2;

}

// Calculate the coefficient R2 - adjusted
// **********************
double MainWindow::CalculateR2Adj(const double *x, const double *y, const double *a, double **Weights, const bool fixed,const size_t N, const size_t n) {

    double RSS = CalculateRSS(x,y,a,Weights,fixed,N,n);
    double TSS = CalculateTSS(x,y,a,Weights,fixed,N,n);
    cout<<N<<" N value ";
    cout<<n<<" N value ";
    double dferr = N-n;
    double dftot = N-1;

    if (fixed) {
        dferr += 1.;
        dftot += 1.;
    }
    double R2Adj = 1.-(dftot)/(dferr)*RSS/TSS;


    return R2Adj;

}

// Calculate the total sum of squares (TSS)
// **********************
double MainWindow::CalculateTSS(const double *x, const double *y, const double *a, double **Weights,
                                const bool fixed, const size_t N, const size_t n) {

    Q_UNUSED(x);
    Q_UNUSED(a);
    Q_UNUSED(n);
    double r2 = 0.;
    double ri = 0.;
    double sumwy = 0.;
    double sumweights = 0.;
    size_t begin = 0;
    if (fixed) {
        for (size_t i=begin; i<N; i++) {
            r2+= y[i]*y[i]*Weights[i][i];
        }
    } else {


        for (size_t i=begin; i<N; i++) {
            sumwy += y[i]*Weights[i][i];
            sumweights += Weights[i][i];
        }

        for (size_t i=begin; i<N; i++) {
            ri = y[i]-sumwy/sumweights;
            r2 += ri*ri*Weights[i][i];
        }
    }

    return r2;

}

// Calculate the residual sum of squares (RSS)
// **********************
double MainWindow::CalculateRSS(const double *x, const double *y, const double *a, double **Weights,
                                const bool fixed, const size_t N, const size_t n) {

    Q_UNUSED(fixed);
    double r2 = 0.;
    double ri = 0.;
    for (size_t i=0; i<N; i++) {
        ri = y[i];
        for (size_t j=0; j<n; j++) {
            ri -= a[j]*pow(x[i],j);
        }
        qDebug()<<"Weights"<<Weights[i][i];
        r2 += ri*ri*Weights[i][i];
    }

    return r2;

}

// Calculate the t value for a Student distribution
// Adapted from http://www.cplusplus.com/forum/beginner/216098/
// **********************
double MainWindow::CalculateTValueStudent(const double nu, const double alpha) {

    // double precision = 1.e-5;

    if (alpha<=0. || alpha >= 1.) return 0.;

    double x = invincbeta(2.*min(alpha,1.-alpha), 0.5*nu, 0.5);
    x = sqrt(nu*(1.-x)/x);
    return (alpha >= 0.5? x : -x);
}

double MainWindow::invincbeta(double y,double alpha, double beta) {

    if (y <= 0.) return 0.;
    else if (y >= 1.) return 1.;
    if (alpha<=0.) {
        std::cout << "Warning: alpha should be >0";
        return 0.;
    }

    if (beta<=0.) {
        std::cout << "Warning: beta should be >0";
        return 0.;
    }


    double x = 0.5;
    double a = 0;
    double b = 1;
    double precision = 1.e-8;
    double binit = y;
    double bcur = incbeta(alpha,beta,x);

    while (fabs(bcur-binit)>precision) {

        if ((bcur-binit)<0) {
            a = x;
        }
        else {
            b = x;
        }
        x = (a+b)*0.5;
        bcur = incbeta(alpha,beta,x);

        //std::cout << x << "\t" << bcur << "\n";
    }
    return x;
}

// Calculate the standard error on the beta coefficients
// **********************
void MainWindow::CalculateSERRBeta(const bool fixedinter, const double SE, size_t k, double *serbeta, double **XTWXInv) {

    size_t begin = 0;
    if (fixedinter) begin = 1;

    serbeta[0] = 0.;
    for (size_t i=begin; i<(k+1); i++) {
        serbeta[i] = SE*sqrt(XTWXInv[i][i]);
    }

}

// Display the polynomial
// **********************
void MainWindow::DisplayPolynomial(const size_t k) {

    cout << "y = ";
    for (size_t i=0; i<(k+1); i++) {
        cout << "A" << i;
        if (i>0) cout << "X";
        if (i>1) cout << "^" << i;
        if (i<k) cout << " + ";
    }
    cout << endl << endl;

}

// Display the coefficients of the polynomial
// **********************
void MainWindow::DisplayCoefs(const size_t k, const size_t nstar, const double tstudentval, const double *coefbeta, const double *serbeta )
{
    double lcibeta;    // Low confidence interval coefficients;
    double hcibeta;    // High confidence interval coefficients

    cout << "Polynomial coefficients" << endl;
    cout << "Coeff\tValue\tStdErr\tLowCI\tHighCI\tStudent-t\tProb>|t|" << endl;
    QVector<double> predictedY;

    for (size_t i=0; i<(k+1); i++) {
        lcibeta = coefbeta[i]-tstudentval*serbeta[i];
        hcibeta = coefbeta[i]+tstudentval*serbeta[i];
        cout << "A" << i << "\t";
        cout << coefbeta[i] << "\t";
        cout << serbeta[i] << "\t";
        cout << lcibeta << "\t";
        cout << hcibeta << "\t";

        if (serbeta[i]>0) {
            cout << coefbeta[i]/serbeta[i] << "\t";
            cout << 1.-cdfStudent(nstar-k, coefbeta[i]/serbeta[i]);
        } else {
            cout << "-\t-";
        }

        cout << endl;
    }
    double y[100];
    QVector<double> x1,y1;
    for(int i=0;i<polycal;i++){
        y[i]=polyx[i];
        y1.append(polyx[i]);
        qDebug()<<y[i]<<"y values in poly fun()";
    }

    double x[100];

    for(int i=0;i<polycal;i++){
        x[i]=polyy[i];
        x1.append(polyy[i]);
        qDebug()<<x[i]<<"x values in poly fun()";
    }

    int sz=sizeof(coefbeta);
    qDebug()<<"zxxxxxxxxxxxxxxxxx : "  <<sz;
    // int size = sizeof(values) / sizeof(values[0])
    int size = sizeof(coefbeta) / sizeof(coefbeta[0]);
    //int size = coefbeta.size();
    for (double xi : polyy) {
        double yi = 0;
        for (int i = 0; i < sz;++i)
        {
            yi += coefbeta[i] * pow(xi, i);
        }
        predictedY.append(yi);
    }
    qDebug()<<polyy<<"y array size"<<"size : "<<size;
    double meanY = 0;
    for (double yi : polyx) {
        meanY += yi;
    }
    meanY /= polycal;

    double sst = 0; // Total Sum of Squares
    double sse = 0; // Residual Sum of Squares

    for (int i = 0; i < polycal; ++i) {
        sst += pow(polyx[i] - meanY, 2);
        sse += pow(polyx[i] - predictedY[i], 2);
    }

    double R2 = 1 - (sse / sst);
    qDebug()<<"R-square_value : "<<QString::number(R2);
    ui->label_465->setText(QString::number(R2,'f',4));

    double xmin,xmax,ymin,ymax;
    xmin=*std::min_element(polyy.begin(),polyy.end());
    ymin=*std::min_element(polyx.begin(),polyx.end());
    xmax=*std::max_element(polyy.begin(),polyy.end());
    ymax=*std::max_element(polyx.begin(),polyx.end());
    ui->customPlot_6->addGraph();
    ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
    ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);


    //ui->customPlot_2->xAxis->setRange(0,70);
    //ui->customPlot_2->yAxis->setRange(0,5);
    for (int i = 0; i < polycal; ++i) {
        ui->customPlot_6->graph(0)->addData(x[i], y[i]);
    }
    newCurvesum = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
    newCurvesum->setLineStyle(QCPCurve::lsLine);
    newCurvesum->setScatterStyle(QCPScatterStyle::ssDot);
    int j=-1;

    // Assuming coefficients[0] is x^0, coefficients[1] is x^1, and coefficients[2] is x^2
    qDebug()<<"before entering 2nd order";
    if(rec==1) {
        double x11,x22,y11,y22;
        x11=x[1]-xmin;
        x22=xmax-x[polycal-2];
        y11=y[1]-ymin;
        y22=ymax-y[polycal-2];
        qDebug()<<"x11 : "<<x11<<" "<<"x22 : "<<x22<<" "<<"y11 : "<<y11<<" "<<"y22 : "<<y22;
        ui->customPlot_6->xAxis->setRange(x1.first()-x11, x1.last()+x22);
        ui->customPlot_6->yAxis->setRange(y1.first()-y11, y1.last()+y22);
        x[polycal]=x[polycal-1]+1;
        x[polycal+1]=x[polycal]-1;
        if(dummyk==2) {
            qDebug()<<"entered 2nd order curve"<<" "<<polycal;
            for (int i = 0; i < polycal; ++i) {
                qDebug()<<"entered for loop1"<<" " <<"i val : "<<i<<" "<<"x[i] : "<<x[i]<<"x[i]+1 : "<<x[i+1];
                double step = 0.1;  // You can adjust the step size as needed
                for (double xval = x[i]; xval < x[i + 1]; xval += step) {

                    qDebug()<<"entered for loop2"<<" "<<"i val : "<<i;
                    double yval = coefbeta[1] * xval + coefbeta[2] * xval * xval;
                    j++;
                    newCurvesum->addData(xval,yval);// Replace this with your polynomial function
                    qDebug() << xval << yval << "curve x and y values"<<"x[i] : "<<x[i]<<" "<<x[i+1]<<" "<<step;
                    if(i==polycal-1)
                        break;
                }
            }

        }
        else if(dummyk==3){
            qDebug()<<"entered 3rd order curve"<<" "<<polycal;
            for (int i = 0; i < polycal; ++i) {
                qDebug()<<"entered for loop1"<<" " <<"i val : "<<i;
                double step = 0.1;  // You can adjust the step size as needed
                for (double xval = x[i]; xval < x[i + 1]; xval += step) {
                    qDebug()<<"entered for loop2";
                    double yval = coefbeta[1] * xval + coefbeta[2] * xval * xval+ coefbeta[3] * xval * xval * xval;
                    j++;
                    newCurvesum->addData(xval,yval);// Replace this with your polynomial function
                    qDebug() << xval << yval << "curve x and y values"<<"x[i] : "<<x[i]<<" "<<x[i+1]<<" "<<step;
                    if(i==polycal-1)
                        break;
                }
            }
        }
    }
    else if(rec==0) {

        double x11,x22,y11,y22;
        x11=x[polycal-2]-xmin;
        x22=xmax-x[1];
        y11=y[1]-ymin;
        y22=ymax-y[polycal-2];
        qDebug()<<x11<<"xmin"<<x22<<"xmax"<<y11<<"ymin"<<y22<<"ymax";
        qDebug()<<x1.first()<<x1.last()<<x1<<"x first and last";
        qDebug()<<y1.first()<<y1.last()<<y1<<"y first and last";
        ui->customPlot_6->xAxis->setRange(x1.last()-x11, x1.first()+x22);
        ui->customPlot_6->yAxis->setRange(y1.first()-y11, y1.last()+y22);
        if(dummyk==2){
            qDebug()<<"entered 2nd order curve";
            for (int i = 0; i < polycal; ++i) {
                qDebug()<<"entered for loop1";
                double step = 0.1;  // You can adjust the step size as needed
                for (double xval = x[i]; xval > x[i + 1]; xval -= step) {
                    qDebug()<<"entered for loop2";
                    double yval = coefbeta[0]+coefbeta[1] * xval + coefbeta[2] * xval * xval;
                    j++;
                    newCurvesum->addData(xval,yval);// Replace this with your polynomial function
                    qDebug() << xval << yval << "curve x and y values";
                    if(i==polycal-1)
                        break;
                }
            }

        }
        else if(dummyk==3){
            qDebug()<<"entered 3nd order curve";
            for (int i = 0; i < polycal; ++i) {
                qDebug()<<"entered for loop1";
                double step = 0.1;  // You can adjust the step size as needed
                for (double xval = x[i]; xval > x[i + 1]; xval -= step) {
                    qDebug()<<"entered for loop2";
                    double yval = coefbeta[0]+coefbeta[1] * xval + coefbeta[2] * xval * xval+ coefbeta[3] * xval * xval * xval;
                    j++;
                    newCurvesum->addData(xval,yval);// Replace this with your polynomial function
                    qDebug() << xval << yval << "curve x and y values";
                    if(i==polycal-1)
                        break;
                }
            }
        }

    }
    ui->customPlot_6->replot();
    ui->customPlot_6->update();
}

// Cumulative distribution for Student-t
// **********************
double MainWindow::cdfStudent(const double nu, const double t)
{
    double x = nu/(t*t+nu);

    return 1.-incbeta(0.5*nu,0.5,x);
}


// Display the ANOVA test result
// **********************
void MainWindow::DisplayANOVA(const size_t nstar, const size_t k, const double TSS, const double RSS) {

    double MSReg = (TSS-RSS)/(k);
    double MSE = RSS/(nstar-k);
    double FVal = MSReg/MSE;
    double pFVal = 1.-cdfFisher(k,nstar-k, FVal);

    cout << "ANOVA" << endl;
    cout << "\tDF\tSum squares\tMean square\tF value\tProb>F" << endl;
    cout << "Model\t" << k << "\t" << (TSS-RSS) << "\t" << (TSS-RSS)/k << "\t" << FVal << "\t" << pFVal << endl;
    cout << "Error\t" << nstar-k << "\t" << RSS << "\t" << RSS/(nstar-k) << endl;
    cout << "Total\t" << nstar << "\t" << TSS << endl << endl;

}

// Cumulative distribution for Fisher F
// **********************
double MainWindow::cdfFisher(const double df1, const double df2, const double x) {
    double y = df1*x/(df1*x+df2);
    return incbeta(0.5*df1,0.5*df2,y);
}

// Calculate and write the confidence bands in a file
// **********************
void MainWindow::WriteCIBands(std::string filename, const double *x, const double *coefbeta, double **XTXInv,
                              const double tstudentval, const double SE, const size_t n, const size_t k) {


    double interval = (x[n-1]-x[0]);
    double x1,y0,y1,y2,y3,y4;
    double xstar[k+1];
    double xprod = 0.;

    ofstream output;
    output.open(filename.c_str());

    for (int i=0; i<101; i++) {
        x1 = x[0]+interval/100.*i;
        for (size_t j=0; j<k+1; j++) {
            xstar[j] = pow(x1,j);
        }

        xprod = 0.;
        for (size_t j=0; j<(k+1); j++) {
            for (size_t m=0; m<(k+1); m++) {
                xprod += xstar[m]*xstar[j]*XTXInv[j][m];
            }
        }

        y0 = calculatePoly(x1, coefbeta,k+1);
        y1 = y0 - tstudentval*SE*sqrt(xprod);
        y2 = y0 + tstudentval*SE*sqrt(xprod);
        y3 = y0 - tstudentval*SE*sqrt(1+xprod);
        y4 = y0 + tstudentval*SE*sqrt(1+xprod);

        output << x1 << "\t" << y0 << "\t" << y1 << "\t" << y2 << "\t";
        output << y3 << "\t" << y4 << endl;
    }
    output.close();
}

// Calculate the polynomial at a given x value
// **********************
double MainWindow::calculatePoly(const double x, const double *a, const size_t n) {

    double poly = 0.;

    for (size_t i=0; i<n; i++) {
        poly += a[i]*pow(x,i);
    }

    return poly;

}

// Display a matrix
// **********************
void MainWindow::displayMat(double **A, const size_t n, const size_t m)  {

    cout << "Matrix " << n << " x " << m << endl;
    for (size_t i=0; i<n; i++) {
        for (size_t j=0; j<m; j++)
            cout << A[i][j] << "\t";
        cout << endl;
    }
    cout << endl;

}

void MainWindow::DisplayStatistics(const size_t n, const size_t nstar, const size_t k, const double RSS, const double R2,
                                   const double R2Adj, const double SE) {
    cout << endl;
    cout << "Statistics" << endl;
    cout << "Number of points: " << n << endl;
    cout << "Degrees of freedom: " << nstar-k << endl;
    cout << "Residual sum of squares: " << RSS << endl;
    cout << "R-square (COD): " << R2 << endl;
    cout << "Adj R-square: " << R2Adj << endl;
    cout << "RMSE: " << SE << endl << endl;

}


// Display the covariance and correlation matrix
// **********************
void MainWindow::DisplayCovCorrMatrix(const size_t k, const double sigma, const bool fixed, double **XTWXInv) {


    double **CovMatrix = Make2DArray(k+1,k+1);
    double **CorrMatrix = Make2DArray(k+1,k+1);

    for (size_t i=0; i<k+1; i++) {
        for (size_t j=0; j<k+1; j++) {
            CovMatrix[i][j] = sigma*sigma*XTWXInv[i][j];
        }
    }

    if (fixed) CovMatrix[0][0] = 1.;

    for (size_t i=0; i<k+1; i++) {
        for (size_t j=0; j<k+1; j++) {
            CorrMatrix[i][j] = CovMatrix[i][j]/(sqrt(CovMatrix[i][i])*sqrt(CovMatrix[j][j]));
        }
    }


    cout << "Covariance matrix" << endl;
    displayMat(CovMatrix,k+1,k+1);

    cout << "Correlation matrix" << endl;
    displayMat(CorrMatrix,k+1,k+1);
}

// Initialize a 2D array
// **********************
double **MainWindow::Make2DArray(const size_t rows, const size_t cols) {

    double **arrayd;
    arrayd = new double*[rows];
    for(size_t i = 0; i < rows; i++) {
        arrayd[i] = new double[cols];
    }
    for(size_t i = 0; i < rows; i++) {
        for(size_t j = 0; j < cols; j++) {
            arrayd[i][j] = 0.;
        }
    }
    return arrayd;
}

double MainWindow::incbeta(double a, double b, double x) {
    if (x < 0.0 || x > 1.0) return 1.0/0.0;

    if (a<=0.) {
        std::cout << "Warning: a should be >0";
        return 0.;
    }

    if (b<=0.) {
        std::cout << "Warning: b should be >0";
        return 0.;
    }


    //The continued fraction converges nicely for x < (a+1)/(a+b+2)/
    if (x > (a+1.0)/(a+b+2.0)) {
        return (1.0-incbeta(b,a,1.0-x)); //Use the fact that beta is symmetrical./
    }

    //Find the first part before the continued fraction./
    const double lbeta_ab = lgamma(a)+lgamma(b)-lgamma(a+b);
    const double front = exp(log(x)*a+log(1.0-x)*b-lbeta_ab) / a;

    //Use Lentz's algorithm to evaluate the continued fraction./
    double f = 1.0, c = 1.0, d = 0.0;

    int i, m;
    for (i = 0; i <= 200; ++i) {
        m = i/2;

        double numerator;
        if (i == 0) {
            numerator = 1.0; //First numerator is 1.0./
        } else if (i % 2 == 0) {
            numerator = (m*(b-m)*x)/((a+2.0*m-1.0)*(a+2.0*m)); //Even term./
        } else {
            numerator = -((a+m)*(a+b+m)*x)/((a+2.0*m)*(a+2.0*m+1)); //Odd term./
        }

        //Do an iteration of Lentz's algorithm./
        d = 1.0 + numerator * d;
        if (fabs(d) < TINY) d = TINY;
        d = 1.0 / d;

        c = 1.0 + numerator / c;
        if (fabs(c) < TINY) c = TINY;

        const double cd = c*d;
        f *= cd;

        //Check for stop./
        if (fabs(1.0-cd) < STOP) {
            return front * (f-1.0);
        }
    }

    return 1.0/0.0; //Needed more loops, did not converge./
}

void MainWindow::Displaycountdowntimer()
{
    auto elapsed = etimer.elapsed();
    auto c = countdown.addSecs(-elapsed / 1000); // Convert elapsed milliseconds to seconds
    QString timestr = c.toString("mm:ss");
    ui->lcdNumber->display(timestr);
    if (timestr == "00:00")
    {
        Incubationtimer->stop();
        Turbidity_reading_AfterInc();
        ui->lcdNumber->display(timestr);
    }
    else if (c.second() % 20 == 0)
    { // Every 10 seconds
        qDebug()<<"Countdown : "<<timestr;
        Turbi_Update_Func(); // Call Turbi_Update_Func at exact 10-second intervals
    }
}

void MainWindow::Displaycountdowntimer1()
{
    auto elapsed = etimer.elapsed();
    auto c = countdown.addSecs(-elapsed / 1000); // Convert elapsed milliseconds to seconds
    QString timestr = c.toString("mm:ss");
    ui->lcdNumber_2->display(timestr);
    if (timestr == "00:00")
    {
        Incubationtimer1->stop();
        Read_d=1;
        ui->label_626->setText("Add R2 \n then click Read");
        ui->Turbi_Runsample_Btn_6->setText("Read");
        ui->stackedWidget_16->setCurrentIndex(0);
        //Turbidity_reading_AfterInc();
        ui->lcdNumber_2->display(timestr);
    }

}

void MainWindow::Turbi_Update_Func()
{
    double DeltaIs=0,Result=0;
    qDebug()<<"read Intenr :"<<Turbidity_read_Intensity;
    read_wave_LED=6; //LED
    read_wave135=1; //Photodiode 405nm (135°)
    read_wave180=0; //Photodiode 505nm (180°)
    Afterfiltwave135[0]=Turbidity_reading135();
    Afterfiltwave180[0]=Turbidity_reading180();
    Afterread135=Afterfiltwave135[0];
    Afterread180=Afterfiltwave180[0];
    DeltaIs=Afterread135-read135;
    Result=DeltaIs/read180;
    before_data = std::round(Result * 10000) / 10000; // Round to 4 decimal places
    //std::cout << "Rounded value: " << before_data << std::endl;
    //before_data=QString::number(Result,'f',4);
    Data=QString::number(Result,'f',4);
    double fin_data = Data.toDouble();
    if(Turdata==1)
    {
        Turbi_Current_Read_Point=0;
        Turdata++;
    }
    else
        Turbi_Current_Read_Point +=20;
    /* qDebug()<<"Init Read135 : "<< read135
           <<" AfterRead135 : "<<Afterread135
          <<"Init Read180 : "<<read180
         <<"AfterRead180 : "<<Afterread180
        <<"Result : "<<Result
       <<"Current X Data : "<< Turbi_Current_Read_Point
      <<"Current Y Data : "<<fin_data;*/
    addPoint(Turbi_Current_Read_Point,fin_data);
}

void MainWindow::on_Set_Graph_Btn_clicked()
{
    clearGraph_Turbidity();
    QString Graph_Type=ui->Graph_Type_3->currentText();
    double Cal1=0,Cal2=0,Cal3=0,Cal4=0,Cal5=0,Cal6=0,Cal7=0,Cal8=0,Abs1=0,Abs2=0,Abs3=0,Abs4=0,Abs5=0,Abs6=0,Abs7=0,Abs8=0;
    int No_of_cal=0;
    QString abs,Rctn_type;
    QSqlQuery qy;
    qy.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
    qy.exec();
    while(qy.next())
    {
        Rctn_type=qy.value(81).toString();
        No_of_cal=qy.value(10).toInt();
        Cal1=qy.value(11).toDouble();
        Cal2=qy.value(12).toDouble();
        Cal3=qy.value(13).toDouble();
        Cal4=qy.value(14).toDouble();
        Cal5=qy.value(15).toDouble();
        Cal6=qy.value(16).toDouble();
        Cal7=qy.value(17).toDouble();
        Cal8=qy.value(18).toDouble();

        Abs1=qy.value(19).toDouble();
        abs=qy.value(19).toString();
        Abs2=qy.value(20).toDouble();
        Abs3=qy.value(21).toDouble();
        Abs4=qy.value(22).toDouble();
        Abs5=qy.value(23).toDouble();
        Abs6=qy.value(24).toDouble();
        Abs7=qy.value(25).toDouble();
        Abs8=qy.value(26).toDouble();

    }
    qDebug()<<"Graph_Type : "<<Graph_Type;
    qDebug()<<"Cal1 : "<<Cal1 << " "<<"Abs1 : "<<Abs1<<"abs : "<<abs;
    qDebug()<<"Cal2 : "<<Cal2 << " "<<"Abs2 : "<<Abs2;
    qDebug()<<"Cal3 : "<<Cal3 << " "<<"Abs3 : "<<Abs3;
    qDebug()<<"Cal4 : "<<Cal4 << " "<<"Abs4 : "<<Abs4;
    qDebug()<<"Cal5 : "<<Cal5 << " "<<"Abs5 : "<<Abs5;
    qDebug()<<"Cal6 : "<<Cal6 << " "<<"Abs6 : "<<Abs6;
    qDebug()<<"Cal7 : "<<Cal7 << " "<<"Abs7 : "<<Abs7;
    qDebug()<<"Cal8 : "<<Cal8 << " "<<"Abs8 : "<<Abs8;
    double current_data=ui->lineEdit_24->text().toDouble();
    double factor = Cal1/current_data;
    QString Fact;
    if(factor>100)
        Fact=QString::number(factor,'f',0);
    else
        Fact=QString::number(factor,'f',2);
    qDebug()<<"The factor value is : "<<Fact;
    QSqlQuery qyy;
    qyy.prepare("Update Turbidity_test set Fact='"+Fact+"' where TestName='"+TestName+"'");
    qyy.exec();

    Slope=0;
    Intercept=0;
    QVector<double> MainxData, MainyData;
    QVector<double> xData1, yData1;
    QVector<double> xData2, yData2;
    QVector<double> xData3, yData3;
    QVector<double> xData4, yData4;
    QVector<double> xData5, yData5;
    QVector<double> xData6, yData6;
    QVector<double> xData7, yData7;
    QVector<double> logxData1, logxData2,logxData3, logxData4, logxData5, logxData6,logxData7, logMainxData;
    QVector<double> logyData1, logyData2,logyData3, logyData4, logyData5, logyData6,logyData7, logMainyData;
    double x1=0,x2=0,x3=0,x4=0,x5=0,x6=0,x7=0,x8=0;
    double y1=0,y2=0,y3=0,y4=0,y5=0,y6=0,y7=0,y8=0;
    x1=Cal1;
    x2=Cal2;
    x3=Cal3;
    x4=Cal4;
    x5=Cal5;
    x6=Cal6;
    x7=Cal7;
    x8=Cal8;

    y1=Abs1;
    y2=Abs2;
    y3=Abs3;
    y4=Abs4;
    y5=Abs5;
    y6=Abs6;
    y7=Abs7;
    y8=Abs8;

    double logx1=0,logx2=0,logx3=0,logx4=0,logx5=0,logx6=0,logx7=0,logx8=0;
    double logy1=0,logy2=0,logy3=0,logy4=0,logy5=0,logy6=0,logy7=0,logy8=0;


    xData1.append(x1);
    yData1.append(y1);
    xData2.append(x1);xData2.append(x2);
    yData2.append(y1);yData2.append(y2);
    xData3.append(x1);xData3.append(x2);xData3.append(x3);
    yData3.append(y1);yData3.append(y2);yData3.append(y3);
    xData4.append(x1);xData4.append(x2);xData4.append(x3);xData4.append(x4);
    yData4.append(y1);yData4.append(y2);yData4.append(y3);yData4.append(y4);
    xData5.append(x1);xData5.append(x2);xData5.append(x3);xData5.append(x4);xData5.append(x5);
    yData5.append(y1);yData5.append(y2);yData5.append(y3);yData5.append(y4);yData5.append(y5);
    xData6.append(x1);xData6.append(x2);xData6.append(x3);xData6.append(x4);xData6.append(x5);xData6.append(x6);
    yData6.append(y1);yData6.append(y2);yData6.append(y3);yData6.append(y4);yData6.append(y5);yData6.append(y6);
    xData7.append(x1);xData7.append(x2);xData7.append(x3);xData7.append(x4);xData7.append(x5);xData7.append(x6);xData7.append(x7);
    yData7.append(y1);yData7.append(y2);yData7.append(y3);yData7.append(y4);yData7.append(y5);yData7.append(y6);yData7.append(y7);
    MainxData.append(x1);MainxData.append(x2);MainxData.append(x3);MainxData.append(x4);MainxData.append(x5);MainxData.append(x6);MainxData.append(x7);MainxData.append(x8);
    MainyData.append(y1);MainyData.append(y2);MainyData.append(y3);MainyData.append(y4);MainyData.append(y5);MainyData.append(y6);MainyData.append(y7);MainyData.append(y8);


    logy1=log10(y1);
    logy2=log10(y2);
    logy3=log10(y3);
    logy4=log10(y4);
    logy5=log10(y5);
    logy6=log10(y6);
    logy7=log10(y7);
    logy8=log10(y8);

    logx1=log10(x1);
    logx2=log10(x2);
    logx3=log10(x3);
    logx4=log10(x4);
    logx5=log10(x5);
    logx6=log10(x6);
    logx7=log10(x7);
    logx8=log10(x8);

    logyData1.append(logy1);
    logyData2.append(logy1);logyData2.append(logy2);
    logyData3.append(logy1);logyData3.append(logy2);logyData3.append(logy3);
    logyData4.append(logy1);logyData4.append(logy2);logyData4.append(logy3);logyData4.append(logy4);
    logyData5.append(logy1);logyData5.append(logy2);logyData5.append(logy3);logyData5.append(logy4);logyData5.append(logy5);
    logyData6.append(logy1);logyData6.append(logy2);logyData6.append(logy3);logyData6.append(logy4);logyData6.append(logy5);logyData6.append(logy6);
    logyData7.append(logy1);logyData7.append(logy2);logyData7.append(logy3);logyData7.append(logy4);logyData7.append(logy5);logyData7.append(logy6);logyData7.append(logy7);
    logMainyData.append(logy1);logMainyData.append(logy2);logMainyData.append(logy3);logMainyData.append(logy4);logMainyData.append(logy5);logMainyData.append(logy6);logMainyData.append(logy7);logMainyData.append(logy8);


    logxData1.append(logx1);
    logxData2.append(logx1);logxData2.append(logx2);
    logxData3.append(logx1);logxData3.append(logx2);logxData3.append(logx3);
    logxData4.append(logx1);logxData4.append(logx2);logxData4.append(logx3);logxData4.append(logx4);
    logxData5.append(logx1);logxData5.append(logx2);logxData5.append(logx3);logxData5.append(logx4);logxData5.append(logx5);
    logxData6.append(logx1);logxData6.append(logx2);logxData6.append(logx3);logxData6.append(logx4);logxData6.append(logx5);logxData6.append(logx6);
    logxData7.append(logx1);logxData7.append(logx2);logxData7.append(logx3);logxData7.append(logx4);logxData7.append(logx5);logxData7.append(logx6);logxData7.append(logx7);
    logMainxData.append(logx1);logMainxData.append(logx2);logMainxData.append(logx3);logMainxData.append(logx4);logMainxData.append(logx5);logMainxData.append(logx6);logMainxData.append(logx7);logMainxData.append(logx8);

    qDebug()<<"logxData1 : "<<logxData1;
    qDebug()<<"logxData2 : "<<logxData2;
    qDebug()<<"logxData3 : "<<logxData3;
    qDebug()<<"logxData4 : "<<logxData4;
    qDebug()<<"logxData5 : "<<logxData5;
    qDebug()<<"logxData6 : "<<logxData6;
    qDebug()<<"logxData7 : "<<logxData7;
    qDebug()<<"logxData8 : "<<logMainxData;

    qDebug()<<"logyData1 : "<<logyData1;
    qDebug()<<"logyData2 : "<<logyData2;
    qDebug()<<"logyData3 : "<<logyData3;
    qDebug()<<"logyData4 : "<<logyData4;
    qDebug()<<"logyData5 : "<<logyData5;
    qDebug()<<"logyData6 : "<<logyData6;
    qDebug()<<"logyData7 : "<<logyData7;
    qDebug()<<"logyData8 : "<<logMainyData;


    if(Graph_Type=="Linear")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        ui->customPlot_6->addGraph();
        ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
        ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsLine);
        if(Rctn_type=="Increasing")
        {
            if(No_of_cal==1)
            {
                ui->customPlot_6->graph(0)->setData(xData1, yData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData1, yData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData1.first()-2.5, xData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData1.first()-0.25, yData1.last()+0.25);
            }
            else if(No_of_cal==2)
            {
                ui->customPlot_6->graph(0)->setData(xData2, yData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData2, yData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData2.first()-2.5, xData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData2.first()-0.25, yData2.last()+0.25);
            }
            else if(No_of_cal==3)
            {
                ui->customPlot_6->graph(0)->setData(xData3, yData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData3, yData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData3.first()-2.5, xData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData3.first()-0.25, yData3.last()+0.25);
            }
            else if(No_of_cal==4)
            {
                ui->customPlot_6->graph(0)->setData(xData4, yData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData4, yData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData4.first()-2.5, xData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData4.first()-0.25, yData4.last()+0.25);
            }
            else if(No_of_cal==5)
            {
                ui->customPlot_6->graph(0)->setData(xData5, yData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData5, yData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData5.first()-2.5, xData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData5.first()-0.25, yData5.last()+0.25);
            }
            else if(No_of_cal==6)
            {
                ui->customPlot_6->graph(0)->setData(xData6, yData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData6, yData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData6.first()-2.5, xData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData6.first()-0.25, yData6.last()+0.25);
            }
            else if(No_of_cal==7)
            {
                ui->customPlot_6->graph(0)->setData(xData7, yData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData7, yData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData7.first()-2.5, xData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData7.first()-0.25, yData7.last()+0.25);
            }
            else if(No_of_cal==8)
            {
                ui->customPlot_6->graph(0)->setData(MainxData, MainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(MainxData, MainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(MainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5, MainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(MainyData.first()-0.25, MainyData.last()+0.25);
            }
        }
        else if(Rctn_type=="Decreasing")
        {
            if(No_of_cal==1)
            {
                ui->customPlot_6->graph(0)->setData(xData1, yData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData1, yData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData1.first()-2.5, xData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData1.last()-0.25, yData1.first()+0.25);
            }
            else if(No_of_cal==2)
            {
                ui->customPlot_6->graph(0)->setData(xData2, yData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData2, yData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData2.first()-2.5, xData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData2.last()-0.25, yData2.first()+0.25);
            }
            else if(No_of_cal==3)
            {
                ui->customPlot_6->graph(0)->setData(xData3, yData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData3, yData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData3.first()-2.5, xData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData3.last()-0.25, yData3.first()+0.25);
            }
            else if(No_of_cal==4)
            {
                ui->customPlot_6->graph(0)->setData(xData4, yData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData4, yData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData4.first()-2.5, xData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData4.last()-0.25, yData4.first()+0.25);
            }
            else if(No_of_cal==5)
            {
                ui->customPlot_6->graph(0)->setData(xData5, yData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData5, yData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData5.first()-2.5, xData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData5.last()-0.25, yData5.first()+0.25);
            }
            else if(No_of_cal==6)
            {
                ui->customPlot_6->graph(0)->setData(xData6, yData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData6, yData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData6.first()-2.5, xData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData6.last()-0.25, yData6.first()+0.25);
            }
            else if(No_of_cal==7)
            {
                ui->customPlot_6->graph(0)->setData(xData7, yData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData7, yData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData7.first()-2.5, xData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData7.last()-0.25, yData7.first()+0.25);
            }
            else if(No_of_cal==8)
            {
                ui->customPlot_6->graph(0)->setData(MainxData, MainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(MainxData, MainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(MainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5, MainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(MainyData.last()-0.25, MainyData.first()+0.25);
            }
        }

        ui->customPlot_6->update();
        ui->customPlot_6->replot();
    }
    else if(Graph_Type=="Log-Linear")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        ui->customPlot_6->addGraph();
        ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
        ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsLine);
        if(Rctn_type=="Increasing")
        {
            if(No_of_cal==1)
            {
                ui->customPlot_6->graph(0)->setData(xData1, logyData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData1, logyData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData1.first()-2.5, xData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData1.first()-0.25, logyData1.last()+0.25);
            }
            else if(No_of_cal==2)
            {
                ui->customPlot_6->graph(0)->setData(xData2, logyData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData2, logyData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData2.first()-2.5, xData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData2.first()-0.25, logyData2.last()+0.25);
            }
            else if(No_of_cal==3)
            {
                ui->customPlot_6->graph(0)->setData(xData3, logyData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData3, logyData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData3.first()-2.5, xData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData3.first()-0.25, logyData3.last()+0.25);
            }
            else if(No_of_cal==4)
            {
                ui->customPlot_6->graph(0)->setData(xData4, logyData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData4, logyData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData4.first()-2.5, xData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData4.first()-0.25, logyData4.last()+0.25);
            }
            else if(No_of_cal==5)
            {
                ui->customPlot_6->graph(0)->setData(xData5, logyData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData5, logyData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData5.first()-2.5, xData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData5.first()-0.25, logyData5.last()+0.25);
            }
            else if(No_of_cal==6)
            {
                ui->customPlot_6->graph(0)->setData(xData6, logyData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData6, logyData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData6.first()-2.5, xData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData6.first()-0.25, logyData6.last()+0.25);
            }
            else if(No_of_cal==7)
            {
                ui->customPlot_6->graph(0)->setData(xData7, logyData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData7, logyData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData7.first()-2.5, xData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData7.first()-0.25, logyData7.last()+0.25);
            }
            else if(No_of_cal==8)
            {
                ui->customPlot_6->graph(0)->setData(MainxData, logMainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(MainxData, logMainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(MainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5, MainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logMainyData.first()-0.25, logMainyData.last()+0.25);
            }
        }
        else if(Rctn_type=="Decreasing")
        {
            if(No_of_cal==1)
            {
                ui->customPlot_6->graph(0)->setData(xData1, logyData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData1, logyData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData1.first()-2.5, xData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData1.last()-0.25, logyData1.first()+0.25);
            }
            else if(No_of_cal==2)
            {
                ui->customPlot_6->graph(0)->setData(xData2, logyData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData2, logyData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData2.first()-2.5, xData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData2.last()-0.25, logyData2.first()+0.25);
            }
            else if(No_of_cal==3)
            {
                ui->customPlot_6->graph(0)->setData(xData3, logyData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData3, logyData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData3.first()-2.5, xData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData3.last()-0.25, logyData3.first()+0.25);
            }
            else if(No_of_cal==4)
            {
                ui->customPlot_6->graph(0)->setData(xData4, logyData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData4, logyData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData4.first()-2.5, xData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData4.last()-0.25, logyData4.first()+0.25);
            }
            else if(No_of_cal==5)
            {
                ui->customPlot_6->graph(0)->setData(xData5, logyData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData5, logyData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData5.first()-2.5, xData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData5.last()-0.25, logyData5.first()+0.25);
            }
            else if(No_of_cal==6)
            {
                ui->customPlot_6->graph(0)->setData(xData6, logyData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData6, logyData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData6.first()-2.5, xData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData6.last()-0.25, logyData6.first()+0.25);
            }
            else if(No_of_cal==7)
            {
                ui->customPlot_6->graph(0)->setData(xData7, logyData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(xData7, logyData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(xData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(xData7.first()-2.5, xData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData7.last()-0.25, logyData7.first()+0.25);
            }
            else if(No_of_cal==8)
            {
                ui->customPlot_6->graph(0)->setData(MainxData, logMainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(MainxData, logMainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(MainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5, MainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logMainyData.last()-0.25, logMainyData.first()+0.25);
            }
        }

        ui->customPlot_6->update();
        ui->customPlot_6->replot();
    }
    else if(Graph_Type=="Linear-Log")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        ui->customPlot_6->addGraph();
        ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
        ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsLine);
        if(Rctn_type=="Increasing")
        {
            if(No_of_cal==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData1, yData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData1, yData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData1.first()-2.5, logxData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData1.first()-0.25, yData1.last()+0.25);
            }
            else if(No_of_cal==2)
            {
                ui->customPlot_6->graph(0)->setData(logxData2, yData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData2, yData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData2.first()-2.5, logxData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData2.first()-0.25, yData2.last()+0.25);
            }
            else if(No_of_cal==3)
            {
                ui->customPlot_6->graph(0)->setData(logxData3, yData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData3, yData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData3.first()-2.5, logxData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData3.first()-0.25, yData3.last()+0.25);
            }
            else if(No_of_cal==4)
            {
                ui->customPlot_6->graph(0)->setData(logxData4, yData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData4, yData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData4.first()-2.5, logxData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData4.first()-0.25, yData4.last()+0.25);
            }
            else if(No_of_cal==5)
            {
                ui->customPlot_6->graph(0)->setData(logxData5, yData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData5, yData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData5.first()-2.5, logxData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData5.first()-0.25, yData5.last()+0.25);
            }
            else if(No_of_cal==6)
            {
                ui->customPlot_6->graph(0)->setData(logxData6, yData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData6, yData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData6.first()-2.5, logxData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData6.first()-0.25, yData6.last()+0.25);
            }
            else if(No_of_cal==7)
            {
                ui->customPlot_6->graph(0)->setData(logxData7, yData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData7, yData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData7.first()-2.5, logxData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData7.first()-0.25, yData7.last()+0.25);
            }
            else if(No_of_cal==8)
            {
                ui->customPlot_6->graph(0)->setData(logMainxData, MainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logMainxData, MainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logMainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logMainxData.first()-2.5, logMainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(MainyData.first()-0.25, MainyData.last()+0.25);
            }
        }
        else if(Rctn_type=="Decreasing")
        {
            if(No_of_cal==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData1, yData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData1, yData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData1.first()-2.5, logxData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData1.last()-0.25, yData1.first()+0.25);
            }
            else if(No_of_cal==2)
            {
                ui->customPlot_6->graph(0)->setData(logxData2, yData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData2, yData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData2.first()-2.5, logxData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData2.last()-0.25, yData2.first()+0.25);
            }
            else if(No_of_cal==3)
            {
                ui->customPlot_6->graph(0)->setData(logxData3, yData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData3, yData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData3.first()-2.5, logxData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData3.last()-0.25, yData3.first()+0.25);
            }
            else if(No_of_cal==4)
            {
                ui->customPlot_6->graph(0)->setData(logxData4, yData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData4, yData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData4.first()-2.5, logxData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData4.last()-0.25, yData4.first()+0.25);
            }
            else if(No_of_cal==5)
            {
                ui->customPlot_6->graph(0)->setData(logxData5, yData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData5, yData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData5.first()-2.5, logxData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData5.last()-0.25, yData5.first()+0.25);
            }
            else if(No_of_cal==6)
            {
                ui->customPlot_6->graph(0)->setData(logxData6, yData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData6, yData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData6.first()-2.5, logxData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData6.last()-0.25, yData6.first()+0.25);
            }
            else if(No_of_cal==7)
            {
                ui->customPlot_6->graph(0)->setData(logxData7, yData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData7, yData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logxData7.first()-2.5, logxData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData7.last()-0.25, yData7.first()+0.25);
            }
            else if(No_of_cal==8)
            {
                ui->customPlot_6->graph(0)->setData(logMainxData, MainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logMainxData, MainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logMainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(logMainxData.first()-2.5, logMainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(MainyData.last()-0.25, MainyData.first()+0.25);
            }
        }
        ui->customPlot_6->update();
        ui->customPlot_6->replot();
    }
    else if(Graph_Type=="Log-Log")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        ui->customPlot_6->addGraph();
        ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
        ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsLine);
        if(Rctn_type=="Increasing")
        {
            if(No_of_cal==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData1, logyData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData1, logyData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData1.first()-2.5, logxData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData1.first()-0.25, logyData1.last()+0.25);
            }
            else if(No_of_cal==2)
            {
                ui->customPlot_6->graph(0)->setData(logxData2, logyData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData2, logyData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData2.first()-2.5, logxData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData2.first()-0.25, logyData2.last()+0.25);
            }
            else if(No_of_cal==3)
            {
                ui->customPlot_6->graph(0)->setData(logxData3, logyData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData3, logyData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData3.first()-2.5, logxData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData3.first()-0.25, logyData3.last()+0.25);
            }
            else if(No_of_cal==4)
            {
                ui->customPlot_6->graph(0)->setData(logxData4, logyData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData4, logyData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData4.first()-2.5, logxData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData4.first()-0.25, logyData4.last()+0.25);
            }
            else if(No_of_cal==5)
            {
                ui->customPlot_6->graph(0)->setData(logxData5, logyData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData5, logyData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData5.first()-2.5, logxData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData5.first()-0.25, logyData5.last()+0.25);
            }
            else if(No_of_cal==6)
            {
                ui->customPlot_6->graph(0)->setData(logxData6, logyData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData6, logyData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData6.first()-2.5, logxData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData6.first()-0.25, logyData6.last()+0.25);
            }
            else if(No_of_cal==7)
            {
                ui->customPlot_6->graph(0)->setData(logxData7, logyData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData7, logyData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData7.first()-2.5, logxData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData7.first()-0.25, logyData7.last()+0.25);
            }
            else if(No_of_cal==8)
            {
                ui->customPlot_6->graph(0)->setData(logMainxData, logMainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logMainxData, logMainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logMainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logMainxData.first()-2.5, logMainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logMainyData.first()-0.25, logMainyData.last()+0.25);
            }
        }
        else if(Rctn_type=="Decreasing")
        {
            if(No_of_cal==1)
            {
                ui->customPlot_6->graph(0)->setData(logxData1, logyData1);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData1, logyData1);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData1, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData1.first()-2.5, logxData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData1.last()-0.25, logyData1.first()+0.25);
            }
            else if(No_of_cal==2)
            {
                ui->customPlot_6->graph(0)->setData(logxData2, logyData2);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData2, logyData2);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData2, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData2.first()-2.5, logxData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData2.last()-0.25, logyData2.first()+0.25);
            }
            else if(No_of_cal==3)
            {
                ui->customPlot_6->graph(0)->setData(logxData3, logyData3);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData3, logyData3);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData3, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData3.first()-2.5, logxData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData3.last()-0.25, logyData3.first()+0.25);
            }
            else if(No_of_cal==4)
            {
                ui->customPlot_6->graph(0)->setData(logxData4, logyData4);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData4, logyData4);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData4, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData4.first()-2.5, logxData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData4.last()-0.25, logyData4.first()+0.25);
            }
            else if(No_of_cal==5)
            {
                ui->customPlot_6->graph(0)->setData(logxData5, logyData5);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData5, logyData5);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData5, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData5.first()-2.5, logxData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData5.last()-0.25, logyData5.first()+0.25);
            }
            else if(No_of_cal==6)
            {
                ui->customPlot_6->graph(0)->setData(logxData6, logyData6);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData6, logyData6);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData6, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData6.first()-2.5, logxData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData6.last()-0.25, logyData6.first()+0.25);
            }
            else if(No_of_cal==7)
            {
                ui->customPlot_6->graph(0)->setData(logxData7, logyData7);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logxData7, logyData7);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logxData7, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logxData7.first()-2.5, logxData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logyData7.last()-0.25, logyData7.first()+0.25);
            }
            else if(No_of_cal==8)
            {
                ui->customPlot_6->graph(0)->setData(logMainxData, logMainyData);
                // Calculate trendline
                QVector<double> trendline = calculateTrendline(logMainxData, logMainyData);
                // Plot trendline
                ui->customPlot_6->addGraph();
                ui->customPlot_6->graph(1)->setData(logMainxData, trendline);
                ui->customPlot_6->graph(1)->setPen(QPen(Qt::red)); // Change trendline color if necessary
                ui->customPlot_6->xAxis->setLabel("ln(Conc.)");
                ui->customPlot_6->yAxis->setLabel("ln(Abs)");
                ui->customPlot_6->xAxis->setRange(logMainxData.first()-2.5, logMainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(logMainyData.last()-0.25, logMainyData.first()+0.25);
            }
        }

        ui->customPlot_6->update();
        ui->customPlot_6->replot();
    }
    else if(Graph_Type=="Point-Point")
    {
        ui->label_465->setVisible(false);
        ui->label_466->setVisible(false);
        qDebug()<<"enter point-point_caltype"<<No_of_cal<<"rctn : "<<Rctn_type;
        ui->customPlot_6->addGraph();
        ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssCircle);
        ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsLine);
        if(Rctn_type=="Increasing")
        {
            if(No_of_cal==1)
            {
                ui->customPlot_6->graph(0)->setData(xData1, yData1);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData1.first()-2.5, xData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData1.first()-0.25, yData1.last()+0.25);
            }
            else if(No_of_cal==2)
            {
                ui->customPlot_6->graph(0)->setData(xData2, yData2);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData2.first()-2.5, xData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData2.first()-0.25, yData2.last()+0.25);
            }
            else if(No_of_cal==3)
            {
                ui->customPlot_6->graph(0)->setData(xData3, yData3);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData3.first()-2.5, xData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData3.first()-0.25, yData3.last()+0.25);
            }
            else if(No_of_cal==4)
            {
                ui->customPlot_6->graph(0)->setData(xData4, yData4);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData4.first()-2.5, xData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData4.first()-0.25, yData4.last()+0.25);
            }
            else if(No_of_cal==5)
            {
                ui->customPlot_6->graph(0)->setData(xData5, yData5);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData5.first()-2.5, xData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData5.first()-0.25, yData5.last()+0.25);
            }
            else if(No_of_cal==6)
            {
                ui->customPlot_6->graph(0)->setData(xData6, yData6);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData6.first()-2.5, xData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData6.first()-0.25, yData6.last()+0.25);
            }
            else if(No_of_cal==7)
            {
                ui->customPlot_6->graph(0)->setData(xData7, yData7);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData7.first()-2.5, xData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData7.first()-0.25, yData7.last()+0.25);
            }
            else if(No_of_cal==8)
            {
                ui->customPlot_6->graph(0)->setData(MainxData, MainyData);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5, MainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(MainyData.first()-0.25, MainyData.last()+0.25);
            }
        }
        else if(Rctn_type=="Decreasing")
        {
            if(No_of_cal==1)
            {
                ui->customPlot_6->graph(0)->setData(xData1, yData1);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData1.first()-2.5, xData1.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData1.last()-0.25, yData1.first()+0.25);
            }
            else if(No_of_cal==2)
            {
                ui->customPlot_6->graph(0)->setData(xData2, yData2);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData2.first()-2.5, xData2.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData2.last()-0.25, yData2.first()+0.25);
            }
            else if(No_of_cal==3)
            {
                ui->customPlot_6->graph(0)->setData(xData3, yData3);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData3.first()-2.5, xData3.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData3.last()-0.25, yData3.first()+0.25);
            }
            else if(No_of_cal==4)
            {
                ui->customPlot_6->graph(0)->setData(xData4, yData4);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData4.first()-2.5, xData4.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData4.last()-0.25, yData4.first()+0.25);
            }
            else if(No_of_cal==5)
            {
                ui->customPlot_6->graph(0)->setData(xData5, yData5);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData5.first()-2.5, xData5.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData5.last()-0.25, yData5.first()+0.25);
            }
            else if(No_of_cal==6)
            {
                ui->customPlot_6->graph(0)->setData(xData6, yData6);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData6.first()-2.5, xData6.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData6.last()-0.25, yData6.first()+0.25);
            }
            else if(No_of_cal==7)
            {
                ui->customPlot_6->graph(0)->setData(xData7, yData7);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(xData7.first()-2.5, xData7.last()+2.5);
                ui->customPlot_6->yAxis->setRange(yData7.last()-0.25, yData7.first()+0.25);
            }
            else if(No_of_cal==8)
            {
                ui->customPlot_6->graph(0)->setData(MainxData, MainyData);
                ui->customPlot_6->xAxis->setLabel("Conc.");
                ui->customPlot_6->yAxis->setLabel("Abs");
                ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5, MainxData.last()+2.5);
                ui->customPlot_6->yAxis->setRange(MainyData.last()-0.25, MainyData.first()+0.25);
            }
        }
        ui->customPlot_6->update();
        ui->customPlot_6->replot();
    }
    else if(Graph_Type=="Ply-2nd")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        qDebug()<<"enter ply-2nd";
        if(Rctn_type=="Increasing")
        {
            if(No_of_cal==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<1;i++){
                    polyx.append(xData1[i]);
                    qDebug()<<xData1[i]<<"x value";
                    polyy.append(yData1[i]);
                    qDebug()<<yData1[i]<<"y value";
                }
                dummyk=2;
                polycal=1;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==2){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<2;i++){
                    polyx.append(xData2[i]);
                    qDebug()<<xData2<<"x value";
                    polyy.append(yData2[i]);
                    qDebug()<<yData2<<"y value";
                }
                dummyk=2;
                polycal=2;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==3){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<3;i++){
                    polyx.append(xData3[i]);
                    qDebug()<<xData3<<"x value";
                    polyy.append(yData3[i]);
                    qDebug()<<xData3<<"y value";
                }
                dummyk=2;
                polycal=3;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==4){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<4;i++){
                    polyx.append(xData4[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData4[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=4;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==5){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<5;i++){
                    polyx.append(xData5[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData5[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=5;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==6){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<6;i++){
                    polyx.append(xData6[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData6[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=6;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==7){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<7;i++){
                    polyx.append(xData7[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData7[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=7;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==8){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<8;i++){
                    polyx.append(MainxData[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(MainyData[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=8;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
        }
        else if(Rctn_type=="Decreasing")
        {
            qDebug()<<"Rctn_typ : "<<Rctn_type<<"Decreasing...";
            if(No_of_cal==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<1;i++){
                    polyx.append(xData1[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData1[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=1;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==2){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<2;i++){
                    polyx.append(xData2[i]);
                    qDebug()<<xData2<<"x value";
                    polyy.append(yData2[i]);
                    qDebug()<<xData2<<"y value";
                }
                dummyk=2;
                polycal=2;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==3){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<3;i++){
                    polyx.append(xData3[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData3[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=3;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==4){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<4;i++){
                    polyx.append(xData4[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData4[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=4;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==5){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<5;i++){
                    polyx.append(xData5[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData5[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=5;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==6){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<6;i++){
                    polyx.append(xData6[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData6[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=6;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==7){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<7;i++){
                    polyx.append(xData7);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData7);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=7;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==8){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<8;i++){
                    polyx.append(MainxData[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(MainyData[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=2;
                polycal=8;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
        }
    }
    else if(Graph_Type=="Ply-3rd")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        if(Rctn_type=="Increasing")
        {
            if(No_of_cal==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<1;i++){
                    polyx.append(xData1[i]);
                    qDebug()<<xData1[i]<<"x value";
                    polyy.append(yData1[i]);
                    qDebug()<<yData1[i]<<"y value";
                }
                dummyk=3;
                polycal=1;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==2){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<2;i++){
                    polyx.append(xData2[i]);
                    qDebug()<<xData2<<"x value";
                    polyy.append(yData2[i]);
                    qDebug()<<yData2<<"y value";
                }
                dummyk=3;
                polycal=2;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==3){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<3;i++){
                    polyx.append(xData3[i]);
                    qDebug()<<xData3<<"x value";
                    polyy.append(yData3[i]);
                    qDebug()<<xData3<<"y value";
                }
                dummyk=3;
                polycal=3;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==4){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<4;i++){
                    polyx.append(xData4[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData4[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=4;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==5){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<5;i++){
                    polyx.append(xData5[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData5[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=5;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==6){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<6;i++){
                    polyx.append(xData6[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData6[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=6;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==7){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<7;i++){
                    polyx.append(xData7[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData7[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=7;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==8){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<8;i++){
                    polyx.append(MainxData[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(MainyData[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=8;
                qDebug()<<polycal<<"no of cal";
                rec=1;
                clearGraph_Turbidity();
                Polynomial();
            }
        }
        else if(Rctn_type=="Decreasing")
        {
            if(No_of_cal==1){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<1;i++){
                    polyx.append(xData1[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData1[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=1;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==2){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<2;i++){
                    polyx.append(xData2[i]);
                    qDebug()<<xData2<<"x value";
                    polyy.append(yData2[i]);
                    qDebug()<<xData2<<"y value";
                }
                dummyk=3;
                polycal=2;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==3){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<3;i++){
                    polyx.append(xData3[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData3[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=3;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==4){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<4;i++){
                    polyx.append(xData4[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData4[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=4;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==5){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<5;i++){
                    polyx.append(xData5[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData5[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=5;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==6){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<6;i++){
                    polyx.append(xData6[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData6[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=6;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==7){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<7;i++){
                    polyx.append(xData7);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(yData7);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=7;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
            else if(No_of_cal==8){
                polyx.clear();
                polyy.clear();
                for(int i=0;i<8;i++){
                    polyx.append(MainxData[i]);
                    qDebug()<<polyx[i]<<"x value";
                    polyy.append(MainyData[i]);
                    qDebug()<<polyy[i]<<"y value";
                }
                dummyk=3;
                polycal=8;
                qDebug()<<polycal<<"no of cal";
                rec=0;
                clearGraph_Turbidity();
                Polynomial();
            }
        }
    }

    else if(Graph_Type=="4PL")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        if(No_of_cal==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 1;
                n1=n;
                x.setlength(xData1.size()); // Set the length of the real_1d_array

                for (int i = 0; i < xData1.size(); ++i) {
                    x[i] = xData1[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(yData1.size()); // Set the length of the real_1d_array

                for (int i = 0; i < yData1.size(); ++i) {
                    y[i] = yData1[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));

            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData1, yData1);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData1.first()-2.5,xData1.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData1.begin() , yData1.end())-0.25,*std::max_element(yData1.begin() , yData1.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData1[0] + i * (xData1[xData1.size() - 1] - xData1[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(No_of_cal==2)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 2;
                n1=n;
                x.setlength(xData2.size()); // Set the length of the real_1d_array

                for (int i = 0; i < xData2.size(); ++i) {
                    x[i] = xData2[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(yData2.size()); // Set the length of the real_1d_array

                for (int i = 0; i < yData2.size(); ++i) {
                    y[i] = yData2[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData2, yData2);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData2.first()-2.5,xData2.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData2.begin() , yData2.end())-0.25,*std::max_element(yData2.begin() , yData2.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData2[0] + i * (xData2[xData2.size() - 1] - xData2[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(No_of_cal==3)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 3;
                n1=n;
                x.setlength(xData3.size()); // Set the length of the real_1d_array

                for (int i = 0; i < xData3.size(); ++i) {
                    x[i] = xData3[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(yData3.size()); // Set the length of the real_1d_array

                for (int i = 0; i < yData3.size(); ++i) {
                    y[i] = yData3[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData3, yData3);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData3.first()-2.5,xData3.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData3.begin() , yData3.end())-0.25,*std::max_element(yData3.begin() , yData3.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData3[0] + i * (xData3[xData3.size() - 1] - xData3[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(No_of_cal==4)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 4;
                n1=n;
                x.setlength(xData4.size()); // Set the length of the real_1d_array

                for (int i = 0; i < xData4.size(); ++i) {
                    x[i] = xData4[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(yData4.size()); // Set the length of the real_1d_array

                for (int i = 0; i < yData4.size(); ++i) {
                    y[i] = yData4[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData4, yData4);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData4.first()-2.5,xData4.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData4.begin() , yData4.end())-0.25,*std::max_element(yData4.begin() , yData4.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData4[0] + i * (xData4[xData4.size() - 1] - xData4[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(No_of_cal==5)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 5;
                n1=n;
                x.setlength(xData5.size()); // Set the length of the real_1d_array

                for (int i = 0; i < xData5.size(); ++i) {
                    x[i] = xData5[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(yData5.size()); // Set the length of the real_1d_array

                for (int i = 0; i < yData5.size(); ++i) {
                    y[i] = yData5[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData5, yData5);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData5.first()-2.5,xData5.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData5.begin() , yData5.end())-0.25,*std::max_element(yData5.begin() , yData5.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData5[0] + i * (xData5[xData5.size() - 1] - xData5[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(No_of_cal==6)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 6;
                n1=n;
                x.setlength(xData6.size()); // Set the length of the real_1d_array

                for (int i = 0; i < xData6.size(); ++i) {
                    x[i] = xData6[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(yData6.size()); // Set the length of the real_1d_array

                for (int i = 0; i < yData6.size(); ++i) {
                    y[i] = yData6[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData6, yData6);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData6.first()-2.5,xData6.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData6.begin() , yData6.end())-0.25,*std::max_element(yData6.begin() , yData6.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData6[0] + i * (xData6[xData6.size() - 1] - xData6[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(No_of_cal==7)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 7;
                n1=n;
                x.setlength(xData7.size()); // Set the length of the real_1d_array

                for (int i = 0; i < xData7.size(); ++i) {
                    x[i] = xData7[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(yData7.size()); // Set the length of the real_1d_array

                for (int i = 0; i < yData7.size(); ++i) {
                    y[i] = yData7[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData7, yData7);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData7.first()-2.5,xData7.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData7.begin() , yData7.end())-0.25,*std::max_element(yData7.begin() , yData7.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData7[0] + i * (xData7[xData7.size() - 1] - xData7[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(No_of_cal==8)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 8;
                n1=n;
                x.setlength(MainxData.size()); // Set the length of the real_1d_array

                for (int i = 0; i < MainxData.size(); ++i) {
                    x[i] = MainxData[i]; // Copy elements from the vector to the real_1d_array
                }
                y.setlength(MainyData.size()); // Set the length of the real_1d_array

                for (int i = 0; i < MainyData.size(); ++i) {
                    y[i] = MainyData[i]; // Copy elements from the vector to the real_1d_array
                }
                lsfitreport rep;

                //
                // Test logisticfit4() on carefully designed data with a priori known answer.
                //
                logisticfit4(x, y, n, a, b, c, d, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a); // EXPECTED: -1.000
                qDebug()<<"b"<<double(b); // EXPECTED: 1.200
                qDebug()<<"c"<<double(c); // EXPECTED: 0.900
                qDebug()<<"d"<<double(d); // EXPECTED: 1.000

                //
                // Evaluate model at point x=0.5
                //
                double v;
                v = logisticcalc4(0.5, a, b, c, d);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            // Create a graph for your data
            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(MainxData, MainyData);

            // Set labels for the axes
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5,MainxData.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(MainyData.begin() , MainyData.end())-0.25,*std::max_element(MainyData.begin() , MainyData.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            // Set up a curve for the sigmoidal function using the estimated parameters
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            // Generate points for the sigmoidal curve
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = MainxData[0] + i * (MainxData[MainxData.size() - 1] - MainxData[0]) / 1000.0;
                double y = d + (a - d) / (1 + pow(x / c, b));
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
    }
    else if(Graph_Type=="5PL")
    {
        ui->label_465->setVisible(true);
        ui->label_466->setVisible(true);
        if(No_of_cal==1)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 1;
                n1=n;
                x.setlength(xData1.size());

                for (int i = 0; i < xData1.size(); ++i) {
                    x[i] = xData1[i];
                }
                y.setlength(yData1.size());

                for (int i = 0; i < yData1.size(); ++i) {
                    y[i] = yData1[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);


                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData1, yData1);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData1.first()-2.5,xData1.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData1.begin() , yData1.end())-0.25,*std::max_element(yData1.begin() , yData1.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData1[0] + i * (xData1[xData1.size() - 1] - xData1[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(No_of_cal==2)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 2;
                n1=n;
                x.setlength(xData2.size());

                for (int i = 0; i < xData2.size(); ++i) {
                    x[i] = xData2[i];
                }
                y.setlength(yData2.size());

                for (int i = 0; i < yData2.size(); ++i) {
                    y[i] = yData2[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);


                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData2, yData2);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData2.first()-2.5,xData2.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData2.begin() , yData2.end())-0.25,*std::max_element(yData2.begin() , yData2.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData2[0] + i * (xData2[xData2.size() - 1] - xData2[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(No_of_cal==3)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 3;
                n1=n;
                x.setlength(xData3.size());

                for (int i = 0; i < xData3.size(); ++i) {
                    x[i] = xData3[i];
                }
                y.setlength(yData3.size());

                for (int i = 0; i < yData3.size(); ++i) {
                    y[i] = yData3[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);


                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData3, yData3);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData3.first()-2.5,xData3.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData3.begin() , yData3.end())-0.25,*std::max_element(yData3.begin() , yData3.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData3[0] + i * (xData3[xData3.size() - 1] - xData3[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(No_of_cal==4)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 4;
                n1=n;
                x.setlength(xData4.size());

                for (int i = 0; i < xData4.size(); ++i) {
                    x[i] = xData4[i];
                }
                y.setlength(yData4.size());

                for (int i = 0; i < yData4.size(); ++i) {
                    y[i] = yData4[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);


                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData4, yData4);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData4.first()-2.5,xData4.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData4.begin() , yData4.end())-0.25,*std::max_element(yData4.begin() , yData4.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData4[0] + i * (xData4[xData4.size() - 1] - xData4[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(No_of_cal==5)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 5;
                n1=n;
                x.setlength(xData5.size());

                for (int i = 0; i < xData5.size(); ++i) {
                    x[i] = xData5[i];
                }
                y.setlength(yData5.size());

                for (int i = 0; i < yData5.size(); ++i) {
                    y[i] = yData5[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);


                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData5, yData5);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData5.first()-2.5,xData5.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData5.begin() , yData5.end())-0.25,*std::max_element(yData5.begin() , yData5.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData5[0] + i * (xData5[xData5.size() - 1] - xData5[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(No_of_cal==6)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 6;
                n1=n;
                x.setlength(xData6.size());

                for (int i = 0; i < xData6.size(); ++i) {
                    x[i] = xData6[i];
                }
                y.setlength(yData6.size());

                for (int i = 0; i < yData6.size(); ++i) {
                    y[i] = yData6[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);


                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData6, yData6);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData6.first()-2.5,xData6.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData6.begin() , yData6.end())-0.25,*std::max_element(yData6.begin() , yData6.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData6[0] + i * (xData6[xData6.size() - 1] - xData6[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(No_of_cal==7)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 7;
                n1=n;
                x.setlength(xData7.size());

                for (int i = 0; i < xData7.size(); ++i) {
                    x[i] = xData7[i];
                }
                y.setlength(yData7.size());

                for (int i = 0; i < yData7.size(); ++i) {
                    y[i] = yData7[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);

                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(xData7, yData7);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(xData7.first()-2.5,xData7.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(yData7.begin() , yData7.end())-0.25,*std::max_element(yData7.begin() , yData7.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = xData7[0] + i * (xData7[xData7.size() - 1] - xData7[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
        else if(No_of_cal==8)
        {
            try
            {
                real_1d_array x;
                real_1d_array y;
                ae_int_t n = 8;
                n1=n;
                x.setlength(MainxData.size());

                for (int i = 0; i < MainxData.size(); ++i) {
                    x[i] = MainxData[i];
                }
                y.setlength(MainyData.size());

                for (int i = 0; i < MainyData.size(); ++i) {
                    y[i] = MainyData[i];
                }
                lsfitreport rep;
                logisticfit5(x, y, n, a, b, c, d, g, rep);
                QString A_Val=QString::number(a);
                QString B_Val=QString::number(b);
                QString C_Val=QString::number(c);
                QString D_Val=QString::number(d);
                QString G_Val=QString::number(g);
                QSqlQuery qry;
                qry.prepare("update Turbidity_test set A_Val='"+A_Val+"',B_Val='"+B_Val+"',C_Val='"+C_Val+"',D_Val='"+D_Val+"',G_Val='"+G_Val+"' where TestName='"+TestName+"'");
                qry.exec();
                qDebug()<<"a"<<double(a);
                qDebug()<<"b"<<double(b);
                qDebug()<<"c"<<double(c);
                qDebug()<<"d"<<double(d);
                qDebug()<<"g"<<double(g);

                double v;
                v = logisticcalc5(0.5, a, b, c, d, g);
                qDebug()<<"v"<<double(v); // EXPECTED: -0.33874308
                qDebug()<<"r2"<<rep.r2;
                ui->label_465->setText(QString::number(rep.r2,'f',4));
            }
            catch(alglib::ap_error alglib_exception)
            {
                printf("ALGLIB exception with message '%s'\n", alglib_exception.msg.c_str());
            }

            ui->customPlot_6->addGraph();
            ui->customPlot_6->graph(0)->setData(MainxData, MainyData);
            ui->customPlot_6->xAxis->setLabel("Concentration");
            ui->customPlot_6->yAxis->setLabel("Absorbance");
            ui->customPlot_6->graph(0)->setScatterStyle(QCPScatterStyle::ssDisc);
            ui->customPlot_6->graph(0)->setLineStyle(QCPGraph::lsNone);
            ui->customPlot_6->xAxis->setRange(MainxData.first()-2.5,MainxData.last()+2.5);
            ui->customPlot_6->yAxis->setRange(*std::min_element(MainyData.begin() , MainyData.end())-0.25,*std::max_element(MainyData.begin() , MainyData.end())+0.25);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
            QCPCurve *sigmoidalCurve = new QCPCurve(ui->customPlot_6->xAxis, ui->customPlot_6->yAxis);
            sigmoidalCurve->setName("Sigmoidal Curve");
            QVector<double> sigmoidalyData;
            QVector<double> sigmoidalxData;
            for (int i = 0; i < 1000; ++i) {
                double x = MainxData[0] + i * (MainxData[MainxData.size() - 1] - MainxData[0]) / 1000.0;
                double y = d + (a - d) / pow((1 + pow(x / c, b)),g);
                sigmoidalyData.append(y);
                sigmoidalxData.append(x);
            }
            sigmoidalCurve->addData(sigmoidalxData,sigmoidalyData);
            ui->customPlot_6->update();
            ui->customPlot_6->replot();
        }
    }

    QSqlQuery quy;
    quy.prepare("update Turbidity_test set Graph_Type='"+Graph_Type+"' where TestName='"+TestName+"'");
    quy.exec();
}

void MainWindow::on_Turbi_Runsample_Btn_5_clicked()
{
    ui->stackedWidget->setCurrentIndex(36);
}

void MainWindow::on_toolButton_71_clicked()
{
    ui->frame_12->setVisible(false);
    ui->label_438->setVisible(false);
    ui->label_450->setVisible(false);
    ui->label_451->setVisible(false);
    ui->label_433->setVisible(false);
    ui->label_432->setVisible(false);
    ui->pushButton_293->setVisible(false);
    ui->label_431->setVisible(false);
    ui->label_428->setVisible(false);
    ui->pushButton_294->setVisible(false);
    ui->stackedWidget_14->setCurrentIndex(0);
}

void MainWindow::on_Home_Btn_26_clicked()
{
    if(Turbidity_Back==1)
    {
        Turbidity_NewCal();
        ui->Abs_lbl_21->setVisible(true);
        ui->OD_lbl_val->clear();
        ui->OD_lbl_val_2->clear();
        ui->IsIo_lbl->clear();
        Turbidity_Back=0;
        QString No_cal,FActor;
        QSqlQuery qy;
        qy.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
        qy.exec();
        while(qy.next())
        {
            FActor=qy.value(6).toString();
            No_cal=qy.value(10).toString();
        }

        ui->fct_lbl_val->setText(FActor);
        if(No_cal=="1")
        {
            ui->fct_lbl_val->setVisible(true);
            ui->fct_lbl->setVisible(true);
        }
        else
        {
            ui->fct_lbl_val->setVisible(false);
            ui->fct_lbl->setVisible(false);
        }
        ui->stackedWidget_13->setCurrentIndex(0);
    }
    else
    {
        ui->stackedWidget->setCurrentIndex(1);
    }
}

void MainWindow::on_toolButton_74_clicked()
{
    ui->stackedWidget->setCurrentIndex(32);
    ui->stackedWidget_13->setCurrentIndex(0);
}

void MainWindow::on_pushButton_334_clicked()
{
    int Inten=ui->lineEdit_107->text().toInt();
    /* int Input_Min=0, Input_Max=0;
    QSqlQuery query;
    query.prepare("select Input_min,Input_max from Turbidity_Setting where sno=1");
    query.exec();
    while(query.next())
    {
        Input_Min=query.value(0).toInt();
        Input_Max=query.value(1).toInt();

    }
    int Final_Inten = ((Output_Max-Output_Min)/(Input_Max-Input_Min))*(Inten-Input_Min)+Output_Min;*/
    Turbidity_read_Intensity=Inten;
    read_wave_LED=6; //LED
    read_wave135=1; //Photodiode 405nm (135°)
    read_wave180=0; //Photodiode 505nm (180°)
    filtwave135[0]=Turbidity_reading135();
    filtwave180[0]=Turbidity_reading180();
    double Data_135=0,Data_180=0;
    Data_135=filtwave135[0];
    Data_180=filtwave180[0];
    qDebug()<<"135deg : "<<" "<<Data_135<<" "<<"180deg : " <<" "<<Data_180;
    ui->label_576->setText(QString::number(Data_135));
    ui->label_578->setText(QString::number(Data_180));
}

void MainWindow::on_Stop_Btn_4_clicked()
{
    Incubationtimer->stop();
    qDebug()<<"Stop Btn clicked...";
    if(Turbi_Sample==1)
    {
        ui->RunCal_Btn_4->setEnabled(true);
        ui->Turbi_Runsample_Btn->setEnabled(true);
        ui->stackedWidget_16->setVisible(false);
        ui->Home_Btn_26->setEnabled(true);
        QString No_cal,FActor;
        QSqlQuery qy;
        qy.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
        qy.exec();
        while(qy.next())
        {
            FActor=qy.value(6).toString();
            No_cal=qy.value(10).toString();
        }

        ui->fct_lbl_val->setText(FActor);
        if(No_cal=="1")
        {
            ui->fct_lbl_val->setVisible(true);
            ui->fct_lbl->setVisible(true);
        }
        else
        {
            ui->fct_lbl_val->setVisible(false);
            ui->fct_lbl->setVisible(false);
        }
        ui->stackedWidget->setCurrentIndex(32);
        ui->stackedWidget_13->setCurrentIndex(0);
    }
    else
        Turbidity_reading_Stop();
}

void MainWindow::on_toolButton_73_clicked()
{
    if(Page_change==1)
    {
        ui->stackedWidget->setCurrentIndex(32);
        ui->stackedWidget_13->setCurrentIndex(0);
    }
    else if(Page_change==2)
    {
        ui->stackedWidget->setCurrentIndex(32);
        ui->stackedWidget_13->setCurrentIndex(1);
    }
}

void MainWindow::on_Home_Btn_27_clicked()
{
    ui->stackedWidget->setCurrentIndex(3);
}

void MainWindow::on_Home_Btn_28_clicked()
{
    ui->stackedWidget->setCurrentIndex(1);
}

void MainWindow::on_comboBox_20_currentTextChanged(const QString &arg1)
{
    Q_UNUSED(arg1);
    QString selectedText=ui->comboBox_20->currentText();
    if(selectedText=="1")
    {
        ui->pushButton_223->setEnabled(true);
        ui->pushButton_281->setEnabled(false);
        ui->pushButton_246->setEnabled(false);
        ui->pushButton_283->setEnabled(false);
        ui->pushButton_225->setEnabled(false);
        ui->pushButton_282->setEnabled(false);
        ui->pushButton_243->setEnabled(false);
        ui->pushButton_247->setEnabled(false);

    }
    else if(selectedText=="2")
    {
        ui->pushButton_223->setEnabled(true);
        ui->pushButton_281->setEnabled(true);
        ui->pushButton_246->setEnabled(false);
        ui->pushButton_283->setEnabled(false);
        ui->pushButton_225->setEnabled(false);
        ui->pushButton_282->setEnabled(false);
        ui->pushButton_243->setEnabled(false);
        ui->pushButton_247->setEnabled(false);

    }
    else if(selectedText=="3")
    {
        ui->pushButton_223->setEnabled(true);
        ui->pushButton_281->setEnabled(true);
        ui->pushButton_246->setEnabled(true);
        ui->pushButton_283->setEnabled(false);
        ui->pushButton_225->setEnabled(false);
        ui->pushButton_282->setEnabled(false);
        ui->pushButton_243->setEnabled(false);
        ui->pushButton_247->setEnabled(false);
    }
    else if(selectedText=="4")
    {
        ui->pushButton_223->setEnabled(true);
        ui->pushButton_281->setEnabled(true);
        ui->pushButton_246->setEnabled(true);
        ui->pushButton_283->setEnabled(true);
        ui->pushButton_225->setEnabled(false);
        ui->pushButton_282->setEnabled(false);
        ui->pushButton_243->setEnabled(false);
        ui->pushButton_247->setEnabled(false);
    }
    else if(selectedText=="5")
    {
        ui->pushButton_223->setEnabled(true);
        ui->pushButton_281->setEnabled(true);
        ui->pushButton_246->setEnabled(true);
        ui->pushButton_283->setEnabled(true);
        ui->pushButton_225->setEnabled(true);
        ui->pushButton_282->setEnabled(false);
        ui->pushButton_243->setEnabled(false);
        ui->pushButton_247->setEnabled(false);
    }
    else if(selectedText=="6")
    {
        ui->pushButton_223->setEnabled(true);
        ui->pushButton_281->setEnabled(true);
        ui->pushButton_246->setEnabled(true);
        ui->pushButton_283->setEnabled(true);
        ui->pushButton_225->setEnabled(true);
        ui->pushButton_282->setEnabled(true);
        ui->pushButton_243->setEnabled(false);
        ui->pushButton_247->setEnabled(false);
    }
    else if(selectedText=="7")
    {
        ui->pushButton_223->setEnabled(true);
        ui->pushButton_281->setEnabled(true);
        ui->pushButton_246->setEnabled(true);
        ui->pushButton_283->setEnabled(true);
        ui->pushButton_225->setEnabled(true);
        ui->pushButton_282->setEnabled(true);
        ui->pushButton_243->setEnabled(true);
        ui->pushButton_247->setEnabled(false);
    }
    else if(selectedText=="8")
    {
        ui->pushButton_223->setEnabled(true);
        ui->pushButton_281->setEnabled(true);
        ui->pushButton_246->setEnabled(true);
        ui->pushButton_283->setEnabled(true);
        ui->pushButton_225->setEnabled(true);
        ui->pushButton_282->setEnabled(true);
        ui->pushButton_243->setEnabled(true);
        ui->pushButton_247->setEnabled(true);
    }
    ui->lineEdit_99->clear();
    ui->lineEdit_103->clear();
    ui->lineEdit_100->clear();
    ui->lineEdit_106->clear();
    ui->lineEdit_101->clear();
    ui->lineEdit_105->clear();
    ui->lineEdit_102->clear();
    ui->lineEdit_104->clear();
}

void MainWindow::on_comboBox_21_currentTextChanged(const QString &arg1)
{
    Q_UNUSED(arg1);
    QString selectedText=ui->comboBox_21->currentText();
    if(selectedText=="1")
    {
        ui->pushButton_307->setEnabled(true);
        ui->pushButton_313->setEnabled(false);
        ui->pushButton_311->setEnabled(false);
        ui->pushButton_317->setEnabled(false);
        ui->pushButton_308->setEnabled(false);
        ui->pushButton_314->setEnabled(false);
        ui->pushButton_310->setEnabled(false);
        ui->pushButton_312->setEnabled(false);

    }
    else if(selectedText=="2")
    {
        ui->pushButton_307->setEnabled(true);
        ui->pushButton_313->setEnabled(true);
        ui->pushButton_311->setEnabled(false);
        ui->pushButton_317->setEnabled(false);
        ui->pushButton_308->setEnabled(false);
        ui->pushButton_314->setEnabled(false);
        ui->pushButton_310->setEnabled(false);
        ui->pushButton_312->setEnabled(false);

    }
    else if(selectedText=="3")
    {
        ui->pushButton_307->setEnabled(true);
        ui->pushButton_313->setEnabled(true);
        ui->pushButton_311->setEnabled(true);
        ui->pushButton_317->setEnabled(false);
        ui->pushButton_308->setEnabled(false);
        ui->pushButton_314->setEnabled(false);
        ui->pushButton_310->setEnabled(false);
        ui->pushButton_312->setEnabled(false);
    }
    else if(selectedText=="4")
    {
        ui->pushButton_307->setEnabled(true);
        ui->pushButton_313->setEnabled(true);
        ui->pushButton_311->setEnabled(true);
        ui->pushButton_317->setEnabled(true);
        ui->pushButton_308->setEnabled(false);
        ui->pushButton_314->setEnabled(false);
        ui->pushButton_310->setEnabled(false);
        ui->pushButton_312->setEnabled(false);
    }
    else if(selectedText=="5")
    {
        ui->pushButton_307->setEnabled(true);
        ui->pushButton_313->setEnabled(true);
        ui->pushButton_311->setEnabled(true);
        ui->pushButton_317->setEnabled(true);
        ui->pushButton_308->setEnabled(true);
        ui->pushButton_314->setEnabled(false);
        ui->pushButton_310->setEnabled(false);
        ui->pushButton_312->setEnabled(false);
    }
    else if(selectedText=="6")
    {
        ui->pushButton_307->setEnabled(true);
        ui->pushButton_313->setEnabled(true);
        ui->pushButton_311->setEnabled(true);
        ui->pushButton_317->setEnabled(true);
        ui->pushButton_308->setEnabled(true);
        ui->pushButton_314->setEnabled(true);
        ui->pushButton_310->setEnabled(false);
        ui->pushButton_312->setEnabled(false);
    }
    else if(selectedText=="7")
    {
        ui->pushButton_307->setEnabled(true);
        ui->pushButton_313->setEnabled(true);
        ui->pushButton_311->setEnabled(true);
        ui->pushButton_317->setEnabled(true);
        ui->pushButton_308->setEnabled(true);
        ui->pushButton_314->setEnabled(true);
        ui->pushButton_310->setEnabled(true);
        ui->pushButton_312->setEnabled(false);
    }
    else if(selectedText=="8")
    {
        ui->pushButton_307->setEnabled(true);
        ui->pushButton_313->setEnabled(true);
        ui->pushButton_311->setEnabled(true);
        ui->pushButton_317->setEnabled(true);
        ui->pushButton_308->setEnabled(true);
        ui->pushButton_314->setEnabled(true);
        ui->pushButton_310->setEnabled(true);
        ui->pushButton_312->setEnabled(true);
    }
}

void MainWindow::on_pushButton_330_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Infant-Min)",ui->lineEdit_46->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_46->setText(Data);
        ui->stackedWidget->setCurrentIndex(4);
    }
}

void MainWindow::on_pushButton_135_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Infant-Max)",ui->lineEdit_49->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_49->setText(Data);
        ui->stackedWidget->setCurrentIndex(4);
    }
}

void MainWindow::on_pushButton_336_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Child-Min)",ui->lineEdit_50->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_50->setText(Data);
        ui->stackedWidget->setCurrentIndex(4);
    }
}

void MainWindow::on_pushButton_335_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Child-Max)",ui->lineEdit_51->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_51->setText(Data);
        ui->stackedWidget->setCurrentIndex(4);
    }
}

void MainWindow::on_pushButton_339_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Female-Min)",ui->lineEdit_108->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_108->setText(Data);
        ui->stackedWidget->setCurrentIndex(4);
    }
}

void MainWindow::on_pushButton_337_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Female-Max)",ui->lineEdit_109->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_109->setText(Data);
        ui->stackedWidget->setCurrentIndex(4);
    }
}

void MainWindow::on_pushButton_342_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Infant-Min)",ui->lineEdit_128->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_128->setText(Data);
        ui->stackedWidget->setCurrentIndex(5);
    }
}

void MainWindow::on_pushButton_345_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Infant-Max)",ui->lineEdit_129->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_129->setText(Data);
        ui->stackedWidget->setCurrentIndex(5);
    }
}

void MainWindow::on_pushButton_343_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Child-Min)",ui->lineEdit_130->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_130->setText(Data);
        ui->stackedWidget->setCurrentIndex(5);
    }
}

void MainWindow::on_pushButton_346_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Child-Max)",ui->lineEdit_131->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_131->setText(Data);
        ui->stackedWidget->setCurrentIndex(5);
    }
}

void MainWindow::on_pushButton_344_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Female-Min)",ui->lineEdit_132->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_132->setText(Data);
        ui->stackedWidget->setCurrentIndex(5);
    }
}

void MainWindow::on_pushButton_347_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Female-Max)",ui->lineEdit_133->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_133->setText(Data);
        ui->stackedWidget->setCurrentIndex(5);
    }
}

void MainWindow::on_pushButton_348_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Infant-Min)",ui->lineEdit_134->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_134->setText(Data);
        ui->stackedWidget->setCurrentIndex(33);
    }
}

void MainWindow::on_pushButton_351_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Infant-Max)",ui->lineEdit_135->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_135->setText(Data);
        ui->stackedWidget->setCurrentIndex(33);
    }
}

void MainWindow::on_pushButton_349_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Child-Min)",ui->lineEdit_148->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_148->setText(Data);
        ui->stackedWidget->setCurrentIndex(33);
    }
}

void MainWindow::on_pushButton_352_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Child-Max)",ui->lineEdit_158->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_158->setText(Data);
        ui->stackedWidget->setCurrentIndex(33);
    }
}

void MainWindow::on_pushButton_350_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Female-Min)",ui->lineEdit_159->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_159->setText(Data);
        ui->stackedWidget->setCurrentIndex(33);
    }
}

void MainWindow::on_pushButton_353_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Female-Max)",ui->lineEdit_160->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_160->setText(Data);
        ui->stackedWidget->setCurrentIndex(33);
    }
}

void MainWindow::on_pushButton_356_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Infant-Min)",ui->lineEdit_163->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_163->setText(Data);
        ui->stackedWidget->setCurrentIndex(34);
    }
}

void MainWindow::on_pushButton_359_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Infant-Max)",ui->lineEdit_164->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_164->setText(Data);
        ui->stackedWidget->setCurrentIndex(34);
    }
}

void MainWindow::on_pushButton_357_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Child-Min)",ui->lineEdit_165->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_165->setText(Data);
        ui->stackedWidget->setCurrentIndex(34);
    }
}

void MainWindow::on_pushButton_360_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Child-Max)",ui->lineEdit_166->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_166->setText(Data);
        ui->stackedWidget->setCurrentIndex(34);
    }
}

void MainWindow::on_pushButton_358_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Female-Min)",ui->lineEdit_167->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_167->setText(Data);
        ui->stackedWidget->setCurrentIndex(34);
    }
}

void MainWindow::on_pushButton_361_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Normal Range(Female-Max)",ui->lineEdit_168->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_168->setText(Data);
        ui->stackedWidget->setCurrentIndex(34);
    }
}

void MainWindow::on_pushButton_326_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Laser-Intensity",ui->lineEdit_107->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_107->setText(Data);
        ui->stackedWidget->setCurrentIndex(37);
    }
}

int MainWindow::on_pushButton_341_clicked()
{
    // 1 Run the motor process
    int Val = ui->lineEdit_110->text().toInt();
    pwmWrite(Motor_PIN, Val); // Start motor at speed Val

    digitalWrite(Motor_PIN ,HIGH);
    delay(1000);
    digitalWrite(Motor_PIN ,LOW);
    delay(1000);
    /* if (Val > 0 && Val <= 1023) // Ensure a valid PWM range
    {
        pwmWrite(Motor_PIN, Val); // Start motor at speed Val
        digitalWrite(Motor_PIN ,HIGH);
        delay(1000);  // Keep motor running
    }*/
    return 0;
}

void MainWindow::on_pushButton_354_clicked()
{
    stopMotor();
}

void MainWindow::DC_Motor()
{
    // 1️⃣ Show the message box
    QMessageBox *connectingMsg = new QMessageBox(this);
    connectingMsg->setWindowFlags(Qt::Popup);
    connectingMsg->setStyleSheet("background-color:#c5d9ed;font: 75 20pt Liberation Serif;");
    QFont font;
    font.setBold(true);
    connectingMsg->setFont(font);
    QPixmap p("/home/pi/git/BCYWithTRY/BCYWithTRY/img/notification.png");
    auto newPixmap = p.scaled(80, 80);
    connectingMsg->setIconPixmap(newPixmap);
    connectingMsg->setText("Beads mixing please wait.");
    connectingMsg->setStandardButtons(QMessageBox::NoButton);

    connectingMsg->show();
    QCoreApplication::processEvents(); // Allow UI to update

    // 2️⃣ Run the motor process
    int Val = ui->lineEdit_110->text().toInt();
    int DC_Motor_Intensity=0;
    QSqlQuery qryy;
    qryy.prepare("select DCMotor_Instensity from Turbidity_test where sno=1");
    qryy.exec();
    while(qryy.next())
        DC_Motor_Intensity=qryy.value(0).toInt();

    unsigned int Motor=0;
    QSqlQuery query;
    query.prepare("select Motor from Turbidity_Setting where sno=1");
    query.exec();
    while(query.next())
    {
        Motor=query.value(0).toUInt();
    }
    qDebug()<<"Motor val : "<<Motor;
    // Start the motor at speed Val
    pwmWrite(Motor_PIN, DC_Motor_Intensity);
    digitalWrite(Motor_PIN, HIGH);

    // Keep the motor running for 3 seconds continuously
    delay(Motor);

    // Stop the motor
    digitalWrite(Motor_PIN, LOW);
    pwmWrite(Motor_PIN, 0);

    /*pwmWrite(Motor_PIN, Val); // Start motor at speed Val
    for(int i=0;i<3;i++)
    {
    digitalWrite(Motor_PIN ,HIGH);
    delay(1000);
    digitalWrite(Motor_PIN ,LOW);
    delay(1000);
    }
    */
    /* if (Val > 0 && Val <= 1023) // Ensure a valid PWM range
    {
        pwmWrite(Motor_PIN, Val); // Start motor at speed Val
        digitalWrite(Motor_PIN ,HIGH);
        for (int i = 0; i < 3; i++)
        {
            delay(1000);  // Keep motor running
        }

        // Proper motor stop
        stopMotor();
    }
    else
    {
        qDebug() << "Invalid motor speed value!";
    }
*/
    // 4️⃣ Close the message box AFTER motor stops
    connectingMsg->accept();  // Close the message box
    delete connectingMsg; // Free memory
}

void MainWindow::stopMotor()
{
    pwmWrite(Motor_PIN, 0);  // Stop motor
    digitalWrite(Motor_PIN, LOW);
    //pinMode(Motor_PIN, INPUT);  // Release pin to avoid leakage
    qDebug() << "Motor fully stopped!";
}

void MainWindow::on_pushButton_340_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Motor PWM(0-1000)",ui->lineEdit_110->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_110->setText(Data);
        QSqlQuery qury;
        qury.prepare("update Turbidity_test set DCMotor_Instensity=:Data where sno=1");
        qury.bindValue(":Data",Data);
        qury.exec();
        ui->stackedWidget->setCurrentIndex(37);
    }
}

void MainWindow::on_pushButton_355_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Input-Min",ui->lineEdit_111->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_111->setText(Data);
        QSqlQuery qury;
        qury.prepare("update Turbidity_Setting set Input_min=:Data where sno=1");
        qury.bindValue(":Data",Data);
        qury.exec();
        ui->stackedWidget_15->setCurrentIndex(1);
        ui->stackedWidget->setCurrentIndex(37);
    }
}

void MainWindow::on_pushButton_362_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Input-Max",ui->lineEdit_161->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_161->setText(Data);

        QSqlQuery qury;
        qury.prepare("update Turbidity_Setting set Input_max=:Data where sno=1");
        qury.bindValue(":Data",Data);
        qury.exec();
        ui->stackedWidget_15->setCurrentIndex(1);
        ui->stackedWidget->setCurrentIndex(37);
    }
}

void MainWindow::on_pushButton_363_clicked()
{
    ui->toolButton_75->setVisible(true);
    QString Min , Max ;
    int Motor=0;
    QSqlQuery query;
    query.prepare("select Input_min,Inout_max,Motor from Turbidity_Setting where sno=1");
    query.exec();
    while(query.next())
    {
        Min=query.value(0).toString();
        Max=query.value(1).toString();
        Motor=query.value(2).toInt();
    }
    int Dtaa = Motor/1000;
    ui->lineEdit_111->setText(Min);
    ui->lineEdit_161->setText(Max);
    ui->lineEdit_162->setText(QString::number(Dtaa));
    ui->stackedWidget_15->setCurrentIndex(1);
}

void MainWindow::on_toolButton_75_clicked()
{
    ui->toolButton_75->setVisible(false);
    ui->stackedWidget_15->setCurrentIndex(0);
}

void MainWindow::on_pushButton_364_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Motor Duration",ui->lineEdit_162->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_162->setText(Data);
        int D_Motor = Data.toInt();
        int full = D_Motor * 1000;
        QString Dur = QString::number(full,'f',0);
        qDebug()<<"Data : "<<Data <<"D_Motor : "<<D_Motor<<"Dur : "<<Dur;
        QSqlQuery qury;
        qury.prepare("update Turbidity_Setting set Motor=:Dur where sno=1");
        qury.bindValue(":Dur",Dur);
        qury.exec();
        ui->stackedWidget_15->setCurrentIndex(0);
        ui->stackedWidget->setCurrentIndex(37);
    }
}

void MainWindow::on_progressBar_valueChanged(int value)
{

}

void MainWindow::on_pushButton_366_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("After adding R2",ui->lineEdit_170->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_170->setText(Data);
        ui->stackedWidget_3->setCurrentIndex(0);
        ui->stackedWidget->setCurrentIndex(33);
    }
}

void MainWindow::on_pushButton_365_clicked()
{
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Direct reading",ui->lineEdit_169->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_169->setText(Data);
        ui->stackedWidget_3->setCurrentIndex(0);
        ui->stackedWidget->setCurrentIndex(33);
    }
}

void MainWindow::on_pushButton_369_clicked()
{
    //Incubation
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("After adding R2",ui->lineEdit_173->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_173->setText(Data);
        ui->stackedWidget_5->setCurrentIndex(0);
        ui->stackedWidget->setCurrentIndex(34);
    }
}

void MainWindow::on_pushButton_367_clicked()
{
    //Incubation
    Virtual_Keyboard *key=new Virtual_Keyboard(this);
    key->setModal(true);
    key->setPage(3);
    key->getvalue(2);
    key->setData("Direct reading",ui->lineEdit_171->text());
    key->setGeometry(virtual_x, virtual_y, keyboardWidth, keyboardHeight);
    key->exec(); QString returndata = key->ReturnData();
    if(returndata == "1")
        qDebug()<<"back";
    else
    {
        QString Data = key->getData();
        ui->lineEdit_171->setText(Data);
        ui->stackedWidget_5->setCurrentIndex(0);
        ui->stackedWidget->setCurrentIndex(34);
    }
}

void MainWindow::on_Graph_Type_4_currentTextChanged(const QString &arg1)
{
    QString Text = ui->Graph_Type_4->currentText();
    QSqlQuery query;
    if(Text=="Inside Incubation")
    {
        query.prepare("select Incubation,IncuR2 from Turbidity_test where TestName='"+TestName+"'");
        query.exec();
        while(query.next())
        {
            R1_Samp_Incu=query.value(0).toInt();
            After_R2_Incu=query.value(1).toInt();
        }
        qDebug()<<"R1_Samp : "<<R1_Samp_Incu<<"After_R2_Incu : "<<After_R2_Incu;

    }
    else if(Text=="Outside Incubation")
    {
        query.prepare("select DirRead from Turbidity_test where TestName='"+TestName+"'");
        query.exec();
        while(query.next())
        {
            Direct_read_Incu=query.value(0).toInt();
        }
        qDebug()<<"Direct_read_Incu : "<<Direct_read_Incu;
    }
}

void MainWindow::on_Turbi_Runsample_Btn_6_clicked()
{
    DC_Motor();
    if(Read_d==0)
    {
        QThread::msleep(500);
        int Incu=0;
        QSqlQuery query;
        if(Read_d==0)
            query.prepare("select Incubation from Turbidity_test where TestName='"+TestName+"'");
        else if(Read_d==1)
            query.prepare("select IncuR2 from Turbidity_test where TestName='"+TestName+"'");

        query.exec();
        while(query.next())
        {
            Incu=query.value(0).toInt();
        }
        countdown = QTime(0, Incu, 0, 0); // Update countdown with the new value of Time
        etimer.start();
        Incubationtimer1->start(1000);
    }
    else if(Read_d==1)
    {
        QSqlQuery query;
        int intensity=0,Incubation_Time=0;
        query.prepare("select * from Turbidity_test where TestName='"+TestName+"'");
        query.exec();
        while(query.next())
            Incubation_Time=query.value(8).toInt();

        QSqlQuery qury;
        qury.prepare("select intensity from tests where sno=7");
        qury.exec();
        while(qury.next())
            intensity=qury.value(0).toInt();

        /*int Input_Min=0, Input_Max=0;
        QSqlQuery qq;
        qq.prepare("select Input_min,Inout_max from Turbidity_Setting where sno=1");
        qq.exec();
        while(qq.next())
        {
            Input_Min=qq.value(0).toInt();
            Input_Max=qq.value(1).toInt();

        }
        int Final_Inten = ((Output_Max-Output_Min)/(Input_Max-Input_Min))*(intensity-Input_Min)+Output_Min;*/
        Turbidity_read_Intensity=intensity;
        total_read_point = (Incubation_Time*60);
        read_wave_LED=6; //LED
        read_wave135=1; //Photodiode 405nm0 (135°)
        read_wave180=0; //Photodiode 505nm (180°)
        filtwave135[0]=Turbidity_reading135();
        filtwave180[0]=Turbidity_reading180();
        read135=filtwave135[0];
        read180=filtwave180[0];
        ui->label_573->setText(TestName);
        ui->lcdNumber->display("00:00");
        ui->stackedWidget->setCurrentIndex(36);
        countdown = QTime(0, Incubation_Time, 0, 0); // Update countdown with the new value of Time
        etimer.start();
        Incubationtimer->start(1000);

        Turbi_Update_Func();
        Read_d=2;
    }
    ui->stackedWidget_16->setCurrentIndex(1);
}

void MainWindow::on_Stop_Btn_5_clicked()
{
    Incubationtimer1->stop();
    ui->Home_Btn_26->setDisabled(false);
    ui->RunCal_Btn_4->setDisabled(false);
    ui->Turbi_Runsample_Btn->setDisabled(false);
    ui->Turbi_Runsample_Btn_2->setDisabled(false);
    ui->toolButton_73->setDisabled(false);

    ui->stackedWidget_16->setCurrentIndex(0);
}

void MainWindow::on_Home_Btn_29_clicked()
{
    ui->stackedWidget_16->setVisible(false);
}
